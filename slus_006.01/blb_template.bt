//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
LittleEndian();
FSeek(0);

/*
PCSX-Redux Lua Console 
LuaJIT 2.1.0-beta3 
JIT: ON SSE3 SSE4.1 BMI2 fold cse dce fwd dse narrow loop abc sink fuse 
Shader compiled: program ID = 7 
Shader compiled: program ID = 10 
Loading BLB data from sector 00000000 with size 00001000 to memory location 800ae450 caller 80020934 
Loading BLB data from sector 00006000 with size 00005000 to memory location 80116450 caller 800399d4 
Loading BLB data from sector 0000b000 with size 00002000 to memory location 80116450 caller 800399d4 
Loading BLB data from sector 0000d000 with size 00055800 to memory location 80116450 caller 800395d0 
Loading BLB data from sector 00062800 with size 00002000 to memory location 80116450 caller 800399d4 
Loading BLB data from sector 00064800 with size 00010000 to memory location 800af450 caller 80020858 
Loading BLB data from sector 00074800 with size 00021800 to memory location 800bc4b4 caller 80020858 
Loading BLB data from sector 00096000 with size 000f4000 to memory location 800bc4b4 caller 80020858 
Loading BLB data from sector 00643000 with size 00004800 to memory location 80116450 caller 800399d4 
Loading BLB data from sector 00647800 with size 0009f000 to memory location 800af450 caller 80020858 
Loading BLB data from sector 006e6800 with size 00065800 to memory location 8012f42c caller 80020858 
Loading BLB data from sector 0074c000 with size 0004b800 to memory location 8012f42c caller 80020858 
Loading BLB data from sector 00000000 with size 00001000 to memory location 800ae450 caller 80020934 
Loading BLB data from sector 00006000 with size 00005000 to memory location 80116450 caller 800399d4 
Loading BLB data from sector 0000b000 with size 00002000 to memory location 80116450 caller 800399d4 
Loading BLB data from sector 0000d000 with size 00055800 to memory location 80116450 caller 800395d0 
Loading BLB data from sector 00062800 with size 00002000 to memory location 80116450 caller 800399d4 
Loading BLB data from sector 00064800 with size 00010000 to memory location 800af450 caller 80020858 
Loading BLB data from sector 00074800 with size 00021800 to memory location 800bc4b4 caller 80020858 
Loading BLB data from sector 00096000 with size 000f4000 to memory location 800bc4b4 caller 80020858 

# science centre 
Loading BLB data from sector 00643000 with size 00004800 to memory location 80116450 caller 800399d4  // loading screen

Loading BLB data from sector 00647800 with size 0009f000 to memory location 800af450 caller 80020858  // initial offset in level
Loading BLB data from sector 006e6800 with size 00065800 to memory location 8012f42c caller 80020858  // 2nd
Loading BLB data from sector 0074c000 with size 0004b800 to memory location 8012f42c caller 80020858  // 3rd - where does size come from!?!?

*/

local uint64 SECTORS = 0x800;

// the header is 0x1000 bytes wide
typedef struct HEADER{
    struct LEVELS{
        while ( ReadUByte(FTell()) != 0 )
        {
            struct LEVEL{
                ushort offset; // points to data starting with 03 00 00 00 58 02 00 00
                ushort size;
                ubyte static[8];
                ubyte index;
                ubyte some_flag;
                ubyte _[14];
                short _ <hidden=true>;
                ushort _some_offset; // is correlated with offset for loading screen
                short _; // is correlated with offset for loading screen
                ubyte dynamic[10]; // seems to contain pointer/offsets to data in blb
                ushort _some_size;
                short _;
                short _;
                short _;
                short _;
                short _;
                short _ <hidden=true>;
                ushort _some_other_offset; // is correlated with offset for loading screen
                short _;
                ubyte more_dynamic[10];
                ushort _some_other_size;  // is correlated with offset for loading screen
                short _;
                short _;
                short _;
                short _;
                short _;
                short _;
                char id[5];
                char name[21];
            } level <read=(name)>;

            FSeek(level.offset * SECTORS);
            struct DATA{
                ubyte header[8];
                ubyte data[level.size * SECTORS -8];
            } level_data;

            FSeek(level._some_offset * SECTORS);
            struct DATA_2{
                ubyte data[level._some_size * SECTORS];
            } level_data_2;

            FSeek(level._some_other_offset * SECTORS);
            struct DATA_3{
                ubyte data[level._some_other_size * SECTORS];
            } level_data_3;

            FSeek(startof(level)+sizeof(level));
        }
    } levels;
    
    FSeek(0x0b60);
    struct MOVIES{
        while ( ReadUByte(FTell()) == 0 )
        {
            struct MOVIE{
                char unknown[4]; // regular blb has 28 char width (ends in ;1 and then has dword of 0x0 after
                // but demo has 24 width (no padding)
                char id[];
                char name[];
                char filename[16];
            } movie <read=(id)>;
        }
    } movies;
    
    struct LOADING_SCREEN{
        ushort offset; // points to a location in blb where loading screen is stored as MDEC frame
        ushort size;
        uchar unknown;
        ubyte _1;
        ubyte _2;
        char id[5];
        char name[4];
    } loading_screens[32] <read=(id)>;

    // this could really be nicer
    local uint64 i = 0;
    for (i = 0; i < 32; i++)
    {
        FSeek(loading_screens[i].offset * SECTORS);
        struct LOADING_SCREEN_DATA{
            char data[loading_screens[i].size * SECTORS];
        } loading_screen_data;
    }
};

HEADER header;
