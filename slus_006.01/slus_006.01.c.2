// Part 2
undefined4 CD_datasync(int param_1)

{
  int iVar1;
  int iVar2;
  undefined4 uVar3;
  
  iVar1 = VSync(-1);
  DAT_800a61e8 = iVar1 + 0x3c0;
  DAT_800a61ec = 0;
  DAT_800a61f0 = "CD_datasync";
  while (iVar2 = VSync(-1), iVar1 = DAT_800a61ec, iVar2 <= DAT_800a61e8) {
    DAT_800a61ec = DAT_800a61ec + 1;
    if (0x3c0000 < iVar1) break;
    uVar3 = 0;
    if (((*(uint *)PTR_DMA_CDROM_CHCR_8009e280 & 0x1000000) == 0) || (uVar3 = 1, param_1 != 0)) {
      return uVar3;
    }
  }
  FUN_80085128("CD timeout: ");
  printf("%s:(%s) Sync=%s, Ready=%s\n",DAT_800a61f0,(&PTR_s_CdlSync_8009df9c)[DAT_8009df95],
         (&PTR_s_NoIntr_8009e01c)[DAT_8009e254],(&PTR_s_NoIntr_8009e01c)[DAT_8009e255]);
  CD_flush();
  uVar3 = BIOS_OBJ_14A4();
  return uVar3;
}



undefined4 BIOS_OBJ_14A4(void)

{
  bool bVar1;
  int iVar2;
  int in_v0;
  undefined4 uVar3;
  int unaff_s0;
  byte *unaff_s1;
  int unaff_s2;
  int unaff_s3;
  
  while (((uVar3 = 0xffffffff, in_v0 == 0 &&
          (uVar3 = 0, (*(uint *)PTR_DMA_CDROM_CHCR_8009e280 & 0x1000000) != 0)) &&
         (uVar3 = 1, unaff_s2 == 0))) {
    iVar2 = VSync(-1);
    if ((DAT_800a61e8 < iVar2) ||
       (iVar2 = DAT_800a61ec + 1, bVar1 = 0x3c0000 < DAT_800a61ec, DAT_800a61ec = iVar2, bVar1)) {
      FUN_80085128("CD timeout: ");
      printf("%s:(%s) Sync=%s, Ready=%s\n",DAT_800a61f0,
             *(undefined4 *)((uint)DAT_8009df95 * 4 + unaff_s3),
             *(undefined4 *)((uint)*unaff_s1 * 4 + unaff_s0));
      CD_flush();
      uVar3 = BIOS_OBJ_14A4();
      return uVar3;
    }
    in_v0 = 0;
  }
  return uVar3;
}



undefined4 CD_getsector(undefined4 param_1,uint param_2)

{
  uint uVar1;
  
  *PTR_CDROM_REG0_8009e23c = 0;
  *PTR_CDROM_REG3_8009e248 = 0x80;
  *(undefined4 *)PTR_CDROM_DELAY_8009e270 = 0x20943;
  *(undefined4 *)PTR_COMMON_DELAY_8009e24c = 0x1323;
  *(uint *)PTR_DMA_DPCR_8009e274 = *(uint *)PTR_DMA_DPCR_8009e274 | 0x8000;
  *(undefined4 *)PTR_DMA_CDROM_MADR_8009e278 = param_1;
  *(uint *)PTR_DMA_CDROM_BCR_8009e27c = param_2 | 0x10000;
  do {
  } while ((*PTR_CDROM_REG0_8009e23c & 0x40) == 0);
  *(undefined4 *)PTR_DMA_CDROM_CHCR_8009e280 = 0x11000000;
  uVar1 = *(uint *)PTR_DMA_CDROM_CHCR_8009e280;
  while ((uVar1 & 0x1000000) != 0) {
    uVar1 = *(uint *)PTR_DMA_CDROM_CHCR_8009e280;
  }
  *(undefined4 *)PTR_COMMON_DELAY_8009e24c = 0x1325;
  return 0;
}



undefined4 CD_getsector2(undefined4 param_1,uint param_2)

{
  byte bVar1;
  
  *PTR_CDROM_REG0_8009e23c = 0;
  *PTR_CDROM_REG3_8009e248 = 0x80;
  *(undefined4 *)PTR_CDROM_DELAY_8009e270 = 0x21020843;
  *(undefined4 *)PTR_COMMON_DELAY_8009e24c = 0x1325;
  *(uint *)PTR_DMA_DPCR_8009e274 = *(uint *)PTR_DMA_DPCR_8009e274 | 0x8000;
  *(undefined4 *)PTR_DMA_CDROM_MADR_8009e278 = param_1;
  *(uint *)PTR_DMA_CDROM_BCR_8009e27c = param_2 | 0x10000;
  bVar1 = *PTR_CDROM_REG0_8009e23c;
  while ((bVar1 & 0x40) == 0) {
    bVar1 = *PTR_CDROM_REG0_8009e23c;
  }
  *(undefined4 *)PTR_DMA_CDROM_CHCR_8009e280 = 0x11400100;
  return 0;
}



// Possible GS_101.OBJ/GsSetNearClip
// Possible GS_102.OBJ/GsSetFarClip
// Possible GS_124.OBJ/GsSetWorkBase

void CD_set_test_parmnum(undefined4 param_1)

{
  DAT_8009e220 = param_1;
  return;
}



void callback(void)

{
  byte bVar1;
  uint uVar2;
  
  bVar1 = *PTR_CDROM_REG0_8009e23c;
  do {
    uVar2 = getintr();
    if (uVar2 == 0) {
      *PTR_CDROM_REG0_8009e23c = bVar1 & 3;
      return;
    }
    if (((uVar2 & 4) != 0) && (DAT_8009df78 != (code *)0x0)) {
      (*DAT_8009df78)(DAT_8009e255,&DAT_800a61d8);
    }
  } while (((uVar2 & 2) == 0) || (DAT_8009df74 == (code *)0x0));
  (*DAT_8009df74)(DAT_8009e254,&DAT_800a61d0);
  BIOS_OBJ_1728();
  return;
}



void BIOS_OBJ_1728(void)

{
  uint uVar1;
  undefined *unaff_s1;
  undefined unaff_s2;
  undefined *unaff_s3;
  
  do {
    uVar1 = getintr();
    if (uVar1 == 0) {
      *PTR_CDROM_REG0_8009e23c = unaff_s2;
      return;
    }
    if (((uVar1 & 4) != 0) && (DAT_8009df78 != (code *)0x0)) {
      (*DAT_8009df78)(*unaff_s1,&DAT_800a61d8);
    }
  } while (((uVar1 & 2) == 0) || (DAT_8009df74 == (code *)0x0));
  (*DAT_8009df74)(*unaff_s3,&DAT_800a61d0);
  BIOS_OBJ_1728();
  return;
}



// Possible A63.OBJ/puts

void FUN_80085128(void)

{
  (*(code *)&SUB_000000b0)();
  return;
}



CdlFILE * CdSearchFile(CdlFILE *_30,char *name)

{
  char cVar1;
  int iVar2;
  CdlFILE *pCVar3;
  undefined1 *puVar4;
  int iVar5;
  CdlLOC CVar6;
  CdlLOC CVar7;
  CdlLOC CVar8;
  char *pcVar9;
  CdlLOC *pCVar10;
  char *pcVar11;
  int iVar12;
  char local_38 [32];
  
  if (DAT_8009e288 != DAT_8009df8c) {
    iVar2 = CD_newmedia();
    if (iVar2 == 0) {
      return (CdlFILE *)0x0;
    }
    DAT_8009e288 = DAT_8009df8c;
  }
  iVar2 = 1;
  if (*name != '\\') {
    pCVar3 = (CdlFILE *)ISO9660_OBJ_2A8();
    return pCVar3;
  }
  local_38[0] = '\0';
  iVar12 = 0;
  pcVar9 = name;
  do {
    pcVar11 = local_38;
    cVar1 = *pcVar9;
    while (cVar1 != '\\') {
      if (cVar1 == '\0') goto ISO9660_OBJ_FC;
      pcVar9 = pcVar9 + 1;
      *pcVar11 = cVar1;
      pcVar11 = pcVar11 + 1;
      cVar1 = *pcVar9;
    }
    if (*pcVar9 == '\0') break;
    pcVar9 = pcVar9 + 1;
    *pcVar11 = '\0';
    iVar2 = CD_searchdir(iVar2,local_38);
    if (iVar2 == -1) {
      local_38[0] = '\0';
      pCVar3 = (CdlFILE *)ISO9660_OBJ_F8();
      return pCVar3;
    }
    iVar12 = iVar12 + 1;
  } while (iVar12 < 8);
ISO9660_OBJ_FC:
  if (iVar12 < 8) {
    if (local_38[0] == '\0') {
      if (0 < DAT_8009df80) {
        pCVar3 = (CdlFILE *)ISO9660_OBJ_29C("%s: dir was not found\n",name);
        return pCVar3;
      }
    }
    else {
      *pcVar11 = '\0';
      iVar2 = CD_cachefile();
      if (iVar2 == 0) {
        if (0 < DAT_8009df80) {
          printf("CdSearchFile: disc error\n");
          pCVar3 = (CdlFILE *)ISO9660_OBJ_2A8();
          return pCVar3;
        }
      }
      else {
        if (1 < DAT_8009df80) {
          printf("CdSearchFile: searching %s...\n",local_38);
        }
        iVar12 = 0;
        puVar4 = &DAT_800a6200;
        pCVar10 = (CdlLOC *)&DAT_800a61f8;
        iVar2 = 0;
        do {
          if ((&DAT_800a6200)[iVar2] == '\0') break;
          iVar5 = _cmp(puVar4,local_38);
          if (iVar5 != 0) {
            if (1 < DAT_8009df80) {
              printf("%s:  found\n",local_38);
            }
            CVar6 = pCVar10[1];
            CVar7 = pCVar10[2];
            CVar8 = pCVar10[3];
            _30->pos = *pCVar10;
            _30->size = (u_long)CVar6;
            *(CdlLOC *)_30->name = CVar7;
            *(CdlLOC *)(_30->name + 4) = CVar8;
            CVar6 = pCVar10[5];
            *(CdlLOC *)(_30->name + 8) = pCVar10[4];
            *(CdlLOC *)(_30->name + 0xc) = CVar6;
            pCVar3 = (CdlFILE *)ISO9660_OBJ_2A8();
            return pCVar3;
          }
          pCVar10 = pCVar10 + 6;
          puVar4 = puVar4 + 0x18;
          iVar12 = iVar12 + 1;
          iVar2 = iVar2 + 0x18;
        } while (iVar12 < 0x40);
        if (0 < DAT_8009df80) {
          printf("%s: not found\n",local_38);
        }
      }
    }
  }
  else if (0 < DAT_8009df80) {
    printf("%s: path level (%d) error\n",name,iVar12);
    pCVar3 = (CdlFILE *)ISO9660_OBJ_2A8();
    return pCVar3;
  }
  return (CdlFILE *)0x0;
}



undefined4 ISO9660_OBJ_F8(void)

{
  undefined4 uVar1;
  int iVar2;
  undefined1 *puVar3;
  int iVar4;
  undefined4 uVar5;
  undefined4 uVar6;
  undefined4 *puVar7;
  undefined *unaff_s1;
  int unaff_s2;
  int iVar8;
  undefined4 *unaff_s4;
  char param_5;
  
  if (unaff_s2 < 8) {
    if (param_5 == '\0') {
      if (0 < DAT_8009df80) {
        uVar1 = ISO9660_OBJ_29C("%s: dir was not found\n");
        return uVar1;
      }
    }
    else {
      *unaff_s1 = 0;
      iVar2 = CD_cachefile();
      if (iVar2 == 0) {
        if (0 < DAT_8009df80) {
          printf("CdSearchFile: disc error\n");
          uVar1 = ISO9660_OBJ_2A8();
          return uVar1;
        }
      }
      else {
        if (1 < DAT_8009df80) {
          printf("CdSearchFile: searching %s...\n",&stack0x00000010);
        }
        iVar8 = 0;
        puVar3 = &DAT_800a6200;
        puVar7 = &DAT_800a61f8;
        iVar2 = 0;
        do {
          if ((&DAT_800a6200)[iVar2] == '\0') break;
          iVar4 = _cmp(puVar3,&stack0x00000010);
          if (iVar4 != 0) {
            if (1 < DAT_8009df80) {
              printf("%s:  found\n",&stack0x00000010);
            }
            uVar1 = puVar7[1];
            uVar5 = puVar7[2];
            uVar6 = puVar7[3];
            *unaff_s4 = *puVar7;
            unaff_s4[1] = uVar1;
            unaff_s4[2] = uVar5;
            unaff_s4[3] = uVar6;
            uVar1 = puVar7[5];
            unaff_s4[4] = puVar7[4];
            unaff_s4[5] = uVar1;
            uVar1 = ISO9660_OBJ_2A8();
            return uVar1;
          }
          puVar7 = puVar7 + 6;
          puVar3 = puVar3 + 0x18;
          iVar8 = iVar8 + 1;
          iVar2 = iVar2 + 0x18;
        } while (iVar8 < 0x40);
        if (0 < DAT_8009df80) {
          printf("%s: not found\n",&stack0x00000010);
        }
      }
    }
  }
  else if (0 < DAT_8009df80) {
    printf("%s: path level (%d) error\n");
    uVar1 = ISO9660_OBJ_2A8();
    return uVar1;
  }
  return 0;
}



undefined4 ISO9660_OBJ_29C(char *param_1)

{
  printf(param_1);
  return 0;
}



void ISO9660_OBJ_2A8(void)

{
  return;
}



bool _cmp(char *param_1,char *param_2)

{
  int iVar1;
  
  iVar1 = strncmp(param_1,param_2,0xc);
  return iVar1 == 0;
}



undefined4 CD_newmedia(void)

{
  undefined *puVar1;
  byte bVar2;
  uint uVar3;
  uint *puVar4;
  int iVar5;
  undefined4 uVar6;
  uint uVar7;
  uint uVar8;
  byte *pbVar9;
  uchar *puVar10;
  int iVar11;
  undefined8 uVar12;
  undefined local_28 [8];
  
  pbVar9 = &DAT_800a7df8;
  iVar5 = cd_read(1,0x10,&DAT_800a7df8);
  if (iVar5 == 1) {
    iVar5 = strncmp(&DAT_800a7df9,"CD001",5);
    if (iVar5 == 0) {
      puVar1 = local_28 + 3;
      uVar8 = (uint)puVar1 & 3;
      *(uint *)(puVar1 + -uVar8) =
           *(uint *)(puVar1 + -uVar8) & -1 << (uVar8 + 1) * 8 | DAT_800a7e84 >> (3 - uVar8) * 8;
      local_28._0_4_ = DAT_800a7e84;
      uVar12 = cd_read(1,DAT_800a7e84,&DAT_800a7df8);
      uVar8 = (uint)((ulonglong)uVar12 >> 0x20);
      if ((int)uVar12 == 1) {
        if (1 < DAT_8009df80) {
          printf("CD_newmedia: sarching dir..\n");
        }
        iVar5 = 0;
        do {
          iVar11 = iVar5;
          if (*pbVar9 == 0) break;
          uVar3 = (uint)(pbVar9 + 5) & 3;
          uVar7 = (uint)(pbVar9 + 2) & 3;
          uVar7 = (*(int *)(pbVar9 + 5 + -uVar3) << (3 - uVar3) * 8 |
                  uVar8 & 0xffffffffU >> (uVar3 + 1) * 8) & -1 << (4 - uVar7) * 8 |
                  *(uint *)(pbVar9 + 2 + -uVar7) >> uVar7 * 8;
          uVar8 = iVar5 * 0x2c + 0x800a6803;
          uVar3 = uVar8 & 3;
          puVar4 = (uint *)(uVar8 - uVar3);
          *puVar4 = *puVar4 & -1 << (uVar3 + 1) * 8 | uVar7 >> (3 - uVar3) * 8;
          (&DAT_800a6800)[iVar5 * 0xb] = uVar7;
          puVar10 = &DAT_800a6804 + iVar5 * 0x2c;
          bVar2 = pbVar9[6];
          iVar11 = iVar5 + 1;
          (&DAT_800a67f8)[iVar5 * 0xb] = iVar11;
          (&DAT_800a67fc)[iVar5 * 0xb] = (uint)bVar2;
          memcpy(puVar10,pbVar9 + 8,(uint)*pbVar9);
          puVar10[*pbVar9] = '\0';
          uVar8 = (uint)*pbVar9 + (*pbVar9 & 1) + 8;
          pbVar9 = pbVar9 + uVar8;
          if (1 < DAT_8009df80) {
            printf("\t%08x,%04x,%04x,%s\n",(&DAT_800a6800)[iVar5 * 0xb],(&DAT_800a67f8)[iVar5 * 0xb]
                   ,(&DAT_800a67fc)[iVar5 * 0xb],puVar10);
          }
          if (0x7f < iVar11) goto ISO9660_OBJ_574;
          iVar5 = iVar11;
        } while (pbVar9 < &DAT_800a85f8);
        if (iVar11 < 0x80) {
          (&DAT_800a67fc)[iVar11 * 0xb] = 0;
        }
ISO9660_OBJ_574:
        DAT_8009e284 = 0;
        uVar6 = 1;
        if (1 < DAT_8009df80) {
          printf("CD_newmedia: %d dir entries found\n",iVar11);
          uVar6 = 1;
        }
      }
      else {
        uVar6 = 0;
        if (0 < DAT_8009df80) {
          printf("CD_newmedia: Read error (PT:%08x)\n",local_28._0_4_);
          uVar6 = ISO9660_OBJ_5A4();
          return uVar6;
        }
      }
    }
    else {
      uVar6 = 0;
      if (0 < DAT_8009df80) {
        printf("CD_newmedia: Disc format error in cd_read(PVD)\n");
        uVar6 = ISO9660_OBJ_5A4();
        return uVar6;
      }
    }
  }
  else {
    uVar6 = 0;
    if (0 < DAT_8009df80) {
      printf("CD_newmedia: Read error in cd_read(PVD)\n");
      uVar6 = ISO9660_OBJ_5A4();
      return uVar6;
    }
  }
  return uVar6;
}



void ISO9660_OBJ_5A4(void)

{
  return;
}



undefined4 CD_searchdir(int param_1,char *param_2)

{
  int iVar1;
  undefined4 uVar2;
  int iVar3;
  int iVar4;
  char *pcVar5;
  
  iVar3 = 0;
  pcVar5 = &DAT_800a6804;
  iVar4 = 0;
  while( true ) {
    if (*(int *)((int)&DAT_800a67fc + iVar4) == 0) {
      return 0xffffffff;
    }
    if ((*(int *)((int)&DAT_800a67fc + iVar4) == param_1) &&
       (iVar1 = strcmp(param_2,pcVar5), iVar1 == 0)) break;
    pcVar5 = pcVar5 + 0x2c;
    iVar3 = iVar3 + 1;
    iVar4 = iVar4 + 0x2c;
    if (0x7f < iVar3) {
      return 0xffffffff;
    }
  }
  uVar2 = ISO9660_OBJ_650();
  return uVar2;
}



void ISO9660_OBJ_650(void)

{
  return;
}



// WARNING: Removing unreachable block (ram,0x800858f4)
// WARNING: Removing unreachable block (ram,0x800858fc)
// WARNING: Removing unreachable block (ram,0x80085914)
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

undefined4 CD_cachefile(int param_1)

{
  undefined *puVar1;
  uint uVar2;
  int iVar3;
  undefined4 uVar4;
  undefined local_28 [8];
  
  if (param_1 != DAT_8009e284) {
    iVar3 = cd_read(1,*(undefined4 *)(&DAT_800a67d4 + param_1 * 0x2c),&DAT_800a7df8);
    if (iVar3 != 1) {
      if (DAT_8009df80 < 1) {
        return 0xffffffff;
      }
      printf("CD_cachefile: dir not found\n");
      uVar4 = ISO9660_OBJ_8F4();
      return uVar4;
    }
    if (1 < DAT_8009df80) {
      printf("CD_cachefile: searching...\n");
    }
    if (DAT_800a7df8 != '\0') {
      local_28._0_4_ = DAT_800a7dfc << 0x10 | _DAT_800a7df8 >> 0x10;
      puVar1 = local_28 + 3;
      uVar2 = (uint)puVar1 & 3;
      *(uint *)(puVar1 + -uVar2) =
           *(uint *)(puVar1 + -uVar2) & -1 << (uVar2 + 1) * 8 |
           (uint)local_28._0_4_ >> (3 - uVar2) * 8;
      CdIntToPos(local_28._0_4_,(CdlLOC *)&DAT_800a61f8);
      DAT_800a61fc = DAT_800a7e04 << 0x10 | DAT_800a7e00 >> 0x10;
      _DAT_800a6200 = 0x2e;
      uVar4 = ISO9660_OBJ_810();
      return uVar4;
    }
    _DAT_800a6200 = _DAT_800a6200 & 0xff00;
    if (DAT_8009df80 < 2) {
      DAT_8009e284 = param_1;
      return 1;
    }
    DAT_8009e284 = param_1;
    printf("CD_cachefile: %d files found\n",0);
  }
                    // WARNING: Read-only address (ram,0x800a7df8) is written
                    // WARNING: Read-only address (ram,0x800a7dfc) is written
                    // WARNING: Read-only address (ram,0x800a7e00) is written
                    // WARNING: Read-only address (ram,0x800a7e04) is written
  return 1;
}



undefined4 ISO9660_OBJ_7F4(uchar *param_1)

{
  uint uVar1;
  uint *puVar2;
  uint uVar3;
  undefined4 uVar4;
  uint uVar5;
  uint in_v1;
  byte *unaff_s0;
  byte *pbVar6;
  int unaff_s1;
  int unaff_s2;
  int iVar7;
  int unaff_s3;
  int unaff_s4;
  int unaff_s5;
  undefined4 unaff_s6;
  uint in_stack_00000018;
  
  memcpy(param_1,unaff_s0 + 0x21,(uint)unaff_s0[0x20]);
  *(undefined *)(unaff_s3 + (uint)unaff_s0[0x20]) = 0;
  if (1 < DAT_8009df80) {
    printf("\t(%02x:%02x:%02x) %8d %s\n",(uint)*(byte *)((int)&DAT_800a61f8 + unaff_s1),
           (uint)*(byte *)((int)&DAT_800a61f8 + unaff_s1 + 1),
           (uint)*(byte *)((int)&DAT_800a61f8 + unaff_s1 + 2));
  }
  iVar7 = unaff_s2 + 1;
  pbVar6 = unaff_s0 + *unaff_s0;
  if (((0x3f < iVar7) || (&UNK_800a85f7 < pbVar6)) || (*pbVar6 == 0)) {
    DAT_8009e284 = unaff_s6;
    if (iVar7 < 0x40) {
      (&DAT_800a6200)[iVar7 * 0x18] = 0;
    }
    if (1 < DAT_8009df80) {
      printf("CD_cachefile: %d files found\n",iVar7);
    }
    return 1;
  }
  uVar1 = (uint)(pbVar6 + 5) & 3;
  uVar5 = (uint)(pbVar6 + 2) & 3;
  in_stack_00000018 =
       (*(int *)(pbVar6 + 5 + -uVar1) << (3 - uVar1) * 8 |
       (uint)*pbVar6 & 0xffffffffU >> (uVar1 + 1) * 8) & -1 << (4 - uVar5) * 8 |
       *(uint *)(pbVar6 + 2 + -uVar5) >> uVar5 * 8;
  uVar1 = (int)&stack0x00000018 + 3U & 3;
  puVar2 = (uint *)(((int)&stack0x00000018 + 3U) - uVar1);
  *puVar2 = *puVar2 & -1 << (uVar1 + 1) * 8 | in_stack_00000018 >> (3 - uVar1) * 8;
  CdIntToPos(in_stack_00000018,(CdlLOC *)(unaff_s4 + 0x18));
  uVar3 = unaff_s1 + unaff_s5 + 0x1c;
  uVar1 = (uint)(pbVar6 + 0xd) & 3;
  uVar5 = (uint)(pbVar6 + 10) & 3;
  uVar5 = (*(int *)(pbVar6 + 0xd + -uVar1) << (3 - uVar1) * 8 |
          in_v1 & 0xffffffffU >> (uVar1 + 1) * 8) & -1 << (4 - uVar5) * 8 |
          *(uint *)(pbVar6 + 10 + -uVar5) >> uVar5 * 8;
  uVar1 = uVar3 + 3 & 3;
  puVar2 = (uint *)((uVar3 + 3) - uVar1);
  *puVar2 = *puVar2 & -1 << (uVar1 + 1) * 8 | uVar5 >> (3 - uVar1) * 8;
  uVar1 = uVar3 & 3;
  *(uint *)(uVar3 - uVar1) =
       *(uint *)(uVar3 - uVar1) & 0xffffffffU >> (4 - uVar1) * 8 | uVar5 << uVar1 * 8;
  if (iVar7 == 0) {
    *(undefined2 *)(unaff_s5 + 8) = 0x2e;
    uVar4 = ISO9660_OBJ_810();
    return uVar4;
  }
  if (iVar7 != 1) {
    uVar4 = ISO9660_OBJ_7F4();
    return uVar4;
  }
  *(undefined2 *)(unaff_s5 + 0x20) = 0x2e2e;
  *(undefined *)(unaff_s5 + 0x22) = 0;
  uVar4 = ISO9660_OBJ_810(unaff_s3 + 0x18);
  return uVar4;
}



undefined4 ISO9660_OBJ_810(void)

{
  uint uVar1;
  uint *puVar2;
  uint uVar3;
  undefined4 uVar4;
  uint uVar5;
  uint in_v1;
  byte *unaff_s0;
  byte *pbVar6;
  int unaff_s1;
  int unaff_s2;
  int iVar7;
  int unaff_s3;
  int unaff_s4;
  int unaff_s5;
  undefined4 unaff_s6;
  uint param_7;
  
  if (1 < DAT_8009df80) {
    printf("\t(%02x:%02x:%02x) %8d %s\n",(uint)*(byte *)((int)&DAT_800a61f8 + unaff_s1),
           (uint)*(byte *)((int)&DAT_800a61f8 + unaff_s1 + 1),
           (uint)*(byte *)((int)&DAT_800a61f8 + unaff_s1 + 2));
  }
  iVar7 = unaff_s2 + 1;
  pbVar6 = unaff_s0 + *unaff_s0;
  if (((0x3f < iVar7) || (&UNK_800a85f7 < pbVar6)) || (*pbVar6 == 0)) {
    DAT_8009e284 = unaff_s6;
    if (iVar7 < 0x40) {
      (&DAT_800a6200)[iVar7 * 0x18] = 0;
    }
    if (1 < DAT_8009df80) {
      printf("CD_cachefile: %d files found\n",iVar7);
    }
    return 1;
  }
  uVar1 = (uint)(pbVar6 + 5) & 3;
  uVar5 = (uint)(pbVar6 + 2) & 3;
  param_7 = (*(int *)(pbVar6 + 5 + -uVar1) << (3 - uVar1) * 8 |
            (uint)*pbVar6 & 0xffffffffU >> (uVar1 + 1) * 8) & -1 << (4 - uVar5) * 8 |
            *(uint *)(pbVar6 + 2 + -uVar5) >> uVar5 * 8;
  uVar1 = (int)&stack0x00000018 + 3U & 3;
  puVar2 = (uint *)(((int)&stack0x00000018 + 3U) - uVar1);
  *puVar2 = *puVar2 & -1 << (uVar1 + 1) * 8 | param_7 >> (3 - uVar1) * 8;
  CdIntToPos(param_7,(CdlLOC *)(unaff_s4 + 0x18));
  uVar3 = unaff_s1 + unaff_s5 + 0x1c;
  uVar1 = (uint)(pbVar6 + 0xd) & 3;
  uVar5 = (uint)(pbVar6 + 10) & 3;
  uVar5 = (*(int *)(pbVar6 + 0xd + -uVar1) << (3 - uVar1) * 8 |
          in_v1 & 0xffffffffU >> (uVar1 + 1) * 8) & -1 << (4 - uVar5) * 8 |
          *(uint *)(pbVar6 + 10 + -uVar5) >> uVar5 * 8;
  uVar1 = uVar3 + 3 & 3;
  puVar2 = (uint *)((uVar3 + 3) - uVar1);
  *puVar2 = *puVar2 & -1 << (uVar1 + 1) * 8 | uVar5 >> (3 - uVar1) * 8;
  uVar1 = uVar3 & 3;
  *(uint *)(uVar3 - uVar1) =
       *(uint *)(uVar3 - uVar1) & 0xffffffffU >> (4 - uVar1) * 8 | uVar5 << uVar1 * 8;
  if (iVar7 == 0) {
    *(undefined2 *)(unaff_s5 + 8) = 0x2e;
    uVar4 = ISO9660_OBJ_810();
    return uVar4;
  }
  if (iVar7 != 1) {
    uVar4 = ISO9660_OBJ_7F4();
    return uVar4;
  }
  *(undefined2 *)(unaff_s5 + 0x20) = 0x2e2e;
  *(undefined *)(unaff_s5 + 0x22) = 0;
  uVar4 = ISO9660_OBJ_810(unaff_s3 + 0x18);
  return uVar4;
}



void ISO9660_OBJ_8F4(void)

{
  return;
}



bool cd_read(int param_1,int param_2,u_long *param_3)

{
  int iVar1;
  CdlLOC aCStack_18 [2];
  
  CdIntToPos(param_2,aCStack_18);
  CdControl('\x02',&aCStack_18[0].minute,(u_char *)0x0);
  CdRead(param_1,param_3,0x80);
  iVar1 = CdReadSync(0,(u_char *)0x0);
  return iVar1 == 0;
}



int strncmp(char *param_1,char *param_2,int param_3)

{
  int iVar1;
  
  iVar1 = (*(code *)&LAB_000000a0)();
  return iVar1;
}



void cb_read(char param_1,undefined4 param_2)

{
  int iVar1;
  undefined4 uVar2;
  CdlLOC aCStack_18 [4];
  
  DAT_8009e2c4 = param_2;
  if (param_1 == '\x01') {
    if (0 < DAT_8009e2a4) {
      if (DAT_8009e2a0 == 0x200) {
        if ((DAT_8009e2c0 & 1) != 0) {
          CdDataCallback((func *)0x0);
          CdGetSector2(aCStack_18,3);
          CdDataSync(0);
          CdDataCallback(cb_data);
          CDREAD_OBJ_A4();
          return;
        }
        CdGetSector(aCStack_18,3);
        iVar1 = CdPosToInt(aCStack_18);
        if (iVar1 != DAT_8009e2b0) {
          FUN_80085128("CdRead: sector error\n");
          DAT_8009e2a4 = -1;
        }
      }
      if ((DAT_8009e2c0 & 1) != 0) {
        CdGetSector2(DAT_8009e298,DAT_8009e2a0);
        CDREAD_OBJ_1A4();
        return;
      }
      CdGetSector(DAT_8009e298,DAT_8009e2a0);
      DAT_8009e298 = (void *)((int)DAT_8009e298 + DAT_8009e2a0 * 4);
      DAT_8009e2a4 = DAT_8009e2a4 + -1;
      DAT_8009e2b0 = DAT_8009e2b0 + 1;
      CDREAD_OBJ_1A4();
      return;
    }
  }
  else {
    DAT_8009e2a4 = -1;
  }
  DAT_8009e2a8 = VSync(-1);
  if (DAT_8009e2a4 < 0) {
    cd_read_retry(1);
  }
  iVar1 = VSync(-1);
  if (DAT_8009e2ac + 0x4b0 < iVar1) {
    DAT_8009e2a4 = -1;
  }
  if ((DAT_8009e2a4 == 0) || (iVar1 = VSync(-1), DAT_8009e2ac + 0x4b0 < iVar1)) {
    CdSyncCallback(DAT_8009e2b4);
    CdReadyCallback(DAT_8009e2b8);
    if ((DAT_8009e2c0 & 1) != 0) {
      CdDataCallback(DAT_8009e2bc);
    }
    CdControlF('\t',(u_char *)0x0);
    if (DAT_8009e28c != (code *)0x0) {
      uVar2 = 5;
      if (DAT_8009e2a4 == 0) {
        uVar2 = 2;
      }
      (*DAT_8009e28c)(uVar2,param_2);
    }
  }
  return;
}



void CDREAD_OBJ_A4(void)

{
  int iVar1;
  
  iVar1 = CdPosToInt((CdlLOC *)&stack0x00000010);
  if (iVar1 != DAT_8009e2b0) {
    FUN_80085128("CdRead: sector error\n");
    DAT_8009e2a4 = -1;
  }
  if ((DAT_8009e2c0 & 1) != 0) {
    CdGetSector2(DAT_8009e298,DAT_8009e2a0);
    CDREAD_OBJ_1A4();
    return;
  }
  CdGetSector(DAT_8009e298,DAT_8009e2a0);
  DAT_8009e298 = (void *)((int)DAT_8009e298 + DAT_8009e2a0 * 4);
  DAT_8009e2a4 = DAT_8009e2a4 + -1;
  DAT_8009e2b0 = DAT_8009e2b0 + 1;
  CDREAD_OBJ_1A4();
  return;
}



void CDREAD_OBJ_1A4(void)

{
  int iVar1;
  undefined4 uVar2;
  
  DAT_8009e2a8 = VSync(-1);
  if (DAT_8009e2a4 < 0) {
    cd_read_retry(1);
  }
  iVar1 = VSync(-1);
  if (DAT_8009e2ac + 0x4b0 < iVar1) {
    DAT_8009e2a4 = -1;
  }
  if ((DAT_8009e2a4 == 0) || (iVar1 = VSync(-1), DAT_8009e2ac + 0x4b0 < iVar1)) {
    CdSyncCallback(DAT_8009e2b4);
    CdReadyCallback(DAT_8009e2b8);
    if ((DAT_8009e2c0 & 1) != 0) {
      CdDataCallback(DAT_8009e2bc);
    }
    CdControlF('\t',(u_char *)0x0);
    if (DAT_8009e28c != (code *)0x0) {
      uVar2 = 5;
      if (DAT_8009e2a4 == 0) {
        uVar2 = 2;
      }
      (*DAT_8009e28c)(uVar2);
    }
  }
  return;
}



void cb_data(void)

{
  DAT_8009e298 = DAT_8009e298 + DAT_8009e2a0 * 4;
  DAT_8009e2a4 = DAT_8009e2a4 + -1;
  DAT_8009e2b0 = DAT_8009e2b0 + 1;
  if (DAT_8009e2a4 == 0) {
    CdSyncCallback(DAT_8009e2b4);
    CdReadyCallback(DAT_8009e2b8);
    if ((DAT_8009e2c0 & 1) != 0) {
      CdDataCallback(DAT_8009e2bc);
    }
    CdControlF('\t',(u_char *)0x0);
    if (DAT_8009e28c != (code *)0x0) {
      (*DAT_8009e28c)(2,DAT_8009e2c4);
    }
  }
  return;
}



undefined4 cd_read_retry(int param_1)

{
  uint uVar1;
  undefined4 uVar2;
  CdlLOC *pCVar3;
  int iVar4;
  uint uVar5;
  u_char local_18 [8];
  
  CdSyncCallback((CdlCB)0x0);
  CdReadyCallback((CdlCB)0x0);
  if ((DAT_8009e2c0 & 1) != 0) {
    CdDataCallback((func *)0x0);
  }
  uVar1 = CdStatus();
  if ((uVar1 & 0x10) != 0) {
    uVar1 = VSync(-1);
    if ((uVar1 & 0x3f) == 0) {
      FUN_80085128("CdRead: Shell open...\n");
    }
    CdControlF('\x01',(u_char *)0x0);
    DAT_8009e2ac = VSync(-1);
    DAT_8009e2a4 = 0xffffffff;
    uVar2 = CDREAD_OBJ_5C0();
    return uVar2;
  }
  if (param_1 != 0) {
    FUN_80085128("CdRead: retry...\n");
    CdControl('\t',(u_char *)0x0,(u_char *)0x0);
    pCVar3 = CdLastPos();
    iVar4 = CdControl('\x02',&pCVar3->minute,(u_char *)0x0);
    if (iVar4 == 0) {
      DAT_8009e2a4 = 0xffffffff;
      uVar2 = CDREAD_OBJ_5C0();
      return uVar2;
    }
  }
  CdFlush();
  local_18[0] = (u_char)DAT_8009e29c;
  uVar5 = DAT_8009e29c & 0xff;
  uVar1 = CdMode();
  if (((uVar5 != uVar1) || (param_1 != 0)) &&
     (iVar4 = CdControl('\x0e',local_18,(u_char *)0x0), iVar4 == 0)) {
    DAT_8009e2a4 = 0xffffffff;
    uVar2 = CDREAD_OBJ_5C0();
    return uVar2;
  }
  pCVar3 = CdLastPos();
  DAT_8009e2b0 = CdPosToInt(pCVar3);
  CdReadyCallback(cb_read);
  if ((DAT_8009e2c0 & 1) != 0) {
    CdDataCallback(cb_data);
  }
  DAT_8009e298 = DAT_8009e294;
  CdControlF('\x06',(u_char *)0x0);
  DAT_8009e2a4 = DAT_8009e290;
  DAT_8009e2a8 = VSync(-1);
  return DAT_8009e2a4;
}



undefined4 CDREAD_OBJ_5C0(void)

{
  return DAT_8009e2a4;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void CdReadBreak(void)

{
  if ((DAT_8009e2c0 & 1) != 0) {
    CdDataSync(0);
  }
  DAT_8009e2a4 = 0;
  CdSyncCallback(DAT_8009e2b4);
  CdReadyCallback(DAT_8009e2b8);
  if ((DAT_8009e2c0 & 1) != 0) {
    CdDataCallback(DAT_8009e2bc);
  }
  CdControlF('\t',(u_char *)0x0);
  return;
}



int CdRead(int sectors,u_long *buf,int mode)

{
  undefined4 uVar1;
  int iVar2;
  uint uVar3;
  
  if ((mode & 0x30U) == 0) {
    uVar1 = 0x200;
  }
  else {
    uVar1 = 0x249;
    if ((mode & 0x30U) != 0x20) {
      DAT_8009e29c = mode;
      iVar2 = CDREAD_OBJ_6B8();
      return iVar2;
    }
  }
  DAT_8009e29c = mode | 0x20;
  DAT_8009e290 = sectors;
  DAT_8009e294 = buf;
  DAT_8009e2a0 = uVar1;
  DAT_8009e2b4 = CdSyncCallback((CdlCB)0x0);
  DAT_8009e2b8 = CdReadyCallback((CdlCB)0x0);
  if ((DAT_8009e2c0 & 1) != 0) {
    DAT_8009e2bc = CdDataCallback((func *)0x0);
  }
  DAT_8009e2ac = VSync(-1);
  uVar3 = CdStatus();
  if ((uVar3 & 0xe0) != 0) {
    CdControlB('\t',(u_char *)0x0,(u_char *)0x0);
  }
  iVar2 = cd_read_retry(0);
  return (uint)(0 < iVar2);
}



bool CDREAD_OBJ_6B8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)

{
  undefined4 in_v0;
  uint uVar1;
  int iVar2;
  
  DAT_8009e29c = DAT_8009e29c | 0x20;
  DAT_8009e290 = param_4;
  DAT_8009e294 = param_2;
  DAT_8009e2a0 = in_v0;
  DAT_8009e2b4 = CdSyncCallback((CdlCB)0x0);
  DAT_8009e2b8 = CdReadyCallback((CdlCB)0x0);
  if ((DAT_8009e2c0 & 1) != 0) {
    DAT_8009e2bc = CdDataCallback((func *)0x0);
  }
  DAT_8009e2ac = VSync(-1);
  uVar1 = CdStatus();
  if ((uVar1 & 0xe0) != 0) {
    CdControlB('\t',(u_char *)0x0,(u_char *)0x0);
  }
  iVar2 = cd_read_retry(0);
  return 0 < iVar2;
}



int CdReadSync(int mode,u_char *result)

{
  int iVar1;
  int iVar2;
  
  while( true ) {
    iVar1 = VSync(-1);
    iVar2 = -1;
    if ((iVar1 <= DAT_8009e2ac + 0x4b0) &&
       ((DAT_8009e2a4 < 0 || (iVar1 = VSync(-1), iVar2 = DAT_8009e2a4, DAT_8009e2a8 + 0x3c < iVar1))
       )) break;
    if ((mode != 0) || (iVar2 < 1)) {
      CdReady(1,result);
      return iVar2;
    }
  }
  cd_read_retry(1);
  iVar2 = CDREAD_OBJ_810();
  return iVar2;
}



int CDREAD_OBJ_810(void)

{
  int iVar1;
  int unaff_s0;
  int *unaff_s1;
  int unaff_s2;
  u_char *unaff_s3;
  
  while( true ) {
    do {
      if ((unaff_s2 != 0) || (unaff_s0 < 1)) {
        CdReady(1,unaff_s3);
        return unaff_s0;
      }
      iVar1 = VSync(-1);
      unaff_s0 = -1;
    } while (*unaff_s1 + 0x4b0 < iVar1);
    if ((unaff_s1[-2] < 0) || (iVar1 = VSync(-1), unaff_s1[-1] + 0x3c < iVar1)) break;
    unaff_s0 = unaff_s1[-2];
  }
  cd_read_retry(1);
  iVar1 = CDREAD_OBJ_810();
  return iVar1;
}



CdlCB CdReadCallback(CdlCB func)

{
  CdlCB pCVar1;
  
  pCVar1 = DAT_8009e28c;
  DAT_8009e28c = func;
  return pCVar1;
}



int CdReadMode(int mode)

{
  int iVar1;
  
  iVar1 = DAT_8009e2c0;
  DAT_8009e2c0 = mode;
  return iVar1;
}



int CdRead2(long mode)

{
  int iVar1;
  u_char local_10 [8];
  
  local_10[0] = (u_char)mode;
  CdControl('\x0e',local_10,(u_char *)0x0);
  if ((mode & 0x100U) != 0) {
    if ((mode & 0x20U) != 0) {
      DAT_800acbd4 = 0;
      iVar1 = CDREAD2_OBJ_50();
      return iVar1;
    }
    DAT_800acbd4 = 1;
    CdDataCallback(data_ready_callback);
    CdReadyCallback(StCdInterrupt2);
  }
  iVar1 = CdControl('\x1b',(u_char *)0x0,(u_char *)0x0);
  return iVar1;
}



void CDREAD2_OBJ_50(void)

{
  CdDataCallback(data_ready_callback);
  CdReadyCallback(StCdInterrupt2);
  CdControl('\x1b',(u_char *)0x0,(u_char *)0x0);
  return;
}



// Possible SSNOFF.OBJ/SsSetNoiseOff
// Possible SSQUIT.OBJ/SsQuit
// Possible _OP_VDEL.OBJ/__builtin_vec_delete
// Possible _OP_VNEW.OBJ/__builtin_vec_new
// Possible GS_106.OBJ/GsSetProjection
// Possible SEND.OBJ/SendPAD

void StCdInterrupt2(void)

{
  StCdInterrupt();
  return;
}



int CdReadFile(char *file,u_long *addr,int nbyte)

{
  byte bVar1;
  CdlFILE *pCVar2;
  int iVar3;
  int iVar4;
  char acStack_6a [82];
  
  if (file != (char *)0x0) {
    strcpy(acStack_6a + 2,file);
    iVar3 = 0;
    while (acStack_6a[2] != '\0') {
      bVar1 = acStack_6a[iVar3 + 2];
      if (bVar1 - 0x61 < 0x1a) {
        acStack_6a[iVar3 + 2] = bVar1 - 0x20;
      }
      acStack_6a[2] = acStack_6a[iVar3 + 3];
      iVar3 = iVar3 + 1;
    }
    if (acStack_6a[iVar3] != ';') {
      strcat(acStack_6a + 2,";1");
    }
    pCVar2 = CdSearchFile((CdlFILE *)&DAT_800a85f8,acStack_6a + 2);
    if (pCVar2 == (CdlFILE *)0x0) {
      return 0;
    }
  }
  if ((nbyte == 0) || (DAT_800a85fc < (uint)nbyte)) {
    nbyte = DAT_800a85fc;
  }
  iVar3 = CdControl('\x02',&DAT_800a85f8,(u_char *)0x0);
  iVar4 = nbyte + 0x7ff;
  if (iVar3 != 0) {
    if (iVar4 < 0) {
      iVar4 = nbyte + 0xffe;
    }
    iVar4 = iVar4 >> 0xb;
    iVar3 = CdRead(iVar4,addr,0x80);
    if (iVar3 != 0) {
      iVar3 = CdPosToInt((CdlLOC *)&DAT_800a85f8);
      CdIntToPos(iVar3 + iVar4,(CdlLOC *)&DAT_800a85f8);
      DAT_800a85fc = DAT_800a85fc - iVar4;
      iVar3 = CDREADE_OBJ_168();
      return iVar3;
    }
  }
  return 0;
}



void CDREADE_OBJ_168(void)

{
  return;
}



EXEC * CdReadExec(char *file)

{
  u_long **ppuVar1;
  int iVar2;
  EXEC *pEVar3;
  u_long *puVar4;
  u_long *puVar5;
  u_long *puVar6;
  u_long **ppuVar7;
  u_long **ppuVar8;
  u_long **ppuVar9;
  u_long auStack_808 [4];
  u_long *local_7f8 [508];
  
  iVar2 = CdReadFile(file,auStack_808,0x800);
  if (iVar2 != 0) {
    iVar2 = CdReadSync(0,(u_char *)0x0);
    if (iVar2 != 0) {
      return (EXEC *)0x0;
    }
    iVar2 = CdReadFile((char *)0x0,local_7f8[2],0);
    if (iVar2 != 0) {
      iVar2 = CdReadSync(0,(u_char *)0x0);
      if (iVar2 == 0) {
        ppuVar8 = local_7f8;
        ppuVar1 = (u_long **)&DAT_800a8610;
        do {
          ppuVar9 = ppuVar1;
          ppuVar7 = ppuVar8;
          puVar4 = ppuVar7[1];
          puVar5 = ppuVar7[2];
          puVar6 = ppuVar7[3];
          *ppuVar9 = *ppuVar7;
          ppuVar9[1] = puVar4;
          ppuVar9[2] = puVar5;
          ppuVar9[3] = puVar6;
          ppuVar8 = ppuVar7 + 4;
          ppuVar1 = ppuVar9 + 4;
        } while (ppuVar8 != local_7f8 + 0xc);
        puVar4 = ppuVar7[5];
        puVar5 = ppuVar7[6];
        ppuVar9[4] = *ppuVar8;
        ppuVar9[5] = puVar4;
        ppuVar9[6] = puVar5;
        DAT_800a8630 = 0;
        DAT_800a8634 = 0;
        return (EXEC *)&DAT_800a8610;
      }
    }
  }
  pEVar3 = (EXEC *)CDREADE_OBJ_24C();
  return pEVar3;
}



void CDREADE_OBJ_24C(void)

{
  return;
}



char * strcat(char *param_1,char *param_2)

{
  char *pcVar1;
  
  pcVar1 = (char *)(*(code *)&LAB_000000a0)();
  return pcVar1;
}



char * strcpy(char *param_1,char *param_2)

{
  char *pcVar1;
  
  pcVar1 = (char *)(*(code *)&LAB_000000a0)();
  return pcVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void StClearRing(void)

{
  DAT_800ae42c = 0;
  DAT_800ae424 = 0;
  DAT_800ae420 = 0;
  DAT_800acc0c = 0;
  init_ring_status(0,DAT_800ae444);
  DAT_800acbe0 = 0;
  DAT_800acbcc = 0;
  DAT_800acbc8 = 0;
  return;
}



// Possible C_003.OBJ/StUnSetRing

void FUN_800866e8(void)

{
  FUN_8008676c();
  if (DAT_8009df98 == 1) {
    DsDataCallback((func *)0x0);
    DsReadyCallback((DslCB)0x0);
  }
  else {
    CdDataCallback((func *)0x0);
    CdReadyCallback((CdlCB)0x0);
  }
  *PTR_CDROM_REG0_8009e2d8 = 0;
  *PTR_CDROM_REG3_8009e2e4 = 0;
  FUN_8008677c();
  return;
}



// Possible A36.OBJ/EnterCriticalSection

void FUN_8008676c(void)

{
  syscall(0);
  return;
}



// Possible A37.OBJ/ExitCriticalSection

void FUN_8008677c(void)

{
  syscall(0);
  return;
}



void data_ready_callback(void)

{
  uint uVar1;
  uint uVar2;
  undefined2 *puVar3;
  
  puVar3 = (undefined2 *)(pointer_to_80116450_ + DAT_800ae424 * 0x20);
  *puVar3 = 2;
  uVar1 = (int)puVar3 + 0x1fU & 3;
  uVar2 = (uint)(puVar3 + 0xe) & 3;
  DAT_800a8650 = (*(int *)(((int)puVar3 + 0x1fU) - uVar1) << (3 - uVar1) * 8 |
                 0xffffffffU >> (uVar1 + 1) * 8 & 2) & -1 << (4 - uVar2) * 8 |
                 *(uint *)((int)(puVar3 + 0xe) - uVar2) >> uVar2 * 8;
  DAT_800a8654 = *(undefined4 *)(puVar3 + 4);
  DAT_800ae424 = DAT_800ae420;
  if (DAT_800acbd8 != (code *)0x0) {
    (*DAT_800acbd8)();
  }
  DAT_800acc0c = 0;
  return;
}



int StGetBackloc(CdlLOC *loc)

{
  int iVar1;
  
  if (DAT_800acbd4 == 0) {
    iVar1 = CdPosToInt((CdlLOC *)&DAT_800a8650);
    CdIntToPos(iVar1 + 1,loc);
    iVar1 = C_004_OBJ_DC();
    return iVar1;
  }
  return -1;
}



void C_004_OBJ_DC(void)

{
  return;
}



void StSetStream(u_long mode,u_long start_frame,u_long end_frame,func1 *func1,func2 *func2)

{
  FUN_80086abc(1);
  DAT_800ae430 = 0;
  DAT_800acbd8 = func1;
  DAT_800acbd0 = mode & 1;
  DAT_800acc04 = 0;
  DAT_800acbfc = 0;
  DAT_800acbcc = 0;
  DAT_800acbc8 = 0;
  DAT_800acbdc = func2;
  return;
}



u_long StFreeRing(u_long *base)

{
  int iVar1;
  u_long uVar2;
  int iVar3;
  int iVar4;
  short *psVar5;
  int iVar6;
  
  iVar1 = ((int)base - (pointer_to_80116450_ + DAT_800ae444 * 0x20) >> 2) / 0x1f8;
  psVar5 = (short *)(pointer_to_80116450_ + iVar1 * 0x20);
  if (*psVar5 == 4) {
    iVar3 = (int)psVar5[3];
    iVar6 = 0;
    if (0 < iVar3) {
      do {
        iVar4 = iVar6 + iVar1;
        iVar6 = iVar6 + 1;
        *(undefined2 *)(pointer_to_80116450_ + iVar4 * 0x20) = 0;
      } while (iVar6 < iVar3);
    }
    DAT_800ae42c = iVar6 + iVar1;
    return 0;
  }
  uVar2 = C_007_OBJ_AC();
  return uVar2;
}



void C_007_OBJ_AC(void)

{
  return;
}



void init_ring_status(int param_1,uint param_2)

{
  int iVar1;
  uint uVar2;
  
  uVar2 = 0;
  if (param_2 != 0) {
    do {
      iVar1 = uVar2 + param_1;
      uVar2 = uVar2 + 1;
      *(undefined4 *)(pointer_to_80116450_ + iVar1 * 0x20) = 0;
    } while (uVar2 < param_2);
  }
  return;
}



u_long StGetNext(u_long **addr,u_long **header)

{
  short sVar1;
  u_long *puVar2;
  
  puVar2 = (u_long *)(pointer_to_80116450_ + DAT_800ae42c * 0x20);
  if (*(short *)puVar2 == 1) {
    DAT_800ae42c = 0;
    if (DAT_800ae434 != 0) {
      *(short *)puVar2 = 0;
    }
    puVar2 = (u_long *)(pointer_to_80116450_ + DAT_800ae42c * 0x20);
  }
  sVar1 = *(short *)puVar2;
  if (sVar1 == 2) {
    *(short *)puVar2 = 4;
    *addr = (u_long *)(pointer_to_80116450_ + DAT_800ae444 * 0x20 + DAT_800ae42c * 0x7e0);
    *header = puVar2;
  }
  return (uint)(sVar1 != 2);
}



// Possible C_010.OBJ/StSetMask

void FUN_80086abc(undefined4 param_1,undefined4 param_2,undefined4 param_3)

{
  DAT_800ae438 = param_1;
  DAT_800acc00 = param_2;
  DAT_800ae434 = param_3;
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

void StCdInterrupt(void)

{
  int iVar1;
  undefined4 uVar2;
  uint *puVar3;
  uint uVar4;
  undefined4 *puVar5;
  uint local_18;
  uint uStack_14;
  byte local_10 [8];
  
  if (DAT_800acc0c != 1) {
    if ((DAT_800acbd0 != 0) && ((*(uint *)PTR_DMA_MDEC_OUT_CHCR_8009e368 & 0x1000000) != 0)) {
      DAT_800acbe0 = 1;
      if (DAT_800ae430 != 0) {
        DAT_800acc18 = DAT_800acc18 + 1;
      }
      DAT_8009e390 = 1;
      C_011_OBJ_960();
      return;
    }
    iVar1 = CdReady(1,local_10);
    if (iVar1 != 5) {
      if ((local_10[0] & 4) != 0) {
        DAT_8009e390 = 3;
        C_011_OBJ_960();
        return;
      }
      DAT_800a8658 = pointer_to_80116450_ + DAT_800ae420 * 8;
      if (*(short *)DAT_800a8658 != 0) {
        if (DAT_800ae430 != 0) {
          DAT_800acc18 = DAT_800acc18 + 1;
        }
        DAT_8009e390 = 4;
        C_011_OBJ_960();
        return;
      }
      *PTR_CDROM_REG0_8009e348 = 0;
      *PTR_CDROM_REG3_8009e354 = 0;
      *PTR_CDROM_REG0_8009e348 = 0;
      *PTR_CDROM_REG3_8009e354 = 0x80;
      *(undefined4 *)PTR_CDROM_DELAY_8009e358 = 0x20943;
      *(undefined4 *)PTR_COMMON_DELAY_8009e35c = 0x1323;
      if (DAT_800acbd4 == 0) {
        puVar3 = &local_18;
        do {
          *(undefined *)puVar3 = *PTR_CDROM_REG2_8009e350;
          puVar3 = (uint *)((int)puVar3 + 1);
        } while (puVar3 < &uStack_14);
        uVar4 = 0;
        do {
          uVar4 = uVar4 + 1;
        } while (uVar4 < 8);
      }
      if (DAT_800ae430 != 0) {
        mem2mem(DAT_800a8658,DAT_800ae430 + DAT_800acc18 * 0x800,8,0);
        C_011_OBJ_270();
        return;
      }
      dma_execute(3,DAT_800a8658,0,8,0x11000000,0,0);
      puVar5 = DAT_800a8658;
      uVar4 = *(uint *)PTR_DMA_CDROM_CHCR_8009e378;
      while ((uVar4 & 0x1000000) != 0) {
        uVar4 = *(uint *)PTR_DMA_CDROM_CHCR_8009e378;
      }
      uVar4 = (int)DAT_800a8658 + 0x1fU & 3;
      puVar3 = (uint *)(((int)DAT_800a8658 + 0x1fU) - uVar4);
      *puVar3 = *puVar3 & -1 << (uVar4 + 1) * 8 | local_18 >> (3 - uVar4) * 8;
      uVar4 = (uint)(puVar5 + 7) & 3;
      puVar3 = (uint *)((int)(puVar5 + 7) - uVar4);
      *puVar3 = *puVar3 & 0xffffffffU >> (4 - uVar4) * 8 | local_18 << uVar4 * 8;
      *(undefined4 *)PTR_CDROM_DELAY_8009e358 = 0x20843;
      *(undefined4 *)PTR_COMMON_DELAY_8009e35c = 0x1325;
      if ((DAT_800ae438 == 1) && (DAT_800acc00 != 0)) {
        if (DAT_800acc00 != *(ushort *)(DAT_800a8658 + 2)) {
          *(short *)DAT_800a8658 = 0;
          if (DAT_800ae430 == 0) {
            return;
          }
          DAT_800acc18 = DAT_800acc18 + 1;
          C_011_OBJ_960();
          return;
        }
        DAT_800ae438 = 0;
      }
      if ((*(short *)DAT_800a8658 != 0x160) ||
         ((*(ushort *)((int)DAT_800a8658 + 2) >> 10 & 0x1f) != DAT_800acc04)) {
        if (DAT_800ae430 == 0) {
          DAT_8009e390 = 5;
          *(short *)DAT_800a8658 = 0;
          C_011_OBJ_960();
          return;
        }
        DAT_800acc18 = 0;
        C_011_OBJ_3D0();
        return;
      }
      if (((int)DAT_800acbcc != (uint)*(ushort *)(DAT_800a8658 + 1)) ||
         ((DAT_800acbc8 != 0 && (DAT_800acbc8 != *(ushort *)(DAT_800a8658 + 2))))) {
        DAT_800acbc8 = 0;
        DAT_800acbcc = 0;
        init_ring_status(DAT_800ae424,DAT_800ae420 - DAT_800ae424);
        DAT_800ae420 = DAT_800ae424;
        *(short *)DAT_800a8658 = 0;
        if (DAT_800ae430 != 0) {
          DAT_800acc18 = DAT_800acc18 + 1;
        }
        DAT_8009e390 = 6;
        C_011_OBJ_960();
        return;
      }
      if (*(short *)(DAT_800a8658 + 1) == 0) {
        DAT_800acbc8 = (uint)*(ushort *)(DAT_800a8658 + 2);
        DAT_800acbcc = 0;
        if ((DAT_800ae434 != 0) && (DAT_800ae434 <= DAT_800acbc8)) {
          DAT_800acbc8 = 0;
          DAT_800acbcc = 0;
          init_ring_status(DAT_800ae424,DAT_800ae420 - DAT_800ae424);
          DAT_800ae420 = DAT_800ae424;
          *(short *)DAT_800a8658 = 0;
          DAT_800ae438 = 1;
          if (DAT_800acbdc != (code *)0x0) {
            (*DAT_800acbdc)();
          }
          if (DAT_800ae430 != 0) {
            DAT_800acc18 = DAT_800acc18 + 1;
          }
          DAT_8009e390 = 7;
          C_011_OBJ_960();
          return;
        }
        if ((DAT_800ae444 - DAT_800ae420) - 1U < (uint)*(ushort *)((int)DAT_800a8658 + 6)) {
          if (DAT_800ae434 == 0) {
            *(short *)DAT_800a8658 = 1;
            DAT_800ae438 = 1;
            if (DAT_800acbdc != (code *)0x0) {
              (*DAT_800acbdc)();
            }
            if (DAT_800ae430 != 0) {
              DAT_800acc18 = DAT_800acc18 + 1;
            }
            DAT_8009e390 = 8;
            C_011_OBJ_960();
            return;
          }
          if (*(short *)pointer_to_80116450_ != 0) {
            *(short *)DAT_800a8658 = 0;
            if (DAT_800ae430 != 0) {
              DAT_800acc18 = DAT_800acc18 + 1;
            }
            DAT_8009e390 = 9;
            C_011_OBJ_960();
            return;
          }
          *(short *)DAT_800a8658 = 1;
          uVar4 = 0;
          DAT_800ae420 = 0;
          puVar5 = pointer_to_80116450_;
          do {
            uVar2 = *DAT_800a8658;
            DAT_800a8658 = DAT_800a8658 + 1;
            uVar4 = uVar4 + 1;
            *puVar5 = uVar2;
            puVar5 = puVar5 + 1;
          } while (uVar4 < 8);
          DAT_800a8658 = pointer_to_80116450_;
        }
        DAT_800ae424 = DAT_800ae420;
      }
      DAT_8009e390 = 10;
      DAT_800acbcc = DAT_800acbcc + 1;
      DAT_800ae43c = pointer_to_80116450_ + DAT_800ae444 * 8 + DAT_800ae420 * 0x1f8;
      if (DAT_800acbd0 != 0) {
        *(undefined4 *)PTR_CDROM_DELAY_8009e358 = 0x20943;
        *(undefined4 *)PTR_COMMON_DELAY_8009e35c = 0x1323;
        C_011_OBJ_7BC();
        return;
      }
      *(undefined4 *)PTR_CDROM_DELAY_8009e358 = 0x21020843;
      if (*(ushort *)((int)DAT_800a8658 + 6) - 1 == (uint)*(ushort *)(DAT_800a8658 + 1)) {
        DAT_800acc0c = 1;
        if (DAT_800ae430 == 0) {
          dma_execute(3,DAT_800ae43c,0,0x1f8,0x11400100,1,0);
          DAT_800acbcc = 0;
          DAT_800acbc8 = 0;
          DAT_800acc04 = DAT_800acbfc;
          C_011_OBJ_900();
          return;
        }
        mem2mem(DAT_800ae43c,DAT_800ae430 + DAT_800acc18 * 0x800 + 0x20,0x1f8,1);
        DAT_800acc18 = DAT_800acc18 + 1;
        C_011_OBJ_85C();
        return;
      }
      if (DAT_800ae430 != 0) {
        mem2mem(DAT_800ae43c,DAT_800ae430 + DAT_800acc18 * 0x800 + 0x20,0x1f8,0);
        DAT_800acc18 = DAT_800acc18 + 1;
        C_011_OBJ_900();
        return;
      }
      dma_execute(3,DAT_800ae43c,0,0x1f8,0x11400100,0,0);
      *(undefined4 *)PTR_COMMON_DELAY_8009e35c = 0x1325;
      *(short *)DAT_800a8658 = 3;
      DAT_800ae420 = DAT_800ae420 + 1;
      if ((DAT_800ae430 != 0) && (DAT_800acc0c != 0)) {
        data_ready_callback();
      }
    }
  }
  return;
}



void C_011_OBJ_270(void)

{
  uint *puVar1;
  uint uVar2;
  undefined4 uVar3;
  undefined4 *puVar4;
  uint in_stack_00000028;
  
  puVar4 = DAT_800a8658;
  uVar2 = *(uint *)PTR_DMA_CDROM_CHCR_8009e378;
  while ((uVar2 & 0x1000000) != 0) {
    uVar2 = *(uint *)PTR_DMA_CDROM_CHCR_8009e378;
  }
  uVar2 = (int)DAT_800a8658 + 0x1fU & 3;
  puVar1 = (uint *)(((int)DAT_800a8658 + 0x1fU) - uVar2);
  *puVar1 = *puVar1 & -1 << (uVar2 + 1) * 8 | in_stack_00000028 >> (3 - uVar2) * 8;
  uVar2 = (uint)(puVar4 + 7) & 3;
  puVar1 = (uint *)((int)(puVar4 + 7) - uVar2);
  *puVar1 = *puVar1 & 0xffffffffU >> (4 - uVar2) * 8 | in_stack_00000028 << uVar2 * 8;
  *(undefined4 *)PTR_CDROM_DELAY_8009e358 = 0x20843;
  *(undefined4 *)PTR_COMMON_DELAY_8009e35c = 0x1325;
  if ((DAT_800ae438 == 1) && (DAT_800acc00 != 0)) {
    if (DAT_800acc00 != *(ushort *)(DAT_800a8658 + 2)) {
      *(short *)DAT_800a8658 = 0;
      if (DAT_800ae430 == 0) {
        return;
      }
      DAT_800acc18 = DAT_800acc18 + 1;
      C_011_OBJ_960();
      return;
    }
    DAT_800ae438 = 0;
  }
  if ((*(short *)DAT_800a8658 != 0x160) ||
     ((*(ushort *)((int)DAT_800a8658 + 2) >> 10 & 0x1f) != DAT_800acc04)) {
    if (DAT_800ae430 == 0) {
      DAT_8009e390 = 5;
      *(short *)DAT_800a8658 = 0;
      C_011_OBJ_960();
      return;
    }
    DAT_800acc18 = 0;
    C_011_OBJ_3D0();
    return;
  }
  if (((int)DAT_800acbcc != (uint)*(ushort *)(DAT_800a8658 + 1)) ||
     ((DAT_800acbc8 != 0 && (DAT_800acbc8 != *(ushort *)(DAT_800a8658 + 2))))) {
    DAT_800acbc8 = 0;
    DAT_800acbcc = 0;
    init_ring_status(DAT_800ae424,DAT_800ae420 - DAT_800ae424);
    DAT_800ae420 = DAT_800ae424;
    *(short *)DAT_800a8658 = 0;
    if (DAT_800ae430 != 0) {
      DAT_800acc18 = DAT_800acc18 + 1;
    }
    DAT_8009e390 = 6;
    C_011_OBJ_960();
    return;
  }
  if (*(short *)(DAT_800a8658 + 1) == 0) {
    DAT_800acbc8 = (uint)*(ushort *)(DAT_800a8658 + 2);
    DAT_800acbcc = 0;
    if ((DAT_800ae434 != 0) && (DAT_800ae434 <= DAT_800acbc8)) {
      DAT_800acbc8 = 0;
      DAT_800acbcc = 0;
      init_ring_status(DAT_800ae424,DAT_800ae420 - DAT_800ae424);
      DAT_800ae420 = DAT_800ae424;
      *(short *)DAT_800a8658 = 0;
      DAT_800ae438 = 1;
      if (DAT_800acbdc != (code *)0x0) {
        (*DAT_800acbdc)();
      }
      if (DAT_800ae430 != 0) {
        DAT_800acc18 = DAT_800acc18 + 1;
      }
      DAT_8009e390 = 7;
      C_011_OBJ_960();
      return;
    }
    if ((DAT_800ae444 - DAT_800ae420) - 1U < (uint)*(ushort *)((int)DAT_800a8658 + 6)) {
      if (DAT_800ae434 == 0) {
        *(short *)DAT_800a8658 = 1;
        DAT_800ae438 = 1;
        if (DAT_800acbdc != (code *)0x0) {
          (*DAT_800acbdc)();
        }
        if (DAT_800ae430 != 0) {
          DAT_800acc18 = DAT_800acc18 + 1;
        }
        DAT_8009e390 = 8;
        C_011_OBJ_960();
        return;
      }
      if (*(short *)pointer_to_80116450_ != 0) {
        *(short *)DAT_800a8658 = 0;
        if (DAT_800ae430 != 0) {
          DAT_800acc18 = DAT_800acc18 + 1;
        }
        DAT_8009e390 = 9;
        C_011_OBJ_960();
        return;
      }
      *(short *)DAT_800a8658 = 1;
      uVar2 = 0;
      DAT_800ae420 = 0;
      puVar4 = pointer_to_80116450_;
      do {
        uVar3 = *DAT_800a8658;
        DAT_800a8658 = DAT_800a8658 + 1;
        uVar2 = uVar2 + 1;
        *puVar4 = uVar3;
        puVar4 = puVar4 + 1;
      } while (uVar2 < 8);
      DAT_800a8658 = pointer_to_80116450_;
    }
    DAT_800ae424 = DAT_800ae420;
  }
  DAT_8009e390 = 10;
  DAT_800acbcc = DAT_800acbcc + 1;
  DAT_800ae43c = pointer_to_80116450_ + DAT_800ae444 * 8 + DAT_800ae420 * 0x1f8;
  if (DAT_800acbd0 != 0) {
    *(undefined4 *)PTR_CDROM_DELAY_8009e358 = 0x20943;
    *(undefined4 *)PTR_COMMON_DELAY_8009e35c = 0x1323;
    C_011_OBJ_7BC();
    return;
  }
  *(undefined4 *)PTR_CDROM_DELAY_8009e358 = 0x21020843;
  if (*(ushort *)((int)DAT_800a8658 + 6) - 1 != (uint)*(ushort *)(DAT_800a8658 + 1)) {
    if (DAT_800ae430 == 0) {
      dma_execute(3,DAT_800ae43c,0,0x1f8);
      *(undefined4 *)PTR_COMMON_DELAY_8009e35c = 0x1325;
      *(short *)DAT_800a8658 = 3;
      DAT_800ae420 = DAT_800ae420 + 1;
      if ((DAT_800ae430 != 0) && (DAT_800acc0c != 0)) {
        data_ready_callback();
      }
      return;
    }
    mem2mem(DAT_800ae43c,DAT_800ae430 + DAT_800acc18 * 0x800 + 0x20,0x1f8,0);
    DAT_800acc18 = DAT_800acc18 + 1;
    C_011_OBJ_900();
    return;
  }
  DAT_800acc0c = 1;
  if (DAT_800ae430 == 0) {
    dma_execute(3,DAT_800ae43c,0,0x1f8);
    DAT_800acbcc = 0;
    DAT_800acbc8 = 0;
    DAT_800acc04 = DAT_800acbfc;
    C_011_OBJ_900();
    return;
  }
  mem2mem(DAT_800ae43c,DAT_800ae430 + DAT_800acc18 * 0x800 + 0x20,0x1f8,1);
  DAT_800acc18 = DAT_800acc18 + 1;
  C_011_OBJ_85C();
  return;
}



void C_011_OBJ_3D0(void)

{
  DAT_8009e390 = 5;
  *DAT_800a8658 = 0;
  C_011_OBJ_960();
  return;
}



void C_011_OBJ_7BC(void)

{
  if ((ushort)DAT_800a8658[3] - 1 != (uint)(ushort)DAT_800a8658[2]) {
    if (DAT_800ae430 != 0) {
      mem2mem(DAT_800ae43c,DAT_800ae430 + DAT_800acc18 * 0x800 + 0x20,0x1f8,0);
      DAT_800acc18 = DAT_800acc18 + 1;
      C_011_OBJ_900();
      return;
    }
    dma_execute(3,DAT_800ae43c,0,0x1f8);
    *(undefined4 *)PTR_COMMON_DELAY_8009e35c = 0x1325;
    *DAT_800a8658 = 3;
    DAT_800ae420 = DAT_800ae420 + 1;
    if ((DAT_800ae430 != 0) && (DAT_800acc0c != 0)) {
      data_ready_callback();
    }
    return;
  }
  DAT_800acc0c = 1;
  if (DAT_800ae430 != 0) {
    mem2mem(DAT_800ae43c,DAT_800ae430 + DAT_800acc18 * 0x800 + 0x20,0x1f8,1);
    DAT_800acc18 = DAT_800acc18 + 1;
    C_011_OBJ_85C();
    return;
  }
  dma_execute(3,DAT_800ae43c,0,0x1f8);
  DAT_800acbcc = 0;
  DAT_800acbc8 = 0;
  DAT_800acc04 = DAT_800acbfc;
  C_011_OBJ_900();
  return;
}



void C_011_OBJ_85C(void)

{
  DAT_800acbcc = 0;
  DAT_800acbc8 = 0;
  DAT_800acc04 = DAT_800acbfc;
  C_011_OBJ_900();
  return;
}



void C_011_OBJ_900(void)

{
  *(undefined4 *)PTR_COMMON_DELAY_8009e35c = 0x1325;
  *DAT_800a8658 = 3;
  DAT_800ae420 = DAT_800ae420 + 1;
  if ((DAT_800ae430 != 0) && (DAT_800acc0c != 0)) {
    data_ready_callback();
  }
  return;
}



void C_011_OBJ_960(void)

{
  return;
}



void mem2mem(undefined4 *param_1,undefined4 *param_2,uint param_3)

{
  undefined4 uVar1;
  uint uVar2;
  
  uVar2 = 0;
  if (param_3 != 0) {
    do {
      uVar1 = *param_2;
      param_2 = param_2 + 1;
      uVar2 = uVar2 + 1;
      *param_1 = uVar1;
      param_1 = param_1 + 1;
    } while (uVar2 < param_3);
  }
  return;
}



void dma_execute(uint param_1,dword param_2,int param_3,uint param_4,dword param_5,char param_6)

{
  byte bVar1;
  uint uVar2;
  int iVar3;
  
  iVar3 = 0;
  uVar2 = (&DMA_MDEC_IN_CHCR)[param_1 * 4];
  while ((uVar2 & 0x1000000) != 0) {
    if (iVar3 == 0x10000) {
      printf("DMA STATUS ERROR %x\n",(&DMA_MDEC_IN_CHCR)[param_1 * 4]);
      C_011_OBJ_A30();
      return;
    }
    iVar3 = iVar3 + 1;
    uVar2 = (&DMA_MDEC_IN_CHCR)[param_1 * 4];
  }
  uVar2 = 1 << (param_1 & 0x1f);
  if (param_6 != '\x01') {
    PTR_DMA_DICR_8009e364[2] = PTR_DMA_DICR_8009e364[2] & ~(byte)uVar2;
    *(uint *)PTR_DMA_DPCR_8009e360 = *(uint *)PTR_DMA_DPCR_8009e360 | 1 << (param_1 * 4 + 3 & 0x1f);
    (&DMA_MDEC_IN_MADR)[param_1 * 4] = param_2;
    (&DMA_MDEC_IN_BCR)[param_1 * 4] = param_3 << 0x10 | param_4;
    bVar1 = *PTR_CDROM_REG0_8009e348;
    while ((bVar1 & 0x40) == 0) {
      bVar1 = *PTR_CDROM_REG0_8009e348;
    }
    (&DMA_MDEC_IN_CHCR)[param_1 * 4] = param_5;
    return;
  }
  C_011_OBJ_A90((byte)PTR_DMA_DICR_8009e364[2] | uVar2);
  return;
}



void C_011_OBJ_A30(void)

{
  byte bVar1;
  int in_v0;
  uint uVar2;
  uint unaff_s0;
  dword unaff_s2;
  int unaff_s3;
  uint unaff_s4;
  dword unaff_s5;
  
  uVar2 = 1 << (unaff_s0 & 0x1f);
  if (in_v0 != 1) {
    PTR_DMA_DICR_8009e364[2] = PTR_DMA_DICR_8009e364[2] & ~(byte)uVar2;
    *(uint *)PTR_DMA_DPCR_8009e360 = *(uint *)PTR_DMA_DPCR_8009e360 | 1 << (unaff_s0 * 4 + 3 & 0x1f)
    ;
    (&DMA_MDEC_IN_MADR)[unaff_s0 * 4] = unaff_s2;
    (&DMA_MDEC_IN_BCR)[unaff_s0 * 4] = unaff_s3 << 0x10 | unaff_s4;
    bVar1 = *PTR_CDROM_REG0_8009e348;
    while ((bVar1 & 0x40) == 0) {
      bVar1 = *PTR_CDROM_REG0_8009e348;
    }
    (&DMA_MDEC_IN_CHCR)[unaff_s0 * 4] = unaff_s5;
    return;
  }
  C_011_OBJ_A90((byte)PTR_DMA_DICR_8009e364[2] | uVar2);
  return;
}



void C_011_OBJ_A90(undefined param_1)

{
  byte bVar1;
  int in_v1;
  int unaff_s0;
  dword unaff_s2;
  int unaff_s3;
  uint unaff_s4;
  dword unaff_s5;
  
  *(undefined *)(in_v1 + 2) = param_1;
  *(uint *)PTR_DMA_DPCR_8009e360 = *(uint *)PTR_DMA_DPCR_8009e360 | 1 << (unaff_s0 * 4 + 3U & 0x1f);
  (&DMA_MDEC_IN_MADR)[unaff_s0 * 4] = unaff_s2;
  (&DMA_MDEC_IN_BCR)[unaff_s0 * 4] = unaff_s3 << 0x10 | unaff_s4;
  bVar1 = *PTR_CDROM_REG0_8009e348;
  while ((bVar1 & 0x40) == 0) {
    bVar1 = *PTR_CDROM_REG0_8009e348;
  }
  (&DMA_MDEC_IN_CHCR)[unaff_s0 * 4] = unaff_s5;
  return;
}



DslCB DsSyncCallback(DslCB func)

{
  DslCB pDVar1;
  
  pDVar1 = DAT_800acc10;
  DAT_800acc10 = func;
  return pDVar1;
}



DslCB DsReadyCallback(DslCB func)

{
  DslCB pDVar1;
  
  pDVar1 = DAT_800acc14;
  DAT_800acc14 = func;
  return pDVar1;
}



_func_90 * DsDataCallback(func *func)

{
  _func_90 *p_Var1;
  
  p_Var1 = (_func_90 *)DMACallback(3,func);
  return p_Var1;
}



void PadInit(int mode)

{
  DAT_800a8660 = 0xffffffff;
  DAT_800acc08 = mode;
  ResetCallback();
  PAD_init(0x20000001,&DAT_800a8660);
  ChangeClearPAD(0);
  return;
}



u_long PadRead(int id)

{
  PAD_dr();
  return ~DAT_800a8660;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked
// Possible SSNOFF.OBJ/SsSetNoiseOff
// Possible SSQUIT.OBJ/SsQuit
// Possible _OP_VDEL.OBJ/__builtin_vec_delete
// Possible _OP_VNEW.OBJ/__builtin_vec_new
// Possible GS_106.OBJ/GsSetProjection
// Possible SEND.OBJ/SendPAD

void PadStop(void)

{
  StopPAD();
  return;
}



void PAD_dr(void)

{
  (*(code *)&SUB_000000b0)();
  return;
}



void ChangeClearPAD(void)

{
  (*(code *)&SUB_000000b0)();
  return;
}



// Possible GS_101.OBJ/GsSetNearClip
// Possible GS_102.OBJ/GsSetFarClip
// Possible GS_124.OBJ/GsSetWorkBase

void SetInitPadFlag(undefined4 param_1)

{
  DAT_8009e398 = param_1;
  return;
}



// Possible GS_125.OBJ/GsGetWorkBase

undefined4 ReadInitPadFlag(void)

{
  return DAT_8009e398;
}



void PAD_init(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)

{
  _remove_ChgclrPAD();
  FUN_8008676c();
  _patch_pad();
  FUN_8008677c();
  ChangeClearPAD(0);
  SetPatchPad();
  PAD_init2(param_1,param_2,param_3,param_4);
  _send_pad();
  DAT_8009e398 = 1;
  return;
}



void InitPAD(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)

{
  _remove_ChgclrPAD();
  FUN_8008676c();
  _patch_pad();
  FUN_8008677c();
  ChangeClearPAD(0);
  SetPatchPad();
  InitPAD2(param_1,param_2,param_3,param_4);
  _send_pad();
  DAT_8009e398 = 1;
  return;
}



void StartPAD(void)

{
  StartPAD2();
  ChangeClearPAD(0);
  EnablePAD();
  return;
}



void StopPAD(void)

{
  DisablePAD();
  StopPAD2();
  RemovePatchPad();
  DAT_8009e398 = 0;
  return;
}



undefined4 SetPatchPad(void)

{
  FUN_8008676c();
  DAT_800a866c = _Pad1;
  DAT_800a8670 = _IsVSync;
  DAT_800a8668 = 0;
  DAT_800a8674 = 0;
  SysDeqIntRP(1,&DAT_800a8668);
  SysEnqIntRP(1,&DAT_800a8668);
  FUN_8008677c();
  return 1;
}



undefined4 RemovePatchPad(void)

{
  FUN_8008676c();
  SysDeqIntRP(1,&DAT_800a8668);
  FUN_8008677c();
  return 1;
}



undefined4 _Pad1(void)

{
  int local_10;
  
  *(undefined2 *)(PTR_JOY_MCD_DATA_8009e39c + 10) = 0;
  local_10 = 9;
  do {
    local_10 = local_10 + -1;
  } while (local_10 != -1);
  return 0;
}



undefined4 _IsVSync(void)

{
  undefined4 uVar1;
  
  uVar1 = 0;
  if (((*(uint *)(PTR_I_STAT_8009e3a0 + 4) & 1) != 0) &&
     (uVar1 = 1, (*(uint *)PTR_I_STAT_8009e3a0 & 1) == 0)) {
    uVar1 = 0;
  }
  return uVar1;
}



void InitPAD2(void)

{
  (*(code *)&SUB_000000b0)();
  return;
}



void StartPAD2(void)

{
  (*(code *)&SUB_000000b0)();
  return;
}



void StopPAD2(void)

{
  (*(code *)&SUB_000000b0)();
  return;
}



void PAD_init2(void)

{
  (*(code *)&SUB_000000b0)();
  return;
}



void SysEnqIntRP(void)

{
  (*(code *)&LAB_000000c0)();
  return;
}



void SysDeqIntRP(void)

{
  (*(code *)&LAB_000000c0)();
  return;
}



void EnablePAD(void)

{
                    // WARNING: Could not recover jumptable at 0x80087acc. Too many branches
                    // WARNING: Treating indirect jump as call
  (*DAT_800a6194)();
  return;
}



void DisablePAD(void)

{
                    // WARNING: Could not recover jumptable at 0x80087ae0. Too many branches
                    // WARNING: Treating indirect jump as call
  (*DAT_800a6198)();
  return;
}



void _patch_pad(void)

{
  int iVar1;
  int iVar2;
  undefined4 unaff_retaddr;
  
  DAT_800a618c = unaff_retaddr;
  FUN_8008676c();
  iVar1 = (*(code *)&SUB_000000b0)();
  iVar1 = *(int *)(iVar1 + 0x16c);
  DAT_800a6194 = iVar1 + 0x884;
  DAT_800a6198 = iVar1 + 0x894;
  iVar2 = 0xb;
  do {
    iVar2 = iVar2 + -1;
    *(undefined4 *)(iVar1 + 0x594) = 0;
    iVar1 = iVar1 + 4;
  } while (iVar2 != 0);
  FlushCache();
  return;
}



void FlushCache(void)

{
  (*(code *)&LAB_000000a0)();
  return;
}



void _SendPAD(void)

{
  (*DAT_800a61a0)();
  return;
}



int _send_pad(void)

{
  int iVar1;
  undefined4 uVar2;
  undefined4 *puVar3;
  undefined4 unaff_retaddr;
  
  DAT_800a619c = unaff_retaddr;
  FUN_8008676c();
  iVar1 = (*(code *)&SUB_000000b0)();
  DAT_800a61a0 = *(int *)(iVar1 + 0x16c) + 0x7a0;
  puVar3 = &SENDPAD_OBJ_A4;
  iVar1 = *(int *)(iVar1 + 0x16c);
  do {
    uVar2 = *puVar3;
    puVar3 = puVar3 + 1;
    *(undefined4 *)(iVar1 + 0x3d8) = uVar2;
    *(undefined4 *)(iVar1 + 0x4e0) = uVar2;
    iVar1 = iVar1 + 4;
  } while (puVar3 != (undefined4 *)SENDPAD_OBJ_B4);
  FlushCache();
  FUN_8008677c();
  return DAT_800a61a0;
}



void SENDPAD_OBJ_B4(void)

{
  int iVar1;
  undefined4 *puVar2;
  int iVar3;
  undefined4 unaff_retaddr;
  
  DAT_800a61ac = unaff_retaddr;
  FUN_8008676c();
  iVar1 = (*(code *)&SUB_000000b0)();
  iVar3 = 9;
  puVar2 = (undefined4 *)(*(int *)(iVar1 + 0x16c) + 0x62c);
  do {
    iVar3 = iVar3 + -1;
    *puVar2 = 0;
    puVar2 = puVar2 + 1;
  } while (iVar3 != 0);
  FlushCache();
  FUN_8008677c();
  return;
}



void _remove_ChgclrPAD(void)

{
  int iVar1;
  undefined4 *puVar2;
  int iVar3;
  undefined4 unaff_retaddr;
  
  DAT_800a61ac = unaff_retaddr;
  FUN_8008676c();
  iVar1 = (*(code *)&SUB_000000b0)();
  iVar3 = 9;
  puVar2 = (undefined4 *)(*(int *)(iVar1 + 0x16c) + 0x62c);
  do {
    iVar3 = iVar3 + -1;
    *puVar2 = 0;
    puVar2 = puVar2 + 1;
  } while (iVar3 != 0);
  FlushCache();
  FUN_8008677c();
  return;
}



int VSync(int mode)

{
  uint uVar1;
  int iVar2;
  uint uVar3;
  
  uVar1 = *(int *)PTR_TMR_HRETRACE_VAL_8009e3b0 - DAT_8009e3b4;
  if (mode < 0) {
    iVar2 = VSYNC_OBJ_130();
    return iVar2;
  }
  if (mode != 1) {
    if (0 < mode) {
      iVar2 = VSYNC_OBJ_84();
      return iVar2;
    }
    iVar2 = 0;
    if (0 < mode) {
      iVar2 = mode + -1;
    }
    v_wait(DAT_8009e3b8,iVar2);
    uVar3 = *(uint *)PTR_GPU_REG1_8009e3ac;
    v_wait(DAT_8009f4d0 + 1,1);
    if (((uVar3 & 0x400000) != 0) && (-1 < (int)(uVar3 ^ *(uint *)PTR_GPU_REG1_8009e3ac))) {
      do {
      } while (((uVar3 ^ *(uint *)PTR_GPU_REG1_8009e3ac) & 0x80000000) == 0);
    }
    DAT_8009e3b8 = DAT_8009f4d0;
    DAT_8009e3b4 = *(int *)PTR_TMR_HRETRACE_VAL_8009e3b0;
  }
  return uVar1 & 0xffff;
}



void VSYNC_OBJ_84(void)

{
  uint uVar1;
  
  v_wait();
  uVar1 = *(uint *)PTR_GPU_REG1_8009e3ac;
  v_wait(DAT_8009f4d0 + 1,1);
  if (((uVar1 & 0x400000) != 0) && (-1 < (int)(uVar1 ^ *(uint *)PTR_GPU_REG1_8009e3ac))) {
    do {
    } while (((uVar1 ^ *(uint *)PTR_GPU_REG1_8009e3ac) & 0x80000000) == 0);
  }
  DAT_8009e3b8 = DAT_8009f4d0;
  DAT_8009e3b4 = *(undefined4 *)PTR_TMR_HRETRACE_VAL_8009e3b0;
  return;
}



void VSYNC_OBJ_130(void)

{
  return;
}



void v_wait(int param_1,int param_2)

{
  param_2 = param_2 << 0xf;
  do {
    if (param_1 <= DAT_8009f4d0) {
      return;
    }
    param_2 = param_2 + -1;
  } while (param_2 != -1);
  FUN_80085128("VSync: timeout\n");
  ChangeClearPAD(0);
  ChangeClearRCnt(3,0);
  VSYNC_OBJ_1D4();
  return;
}



void VSYNC_OBJ_1D4(void)

{
  return;
}



void ChangeClearRCnt(void)

{
  (*(code *)&LAB_000000c0)();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int ResetCallback(void)

{
  int iVar1;
  
  iVar1 = (**(code **)(PTR_PTR_s__Id__intr_c_v_1_76_1997_02_12_12_8009f49c + 0xc))();
  return iVar1;
}



void InterruptCallback(void)

{
  (**(code **)(PTR_PTR_s__Id__intr_c_v_1_76_1997_02_12_12_8009f49c + 8))();
  return;
}



void DMACallback(void)

{
  (**(code **)(PTR_PTR_s__Id__intr_c_v_1_76_1997_02_12_12_8009f49c + 4))();
  return;
}



int VSyncCallback(f *f)

{
  int iVar1;
  
  iVar1 = (**(code **)(PTR_PTR_s__Id__intr_c_v_1_76_1997_02_12_12_8009f49c + 0x14))(4,f);
  return iVar1;
}



void VSyncCallbacks(void)

{
  (**(code **)(PTR_PTR_s__Id__intr_c_v_1_76_1997_02_12_12_8009f49c + 0x14))();
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int StopCallback(void)

{
  int iVar1;
  
  iVar1 = (**(code **)(PTR_PTR_s__Id__intr_c_v_1_76_1997_02_12_12_8009f49c + 0x10))();
  return iVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int RestartCallback(void)

{
  int iVar1;
  
  iVar1 = (**(code **)(PTR_PTR_s__Id__intr_c_v_1_76_1997_02_12_12_8009f49c + 0x18))();
  return iVar1;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int CheckCallback(void)

{
  return (uint)DAT_8009e416;
}



undefined2 GetIntrMask(void)

{
  return *(undefined2 *)PTR_I_MASK_8009f4a4;
}



undefined2 SetIntrMask(undefined2 param_1)

{
  undefined2 uVar1;
  
  uVar1 = *(undefined2 *)PTR_I_MASK_8009f4a4;
  *(undefined2 *)PTR_I_MASK_8009f4a4 = param_1;
  return uVar1;
}



undefined2 * startIntr(void)

{
  undefined *puVar1;
  undefined *puVar2;
  undefined2 *puVar3;
  int iVar4;
  undefined4 uVar5;
  
  puVar2 = PTR_I_MASK_8009f4a4;
  puVar1 = PTR_I_STAT_8009f4a0;
  puVar3 = (undefined2 *)0x0;
  if (DAT_8009e414 == 0) {
    *(undefined2 *)PTR_I_MASK_8009f4a4 = 0;
    *(undefined2 *)puVar1 = *(undefined2 *)puVar2;
    *(undefined4 *)PTR_DMA_DPCR_8009f4a8 = 0x33333333;
    memclr(&DAT_8009e414,0x41a);
    iVar4 = setjmp(&DAT_8009e44c);
    if (iVar4 != 0) {
      trapIntr();
    }
    DAT_8009e450 = &DAT_8009f42c;
    HookEntryInt(&DAT_8009e44c);
    DAT_8009e414 = 1;
    uVar5 = startIntrVSync();
    *(undefined4 *)(PTR_PTR_s__Id__intr_c_v_1_76_1997_02_12_12_8009f49c + 0x14) = uVar5;
    uVar5 = startIntrDMA();
    *(undefined4 *)(PTR_PTR_s__Id__intr_c_v_1_76_1997_02_12_12_8009f49c + 4) = uVar5;
    FUN_8008859c();
    puVar3 = &DAT_8009e414;
    FUN_8008677c();
  }
  return puVar3;
}



void trapIntr(void)

{
  bool bVar1;
  uint uVar2;
  int iVar3;
  uint uVar4;
  code **ppcVar5;
  
  if (DAT_8009e414 == 0) {
    printf("unexpected interrupt(%04x)\n",(uint)*(ushort *)PTR_I_STAT_8009f4a0);
    ReturnFromException();
  }
  DAT_8009e416 = 1;
  uVar2 = (uint)(*(ushort *)PTR_I_MASK_8009f4a4 & DAT_8009e444 & *(ushort *)PTR_I_STAT_8009f4a0);
  if (uVar2 != 0) {
    do {
      ppcVar5 = (code **)&DAT_8009e418;
      for (uVar4 = 0; (uVar2 != 0 && ((int)uVar4 < 0xb)); uVar4 = uVar4 + 1) {
        if ((uVar2 & 1) != 0) {
          *(ushort *)PTR_I_STAT_8009f4a0 = ~(ushort)(1 << (uVar4 & 0x1f));
          if (*ppcVar5 != (code *)0x0) {
            (**ppcVar5)();
          }
        }
        ppcVar5 = ppcVar5 + 1;
        uVar2 = uVar2 >> 1;
      }
      uVar2 = (uint)(*(ushort *)PTR_I_MASK_8009f4a4 & DAT_8009e444 & *(ushort *)PTR_I_STAT_8009f4a0)
      ;
    } while (uVar2 != 0);
  }
  if ((*(ushort *)PTR_I_MASK_8009f4a4 & *(ushort *)PTR_I_STAT_8009f4a0) == 0) {
    DAT_8009f4ac = 0;
  }
  else {
    iVar3 = DAT_8009f4ac + 1;
    bVar1 = 0x800 < DAT_8009f4ac;
    DAT_8009f4ac = iVar3;
    if (bVar1) {
      printf("intr timeout(%04x:%04x)\n",(uint)*(ushort *)PTR_I_STAT_8009f4a0,
             (uint)*(ushort *)PTR_I_MASK_8009f4a4);
      DAT_8009f4ac = 0;
      *(undefined2 *)PTR_I_STAT_8009f4a0 = 0;
      INTR_OBJ_428();
      return;
    }
  }
  DAT_8009e416 = 0;
  ReturnFromException();
  return;
}



void INTR_OBJ_428(void)

{
  DAT_8009e416 = 0;
  ReturnFromException();
  return;
}



int setIntr(uint param_1,int param_2)

{
  ushort uVar1;
  ushort uVar2;
  int *piVar3;
  int iVar4;
  
  piVar3 = &DAT_8009e418 + param_1;
  iVar4 = *piVar3;
  if ((param_2 != iVar4) && (DAT_8009e414 != 0)) {
    uVar1 = *(ushort *)PTR_I_MASK_8009f4a4;
    *(undefined2 *)PTR_I_MASK_8009f4a4 = 0;
    if (param_2 != 0) {
      *piVar3 = param_2;
      DAT_8009e444 = DAT_8009e444 | (ushort)(1 << (param_1 & 0x1f));
      iVar4 = INTR_OBJ_514();
      return iVar4;
    }
    uVar2 = ~(ushort)(1 << (param_1 & 0x1f));
    *piVar3 = 0;
    DAT_8009e444 = DAT_8009e444 & uVar2;
    if (param_1 == 0) {
      ChangeClearPAD(1);
      ChangeClearRCnt(3,1);
    }
    if (param_1 == 4) {
      ChangeClearRCnt(0,1);
    }
    if (param_1 == 5) {
      ChangeClearRCnt(1,1);
    }
    if (param_1 == 6) {
      ChangeClearRCnt(2,1);
    }
    *(ushort *)PTR_I_MASK_8009f4a4 = uVar1 & uVar2;
  }
  return iVar4;
}



void INTR_OBJ_514(void)

{
  int unaff_s1;
  int unaff_s2;
  undefined2 unaff_s3;
  
  if (unaff_s1 == 0) {
    ChangeClearPAD(unaff_s2 == 0);
    ChangeClearRCnt(3,unaff_s2 == 0);
  }
  if (unaff_s1 == 4) {
    ChangeClearRCnt(0,unaff_s2 == 0);
  }
  if (unaff_s1 == 5) {
    ChangeClearRCnt(1,unaff_s2 == 0);
  }
  if (unaff_s1 == 6) {
    ChangeClearRCnt(2,unaff_s2 == 0);
  }
  *(undefined2 *)PTR_I_MASK_8009f4a4 = unaff_s3;
  return;
}



undefined2 * stopIntr(void)

{
  undefined *puVar1;
  undefined *puVar2;
  undefined2 *puVar3;
  
  puVar3 = (undefined2 *)0x0;
  if (DAT_8009e414 != 0) {
    FUN_8008676c();
    puVar2 = PTR_I_MASK_8009f4a4;
    puVar1 = PTR_I_STAT_8009f4a0;
    DAT_8009e446 = *(undefined2 *)PTR_I_MASK_8009f4a4;
    DAT_8009e448 = *(undefined4 *)PTR_DMA_DPCR_8009f4a8;
    *(undefined2 *)PTR_I_MASK_8009f4a4 = 0;
    *(undefined2 *)puVar1 = *(undefined2 *)puVar2;
    *(uint *)PTR_DMA_DPCR_8009f4a8 = *(uint *)PTR_DMA_DPCR_8009f4a8 & 0x77777777;
    ResetEntryInt();
    DAT_8009e414 = 0;
    puVar3 = &DAT_8009e414;
  }
  return puVar3;
}



undefined4 restartIntr(void)

{
  undefined4 uVar1;
  
  if (DAT_8009e414 == 0) {
    HookEntryInt(&DAT_8009e44c);
    DAT_8009e414 = 1;
    *(undefined2 *)PTR_I_MASK_8009f4a4 = DAT_8009e446;
    *(undefined4 *)PTR_DMA_DPCR_8009f4a8 = DAT_8009e448;
    FUN_8008677c();
    uVar1 = INTR_OBJ_6D0();
    return uVar1;
  }
  return 0;
}



void INTR_OBJ_6D0(void)

{
  return;
}



void memclr(undefined4 *param_1,int param_2)

{
  int iVar1;
  
  iVar1 = param_2 + -1;
  if (param_2 != 0) {
    do {
      *param_1 = 0;
      iVar1 = iVar1 + -1;
      param_1 = param_1 + 1;
    } while (iVar1 != -1);
  }
  return;
}



void setjmp(void)

{
  (*(code *)&LAB_000000a0)();
  return;
}



// Possible C114.OBJ/_96_remove

void FUN_8008859c(void)

{
  (*(code *)&LAB_000000a0)();
  return;
}



void ReturnFromException(void)

{
  (*(code *)&SUB_000000b0)();
  return;
}



void ResetEntryInt(void)

{
  (*(code *)&SUB_000000b0)();
  return;
}



void HookEntryInt(void)

{
  (*(code *)&SUB_000000b0)();
  return;
}



code * startIntrVSync(void)

{
  *(undefined4 *)PTR_TMR_HRETRACE_MODE_8009f4d4 = 0x107;
  DAT_8009f4d0 = 0;
  memclr(&DAT_8009f4b0,8);
  InterruptCallback(0,trapIntrVSync);
  return setIntrVSync;
}



void trapIntrVSync(void)

{
  code **ppcVar1;
  int iVar2;
  
  iVar2 = 0;
  ppcVar1 = (code **)&DAT_8009f4b0;
  DAT_8009f4d0 = DAT_8009f4d0 + 1;
  do {
    if (*ppcVar1 != (code *)0x0) {
      (**ppcVar1)();
    }
    iVar2 = iVar2 + 1;
    ppcVar1 = ppcVar1 + 1;
  } while (iVar2 < 8);
  return;
}



void setIntrVSync(int param_1,int param_2)

{
  if (param_2 != (&DAT_8009f4b0)[param_1]) {
    (&DAT_8009f4b0)[param_1] = param_2;
  }
  return;
}



void memclr(undefined4 *param_1,int param_2)

{
  int iVar1;
  
  iVar1 = param_2 + -1;
  if (param_2 != 0) {
    do {
      *param_1 = 0;
      iVar1 = iVar1 + -1;
      param_1 = param_1 + 1;
    } while (iVar1 != -1);
  }
  return;
}



code * startIntrDMA(void)

{
  memclr(&DAT_8009f4dc,8);
  *(undefined4 *)PTR_DMA_DICR_8009f4d8 = 0;
  InterruptCallback(3,trapIntrDMA);
  return setIntrDMA;
}



void trapIntrDMA(void)

{
  int iVar1;
  int iVar2;
  uint uVar3;
  code **ppcVar4;
  
  uVar3 = *(uint *)PTR_DMA_DICR_8009f4d8 >> 0x18 & 0x7f;
  if (uVar3 != 0) {
    do {
      ppcVar4 = (code **)&DAT_8009f4dc;
      for (iVar1 = 0; (uVar3 != 0 && (iVar1 < 7)); iVar1 = iVar1 + 1) {
        if ((uVar3 & 1) != 0) {
          *(uint *)PTR_DMA_DICR_8009f4d8 =
               *(uint *)PTR_DMA_DICR_8009f4d8 & (1 << (iVar1 + 0x18U & 0x1f) | 0xffffffU);
          if (*ppcVar4 != (code *)0x0) {
            (**ppcVar4)();
          }
        }
        ppcVar4 = ppcVar4 + 1;
        uVar3 = uVar3 >> 1;
      }
      uVar3 = *(uint *)PTR_DMA_DICR_8009f4d8 >> 0x18 & 0x7f;
    } while (uVar3 != 0);
  }
  if (((*(uint *)PTR_DMA_DICR_8009f4d8 & 0xff000000) == 0x80000000) ||
     ((*(uint *)PTR_DMA_DICR_8009f4d8 & 0x8000) != 0)) {
    printf("DMA bus error: code=%08x\n",*(undefined4 *)PTR_DMA_DICR_8009f4d8);
    iVar1 = 0;
    do {
      iVar2 = iVar1 + 1;
      printf("MADR[%d]=%08x\n",iVar1,*(undefined4 *)(PTR_DMA_MDEC_IN_MADR_8009f4fc + iVar1 * 0x10));
      iVar1 = iVar2;
    } while (iVar2 < 7);
  }
  return;
}



int setIntrDMA(int param_1,int param_2)

{
  undefined *puVar1;
  int *piVar2;
  int iVar3;
  
  puVar1 = PTR_DMA_DICR_8009f4d8;
  piVar2 = &DAT_8009f4dc + param_1;
  iVar3 = *piVar2;
  if (param_2 != iVar3) {
    if (param_2 != 0) {
      *piVar2 = param_2;
      *(uint *)puVar1 = *(uint *)puVar1 & 0xffffff | 1 << (param_1 + 0x10U & 0x1f) | 0x800000U;
      iVar3 = INTR_DMA_OBJ_274();
      return iVar3;
    }
    *piVar2 = 0;
    *(uint *)puVar1 = (*(uint *)puVar1 & 0xffffff | 0x800000) & ~(1 << (param_1 + 0x10U & 0x1f));
  }
  return iVar3;
}



undefined4 INTR_DMA_OBJ_274(void)

{
  undefined4 in_a3;
  
  return in_a3;
}



void memclr(undefined4 *param_1,int param_2)

{
  int iVar1;
  
  iVar1 = param_2 + -1;
  if (param_2 != 0) {
    do {
      *param_1 = 0;
      iVar1 = iVar1 + -1;
      param_1 = param_1 + 1;
    } while (iVar1 != -1);
  }
  return;
}



// Possible VMODE.OBJ/SetVideoMode

undefined4 FUN_800889b4(undefined4 param_1)

{
  undefined4 uVar1;
  
  uVar1 = DAT_8009f500;
  DAT_8009f500 = param_1;
  return uVar1;
}



// Possible VMODE.OBJ/GetVideoMode
// Possible GS_125.OBJ/GsGetWorkBase

undefined4 FUN_800889cc(void)

{
  return DAT_8009f500;
}



u_short LoadTPage(u_long *pix,int tp,int abr,int x,int y,int w,int h)

{
  u_short uVar1;
  RECT local_20;
  
  local_20.x = (short)x;
  local_20.h = (short)h;
  local_20.y = (short)y;
  if (tp == 1) {
    local_20.w = (short)(w / 2);
    uVar1 = EXT_OBJ_A8();
    return uVar1;
  }
  if (tp < 2) {
    if (tp != 0) {
      uVar1 = EXT_OBJ_AC();
      return uVar1;
    }
    if (w < 0) {
      w = w + 3;
    }
    local_20.w = (short)(w >> 2);
    uVar1 = EXT_OBJ_A8(&local_20);
    return uVar1;
  }
  if (tp != 2) {
    uVar1 = EXT_OBJ_AC(&local_20);
    return uVar1;
  }
  local_20.w = (short)w;
  LoadImage(&local_20,pix);
  uVar1 = GetTPage(2,abr,x,y);
  return uVar1;
}



u_short EXT_OBJ_A8(void)

{
  u_short uVar1;
  u_long *in_t0;
  int unaff_s0;
  int unaff_s1;
  int unaff_s2;
  int unaff_s3;
  
  LoadImage((RECT *)&stack0x00000010,in_t0);
  uVar1 = GetTPage(unaff_s0,unaff_s2,unaff_s1,unaff_s3);
  return uVar1;
}



u_short EXT_OBJ_AC(RECT *param_1)

{
  u_short uVar1;
  u_long *in_t0;
  int unaff_s0;
  int unaff_s1;
  int unaff_s2;
  int unaff_s3;
  
  LoadImage(param_1,in_t0);
  uVar1 = GetTPage(unaff_s0,unaff_s2,unaff_s1,unaff_s3);
  return uVar1;
}



u_short LoadClut(u_long *clut,int x,int y)

{
  u_short result;
  RECT block;
  
  block.w = 0x100;
  block.x = (short)x;
  block.y = (short)y;
  block.h = 1;
  LoadImage(&block,clut);
  result = GetClut(x,y);
  return result;
}



u_short LoadClut2(u_long *clut,int x,int y)

{
  u_short uVar1;
  RECT local_18;
  
  local_18.w = 0x10;
  local_18.x = (short)x;
  local_18.y = (short)y;
  local_18.h = 1;
  LoadImage(&local_18,clut);
  uVar1 = GetClut(x,y);
  return uVar1;
}



DRAWENV * SetDefDrawEnv(DRAWENV *env,int x,int y,int w,int h)

{
  int iVar1;
  DRAWENV *pDVar2;
  
  iVar1 = FUN_800889cc();
  (env->clip).x = (short)x;
  (env->clip).y = (short)y;
  (env->clip).w = (short)w;
  (env->tw).x = 0;
  (env->tw).y = 0;
  (env->tw).w = 0;
  (env->tw).h = 0;
  env->r0 = '\0';
  env->g0 = '\0';
  env->b0 = '\0';
  env->dtd = '\x01';
  (env->clip).h = (short)h;
  if (iVar1 != 0) {
    pDVar2 = (DRAWENV *)EXT_OBJ_234();
    return pDVar2;
  }
  env->dfe = h < 0x101;
  env->ofs[0] = (short)x;
  env->ofs[1] = (short)y;
  env->tpage = 10;
  env->isbg = '\0';
  return env;
}



void EXT_OBJ_234(void)

{
  undefined in_v0;
  int unaff_s1;
  undefined2 unaff_s3;
  undefined2 unaff_s4;
  
  *(undefined *)(unaff_s1 + 0x17) = in_v0;
  *(undefined2 *)(unaff_s1 + 8) = unaff_s3;
  *(undefined2 *)(unaff_s1 + 10) = unaff_s4;
  *(undefined2 *)(unaff_s1 + 0x14) = 10;
  *(undefined *)(unaff_s1 + 0x18) = 0;
  return;
}



DISPENV * SetDefDispEnv(DISPENV *env,int x,int y,int w,int h)

{
  (env->disp).x = (short)x;
  (env->disp).y = (short)y;
  (env->disp).w = (short)w;
  (env->screen).x = 0;
  (env->screen).y = 0;
  (env->screen).w = 0;
  (env->screen).h = 0;
  env->isrgb24 = '\0';
  env->isinter = '\0';
  env->pad1 = '\0';
  env->pad0 = '\0';
  (env->disp).h = (short)h;
  return env;
}



void SetDumpFnt(int id)

{
  if ((-1 < id) && (id <= DAT_8009f684)) {
    PTR_printf_800a00e0 = FntPrint;
    DAT_8009f688 = id;
  }
  return;
}



void FntLoad(int tx,int ty)

{
  CURRENT_CLUT = LoadClut2((u_long *)&DAT_8009f68c,tx,ty + 0x80);
  CURRENT_TPAGE = LoadTPage((u_long *)&DAT_8009f88c,0,0,tx,ty,0x80,0x20);
  DAT_8009f684 = 0;
  memset(&DAT_8009f504,'\0',0x180);
  return;
}



int FntOpen(int x,int y,int w,int h,int isbg,int n)

{
  int iVar1;
  int iVar2;
  SPRT_8 *p;
  RECT local_38 [2];
  
  if (7 < DAT_8009f684) {
    iVar1 = FONT_OBJ_36C();
    return iVar1;
  }
  if (DAT_8009f684 == 0) {
    DAT_800a008c = 0;
  }
  iVar1 = DAT_800a008c;
  iVar2 = DAT_8009f684 * 0x30;
  *(uint *)(&DAT_8009f530 + iVar2) = (uint)(w == 0);
  if (0x400 < iVar1 + n) {
    n = 0x400 - iVar1;
  }
  local_38[0].w = 0x100;
  local_38[0].h = 0x100;
  local_38[0].x = 0;
  local_38[0].y = 0;
  SetDrawMode((DR_MODE *)(iVar2 + -0x7ff60aec),0,0,(uint)CURRENT_TPAGE,local_38);
  if (isbg != 0) {
    SetTile((TILE *)(&DAT_8009f504 + DAT_8009f684 * 0x30));
    (&DAT_8009f508)[DAT_8009f684 * 0x30] = 0;
    (&DAT_8009f509)[DAT_8009f684 * 0x30] = 0;
    (&DAT_8009f50a)[DAT_8009f684 * 0x30] = 0;
    SetSemiTrans(&DAT_8009f504 + DAT_8009f684 * 0x30,(uint)(isbg == 2));
  }
  iVar1 = DAT_800a008c;
  iVar2 = DAT_8009f684 * 0x30;
  *(short *)(&DAT_8009f50c + iVar2) = (short)x;
  *(short *)(&DAT_8009f50e + iVar2) = (short)y;
  *(short *)(&DAT_8009f510 + iVar2) = (short)w;
  *(short *)(&DAT_8009f512 + iVar2) = (short)h;
  *(int *)(&DAT_8009f520 + iVar2) = n;
  *(undefined4 *)(&DAT_8009f52c + iVar2) = 0;
  *(undefined **)(&DAT_8009f528 + iVar2) = &DAT_800a8678 + iVar1;
  *(undefined **)(&DAT_8009f524 + iVar2) = &DAT_800a8a78 + iVar1 * 0x10;
  **(undefined **)(&DAT_8009f528 + iVar2) = 0;
  p = *(SPRT_8 **)(&DAT_8009f524 + DAT_8009f684 * 0x30);
  iVar1 = 0;
  if (0 < n) {
    do {
      SetSprt8(p);
      iVar1 = iVar1 + 1;
      p->clut = CURRENT_CLUT;
      p = p + 1;
    } while (iVar1 < n);
  }
  iVar1 = DAT_8009f684;
  DAT_800a008c = DAT_800a008c + n;
  DAT_8009f684 = DAT_8009f684 + 1;
  return iVar1;
}



void FONT_OBJ_36C(void)

{
  return;
}



u_long * FntFlush(int id)

{
  byte bVar1;
  bool bVar2;
  int iVar3;
  u_long *puVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  uint uVar8;
  int iVar9;
  byte *pbVar10;
  int iVar11;
  void *p;
  void *pvVar12;
  int iVar13;
  int iVar14;
  int iVar15;
  int local_50;
  
  local_50 = 0;
  if (((id < 0) || (iVar3 = id << 1, DAT_8009f684 <= id)) &&
     (iVar3 = DAT_8009f688 << 1, id = DAT_8009f688,
     *(int *)(&DAT_8009f528 + DAT_8009f688 * 0x30) == 0)) {
    puVar4 = (u_long *)FONT_OBJ_680();
    return puVar4;
  }
  iVar5 = (iVar3 + id) * 0x10;
  puVar4 = (u_long *)(iVar5 + -0x7ff60aec);
  pbVar10 = *(byte **)(&DAT_8009f528 + iVar5);
  iVar3 = *(int *)(&DAT_8009f520 + iVar5);
  iVar11 = (int)*(short *)(&DAT_8009f50c + iVar5);
  iVar13 = (int)*(short *)(&DAT_8009f50e + iVar5);
  iVar7 = iVar13 + *(short *)(&DAT_8009f512 + iVar5);
  p = *(void **)(&DAT_8009f524 + iVar5);
  iVar14 = *(int *)(&DAT_8009f530 + iVar5);
  iVar15 = iVar11 + *(short *)(&DAT_8009f510 + iVar5);
  TermPrim(puVar4);
  bVar1 = *pbVar10;
  for (; (bVar1 != 0 && (iVar3 != 0)); iVar3 = iVar3 + -1) {
    bVar2 = false;
    pvVar12 = p;
    if (bVar1 == 0x20) {
FONT_OBJ_5B8:
      iVar11 = iVar11 + 8;
      if ((iVar15 <= iVar11) && (iVar14 == 0)) {
FONT_OBJ_5D0:
        bVar2 = true;
      }
    }
    else {
      if (bVar1 < 0x21) {
        if (bVar1 == 9) {
          puVar4 = (u_long *)FONT_OBJ_5BC();
          return puVar4;
        }
        if (bVar1 != 10) {
          puVar4 = (u_long *)FONT_OBJ_534();
          return puVar4;
        }
        goto FONT_OBJ_5D0;
      }
      if (bVar1 != 0x7e) {
        uVar8 = (uint)*pbVar10;
        if (uVar8 - 0x61 < 0x1a) {
          puVar4 = (u_long *)FONT_OBJ_558();
          return puVar4;
        }
        iVar9 = uVar8 - 0x20;
        iVar6 = iVar9;
        if (iVar9 < 0) {
          iVar6 = uVar8 - 0x11;
        }
        *(char *)((int)p + 0xc) = ((char)iVar9 + (char)(iVar6 >> 4) * -0x10) * '\b';
        *(char *)((int)p + 0xd) = (char)((iVar6 >> 4) << 3);
        *(short *)((int)p + 8) = (short)iVar11;
        *(short *)((int)p + 10) = (short)iVar13;
        *(undefined *)((int)p + 4) = 0x80;
        *(undefined *)((int)p + 5) = 0x80;
        *(undefined *)((int)p + 6) = 0x80;
        pvVar12 = (void *)((int)p + 0x10);
        AddPrim(puVar4,p);
        goto FONT_OBJ_5B8;
      }
      pbVar10 = pbVar10 + 1;
      if (*pbVar10 == 99) {
        puVar4 = (u_long *)FONT_OBJ_5D4();
        return puVar4;
      }
    }
    if (bVar2) {
      if (local_50 < iVar11) {
        local_50 = iVar11;
      }
      iVar13 = iVar13 + 8;
      iVar11 = (int)*(short *)(&DAT_8009f50c + iVar5);
      if (iVar7 <= iVar13) break;
    }
    pbVar10 = pbVar10 + 1;
    bVar1 = *pbVar10;
    p = pvVar12;
  }
  if (((&DAT_8009f50b)[iVar5] != '\0') && (AddPrim(puVar4,&DAT_8009f504 + iVar5), iVar14 != 0)) {
    *(short *)(&DAT_8009f510 + iVar5) = (short)local_50 - *(short *)(&DAT_8009f50c + iVar5);
    *(short *)(&DAT_8009f512 + iVar5) = (short)iVar13 - (*(short *)(&DAT_8009f50e + iVar5) + -8);
  }
  DrawOTag(puVar4);
  *(undefined4 *)(&DAT_8009f52c + iVar5) = 0;
  **(undefined **)(&DAT_8009f528 + iVar5) = 0;
  return puVar4;
}



u_long * FONT_OBJ_534(void)

{
  byte bVar1;
  u_long *puVar2;
  int iVar3;
  uint uVar4;
  int iVar5;
  byte *pbVar6;
  byte *unaff_s0;
  int unaff_s1;
  void *unaff_s2;
  void *pvVar7;
  void *unaff_s3;
  int unaff_s4;
  int unaff_s5;
  int unaff_s6;
  int unaff_s7;
  int unaff_s8;
  u_long *in_stack_00000010;
  int in_stack_00000018;
  int in_stack_00000020;
  undefined in_stack_00000028;
  undefined in_stack_00000030;
  undefined in_stack_00000038;
  
code_r0x800891c0:
  uVar4 = (uint)*unaff_s0;
  if (uVar4 - 0x61 < 0x1a) {
    puVar2 = (u_long *)FONT_OBJ_558();
    return puVar2;
  }
  iVar5 = uVar4 - 0x20;
  iVar3 = iVar5;
  if (iVar5 < 0) {
    iVar3 = uVar4 - 0x11;
  }
  *(char *)((int)unaff_s2 + 0xc) = ((char)iVar5 + (char)(iVar3 >> 4) * -0x10) * '\b';
  *(char *)((int)unaff_s2 + 0xd) = (char)((iVar3 >> 4) << 3);
  *(short *)((int)unaff_s2 + 8) = (short)unaff_s1;
  *(short *)((int)unaff_s2 + 10) = (short)unaff_s5;
  *(undefined *)((int)unaff_s2 + 4) = in_stack_00000028;
  *(undefined *)((int)unaff_s2 + 5) = in_stack_00000030;
  *(undefined *)((int)unaff_s2 + 6) = in_stack_00000038;
  pvVar7 = (void *)((int)unaff_s2 + 0x10);
  AddPrim(in_stack_00000010,unaff_s2);
FONT_OBJ_5B8:
  pbVar6 = unaff_s0;
  unaff_s1 = unaff_s1 + 8;
  if (unaff_s1 < unaff_s7) goto code_r0x80089260;
  if (unaff_s6 != 0) goto code_r0x80089260;
FONT_OBJ_5D0:
  unaff_s4 = 1;
code_r0x80089260:
  do {
    if (unaff_s4 != 0) {
      if (in_stack_00000018 < unaff_s1) {
        in_stack_00000018 = unaff_s1;
      }
      unaff_s5 = unaff_s5 + 8;
      unaff_s1 = (int)*(short *)((int)unaff_s3 + 8);
      if (in_stack_00000020 <= unaff_s5) goto FONT_OBJ_620;
    }
    unaff_s0 = pbVar6 + 1;
    bVar1 = *unaff_s0;
    unaff_s8 = unaff_s8 + -1;
    if ((bVar1 == 0) || (unaff_s8 == 0)) {
FONT_OBJ_620:
      if ((*(char *)((int)unaff_s3 + 7) != '\0') &&
         (AddPrim(in_stack_00000010,unaff_s3), unaff_s6 != 0)) {
        *(short *)((int)unaff_s3 + 0xc) = (short)in_stack_00000018 - *(short *)((int)unaff_s3 + 8);
        *(short *)((int)unaff_s3 + 0xe) = (short)unaff_s5 - (*(short *)((int)unaff_s3 + 10) + -8);
      }
      DrawOTag(in_stack_00000010);
      *(undefined4 *)((int)unaff_s3 + 0x28) = 0;
      **(undefined **)((int)unaff_s3 + 0x24) = 0;
      return in_stack_00000010;
    }
    unaff_s4 = 0;
    if (bVar1 == 0x20) goto FONT_OBJ_5B8;
    if (bVar1 < 0x21) break;
    unaff_s2 = pvVar7;
    if (bVar1 != 0x7e) goto code_r0x800891c0;
    pbVar6 = pbVar6 + 2;
    if (*pbVar6 == 99) {
      puVar2 = (u_long *)FONT_OBJ_5D4();
      return puVar2;
    }
  } while( true );
  if (bVar1 == 9) {
    puVar2 = (u_long *)FONT_OBJ_5BC();
    return puVar2;
  }
  pbVar6 = unaff_s0;
  if (bVar1 != 10) {
    puVar2 = (u_long *)FONT_OBJ_534();
    return puVar2;
  }
  goto FONT_OBJ_5D0;
}



u_long * FONT_OBJ_558(void)

{
  byte bVar1;
  u_long *puVar2;
  int iVar3;
  int in_v1;
  byte *pbVar4;
  byte *unaff_s0;
  int unaff_s1;
  void *unaff_s2;
  void *unaff_s3;
  int unaff_s4;
  int unaff_s5;
  int unaff_s6;
  int unaff_s7;
  int unaff_s8;
  u_long *param_5;
  int param_7;
  int param_9;
  undefined param_11;
  undefined param_12;
  undefined param_13;
  
code_r0x800891e4:
  iVar3 = in_v1;
  if (in_v1 < 0) {
    iVar3 = in_v1 + 0xf;
  }
  *(char *)((int)unaff_s2 + 0xc) = ((char)in_v1 + (char)(iVar3 >> 4) * -0x10) * '\b';
  *(char *)((int)unaff_s2 + 0xd) = (char)((iVar3 >> 4) << 3);
  *(short *)((int)unaff_s2 + 8) = (short)unaff_s1;
  *(short *)((int)unaff_s2 + 10) = (short)unaff_s5;
  *(undefined *)((int)unaff_s2 + 4) = param_11;
  *(undefined *)((int)unaff_s2 + 5) = param_12;
  *(undefined *)((int)unaff_s2 + 6) = param_13;
  AddPrim(param_5,unaff_s2);
FONT_OBJ_5B8:
  pbVar4 = unaff_s0;
  unaff_s1 = unaff_s1 + 8;
  if (unaff_s1 < unaff_s7) goto code_r0x80089260;
  if (unaff_s6 != 0) goto code_r0x80089260;
FONT_OBJ_5D0:
  unaff_s4 = 1;
code_r0x80089260:
  do {
    if (unaff_s4 != 0) {
      if (param_7 < unaff_s1) {
        param_7 = unaff_s1;
      }
      unaff_s5 = unaff_s5 + 8;
      unaff_s1 = (int)*(short *)((int)unaff_s3 + 8);
      if (param_9 <= unaff_s5) goto FONT_OBJ_620;
    }
    unaff_s0 = pbVar4 + 1;
    bVar1 = *unaff_s0;
    unaff_s8 = unaff_s8 + -1;
    if ((bVar1 == 0) || (unaff_s8 == 0)) {
FONT_OBJ_620:
      if ((*(char *)((int)unaff_s3 + 7) != '\0') && (AddPrim(param_5,unaff_s3), unaff_s6 != 0)) {
        *(short *)((int)unaff_s3 + 0xc) = (short)param_7 - *(short *)((int)unaff_s3 + 8);
        *(short *)((int)unaff_s3 + 0xe) = (short)unaff_s5 - (*(short *)((int)unaff_s3 + 10) + -8);
      }
      DrawOTag(param_5);
      *(undefined4 *)((int)unaff_s3 + 0x28) = 0;
      **(undefined **)((int)unaff_s3 + 0x24) = 0;
      return param_5;
    }
    unaff_s4 = 0;
    if (bVar1 == 0x20) goto FONT_OBJ_5B8;
    if (bVar1 < 0x21) break;
    if (bVar1 != 0x7e) {
      if (*unaff_s0 - 0x61 < 0x1a) {
        puVar2 = (u_long *)FONT_OBJ_558();
        return puVar2;
      }
      in_v1 = *unaff_s0 - 0x20;
      unaff_s2 = (void *)((int)unaff_s2 + 0x10);
      goto code_r0x800891e4;
    }
    pbVar4 = pbVar4 + 2;
    if (*pbVar4 == 99) {
      puVar2 = (u_long *)FONT_OBJ_5D4();
      return puVar2;
    }
  } while( true );
  if (bVar1 == 9) {
    puVar2 = (u_long *)FONT_OBJ_5BC();
    return puVar2;
  }
  pbVar4 = unaff_s0;
  if (bVar1 != 10) {
    puVar2 = (u_long *)FONT_OBJ_534();
    return puVar2;
  }
  goto FONT_OBJ_5D0;
}



u_long * FONT_OBJ_5BC(void)

{
  byte bVar1;
  u_long *puVar2;
  int iVar3;
  uint uVar4;
  int iVar5;
  byte *unaff_s0;
  byte *pbVar6;
  int unaff_s1;
  void *pvVar7;
  void *unaff_s2;
  void *unaff_s3;
  int unaff_s4;
  int unaff_s5;
  int unaff_s6;
  int unaff_s7;
  int unaff_s8;
  u_long *in_stack_00000010;
  int in_stack_00000018;
  int in_stack_00000020;
  undefined in_stack_00000028;
  undefined in_stack_00000030;
  undefined in_stack_00000038;
  
code_r0x80089248:
  if (unaff_s1 < unaff_s7) goto code_r0x80089260;
  if (unaff_s6 != 0) goto code_r0x80089260;
FONT_OBJ_5D0:
  unaff_s4 = 1;
code_r0x80089260:
  do {
    if (unaff_s4 != 0) {
      if (in_stack_00000018 < unaff_s1) {
        in_stack_00000018 = unaff_s1;
      }
      unaff_s5 = unaff_s5 + 8;
      unaff_s1 = (int)*(short *)((int)unaff_s3 + 8);
      if (in_stack_00000020 <= unaff_s5) goto FONT_OBJ_620;
    }
    pbVar6 = unaff_s0 + 1;
    bVar1 = *pbVar6;
    unaff_s8 = unaff_s8 + -1;
    if ((bVar1 == 0) || (unaff_s8 == 0)) {
FONT_OBJ_620:
      if ((*(char *)((int)unaff_s3 + 7) != '\0') &&
         (AddPrim(in_stack_00000010,unaff_s3), unaff_s6 != 0)) {
        *(short *)((int)unaff_s3 + 0xc) = (short)in_stack_00000018 - *(short *)((int)unaff_s3 + 8);
        *(short *)((int)unaff_s3 + 0xe) = (short)unaff_s5 - (*(short *)((int)unaff_s3 + 10) + -8);
      }
      DrawOTag(in_stack_00000010);
      *(undefined4 *)((int)unaff_s3 + 0x28) = 0;
      **(undefined **)((int)unaff_s3 + 0x24) = 0;
      return in_stack_00000010;
    }
    unaff_s4 = 0;
    pvVar7 = unaff_s2;
    if (bVar1 == 0x20) {
FONT_OBJ_5B8:
      unaff_s1 = unaff_s1 + 8;
      unaff_s0 = pbVar6;
      unaff_s2 = pvVar7;
      goto code_r0x80089248;
    }
    if (bVar1 < 0x21) break;
    if (bVar1 != 0x7e) {
      uVar4 = (uint)*pbVar6;
      if (uVar4 - 0x61 < 0x1a) {
        puVar2 = (u_long *)FONT_OBJ_558();
        return puVar2;
      }
      iVar5 = uVar4 - 0x20;
      iVar3 = iVar5;
      if (iVar5 < 0) {
        iVar3 = uVar4 - 0x11;
      }
      *(char *)((int)unaff_s2 + 0xc) = ((char)iVar5 + (char)(iVar3 >> 4) * -0x10) * '\b';
      *(char *)((int)unaff_s2 + 0xd) = (char)((iVar3 >> 4) << 3);
      *(short *)((int)unaff_s2 + 8) = (short)unaff_s1;
      *(short *)((int)unaff_s2 + 10) = (short)unaff_s5;
      *(undefined *)((int)unaff_s2 + 4) = in_stack_00000028;
      *(undefined *)((int)unaff_s2 + 5) = in_stack_00000030;
      *(undefined *)((int)unaff_s2 + 6) = in_stack_00000038;
      pvVar7 = (void *)((int)unaff_s2 + 0x10);
      AddPrim(in_stack_00000010,unaff_s2);
      goto FONT_OBJ_5B8;
    }
    unaff_s0 = unaff_s0 + 2;
    if (*unaff_s0 == 99) {
      puVar2 = (u_long *)FONT_OBJ_5D4();
      return puVar2;
    }
  } while( true );
  if (bVar1 == 9) {
    puVar2 = (u_long *)FONT_OBJ_5BC();
    return puVar2;
  }
  unaff_s0 = pbVar6;
  if (bVar1 != 10) {
    puVar2 = (u_long *)FONT_OBJ_534();
    return puVar2;
  }
  goto FONT_OBJ_5D0;
}



u_long * FONT_OBJ_5D4(void)

{
  byte bVar1;
  u_long *puVar2;
  int iVar3;
  uint uVar4;
  int iVar5;
  byte *unaff_s0;
  byte *pbVar6;
  int unaff_s1;
  void *pvVar7;
  void *unaff_s2;
  void *unaff_s3;
  int unaff_s4;
  int unaff_s5;
  int unaff_s6;
  int unaff_s7;
  int unaff_s8;
  u_long *param_5;
  int param_7;
  int param_9;
  undefined param_11;
  undefined param_12;
  undefined in_stack_00000038;
  
code_r0x80089260:
  do {
    if (unaff_s4 != 0) {
      if (param_7 < unaff_s1) {
        param_7 = unaff_s1;
      }
      unaff_s5 = unaff_s5 + 8;
      unaff_s1 = (int)*(short *)((int)unaff_s3 + 8);
      if (param_9 <= unaff_s5) goto FONT_OBJ_620;
    }
    pbVar6 = unaff_s0 + 1;
    bVar1 = *pbVar6;
    unaff_s8 = unaff_s8 + -1;
    if ((bVar1 == 0) || (unaff_s8 == 0)) {
FONT_OBJ_620:
      if ((*(char *)((int)unaff_s3 + 7) != '\0') && (AddPrim(param_5,unaff_s3), unaff_s6 != 0)) {
        *(short *)((int)unaff_s3 + 0xc) = (short)param_7 - *(short *)((int)unaff_s3 + 8);
        *(short *)((int)unaff_s3 + 0xe) = (short)unaff_s5 - (*(short *)((int)unaff_s3 + 10) + -8);
      }
      DrawOTag(param_5);
      *(undefined4 *)((int)unaff_s3 + 0x28) = 0;
      **(undefined **)((int)unaff_s3 + 0x24) = 0;
      return param_5;
    }
    unaff_s4 = 0;
    pvVar7 = unaff_s2;
    if (bVar1 == 0x20) {
FONT_OBJ_5B8:
      unaff_s1 = unaff_s1 + 8;
      unaff_s0 = pbVar6;
      unaff_s2 = pvVar7;
      if ((unaff_s7 <= unaff_s1) && (unaff_s6 == 0)) {
FONT_OBJ_5D0:
        unaff_s4 = 1;
        unaff_s0 = pbVar6;
        unaff_s2 = pvVar7;
      }
      goto code_r0x80089260;
    }
    if (bVar1 < 0x21) {
      if (bVar1 == 9) {
        puVar2 = (u_long *)FONT_OBJ_5BC();
        return puVar2;
      }
      if (bVar1 != 10) {
        puVar2 = (u_long *)FONT_OBJ_534();
        return puVar2;
      }
      goto FONT_OBJ_5D0;
    }
    if (bVar1 != 0x7e) {
      uVar4 = (uint)*pbVar6;
      if (uVar4 - 0x61 < 0x1a) {
        puVar2 = (u_long *)FONT_OBJ_558();
        return puVar2;
      }
      iVar5 = uVar4 - 0x20;
      iVar3 = iVar5;
      if (iVar5 < 0) {
        iVar3 = uVar4 - 0x11;
      }
      *(char *)((int)unaff_s2 + 0xc) = ((char)iVar5 + (char)(iVar3 >> 4) * -0x10) * '\b';
      *(char *)((int)unaff_s2 + 0xd) = (char)((iVar3 >> 4) << 3);
      *(short *)((int)unaff_s2 + 8) = (short)unaff_s1;
      *(short *)((int)unaff_s2 + 10) = (short)unaff_s5;
      *(undefined *)((int)unaff_s2 + 4) = param_11;
      *(undefined *)((int)unaff_s2 + 5) = param_12;
      *(undefined *)((int)unaff_s2 + 6) = in_stack_00000038;
      pvVar7 = (void *)((int)unaff_s2 + 0x10);
      AddPrim(param_5,unaff_s2);
      goto FONT_OBJ_5B8;
    }
    unaff_s0 = unaff_s0 + 2;
    if (*unaff_s0 == 99) {
      puVar2 = (u_long *)FONT_OBJ_5D4();
      return puVar2;
    }
  } while( true );
}



void FONT_OBJ_680(void)

{
  return;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int FntPrint(void)

{
  int iVar1;
  char *in_a0;
  int iVar2;
  char cVar3;
  char *in_a1;
  char *local_res0;
  
  if ((((-1 < (int)in_a0) && (local_res0 = in_a0, (int)in_a0 < DAT_8009f684)) ||
      (local_res0 = DAT_8009f688, in_a1 = in_a0,
      *(int *)(&DAT_8009f528 + (int)DAT_8009f688 * 0x30) != 0)) &&
     (iVar1 = (int)local_res0 * 0x30,
     *(int *)(&DAT_8009f52c + iVar1) <= *(int *)(&DAT_8009f520 + iVar1))) {
    cVar3 = *in_a1;
    while( true ) {
      if (cVar3 == '\0') {
        *(undefined *)(*(int *)(&DAT_8009f528 + iVar1) + *(int *)(&DAT_8009f52c + iVar1)) = 0;
        return *(int *)(&DAT_8009f52c + iVar1);
      }
      if (cVar3 == '%') {
        in_a1 = in_a1 + 1;
        cVar3 = *in_a1;
        if (cVar3 != '%') {
          iVar1 = FONT_OBJ_820();
          return iVar1;
        }
      }
      iVar2 = *(int *)(&DAT_8009f52c + iVar1);
      *(int *)(&DAT_8009f52c + iVar1) = iVar2 + 1;
      *(char *)(*(int *)(&DAT_8009f528 + iVar1) + iVar2) = cVar3;
      in_a1 = in_a1 + 1;
      if (*(int *)(&DAT_8009f520 + iVar1) < *(int *)(&DAT_8009f52c + iVar1)) break;
      cVar3 = *in_a1;
    }
    iVar1 = FONT_OBJ_A6C();
    return iVar1;
  }
  iVar1 = FONT_OBJ_A6C();
  return iVar1;
}



undefined4 FONT_OBJ_820(undefined4 param_1,uint param_2,int param_3,char param_4)

{
  undefined4 uVar1;
  uint uVar2;
  char *pcVar3;
  char *pcVar4;
  int iVar5;
  byte bVar6;
  char cVar7;
  char *pcVar8;
  char *pcVar9;
  int unaff_s1;
  int unaff_s2;
  byte *unaff_s3;
  byte *pbVar10;
  uint unaff_s4;
  uint unaff_s5;
  char **in_stack_00000210;
  
  while (param_2 - 0x30 < 10) {
    unaff_s2 = unaff_s2 * 10 + -0x30 + param_2;
    unaff_s3 = unaff_s3 + 1;
    param_2 = (uint)*unaff_s3;
  }
  if (unaff_s2 < 1) {
    unaff_s2 = 1;
  }
  pcVar9 = &stack0x00000210;
  switch(param_2) {
  case 0x58:
  case 0x78:
    param_3 = 0;
    pcVar4 = *in_stack_00000210;
    do {
      do {
        pcVar9 = pcVar9 + -1;
        uVar2 = (uint)pcVar4 & 0xf;
        pcVar4 = (char *)((uint)pcVar4 >> 4);
        param_3 = param_3 + 1;
        *pcVar9 = PTR_s_0123456789ABCDEF_800a0090[uVar2];
      } while (param_3 == 0);
    } while (pcVar4 != (char *)0x0);
    if (param_4 != '\0') {
      if (param_3 < unaff_s2) {
        do {
          pcVar9 = pcVar9 + -1;
          param_3 = param_3 + 1;
          *pcVar9 = '0';
        } while (param_3 < unaff_s2);
        uVar1 = FONT_OBJ_9A4();
        return uVar1;
      }
joined_r0x80089680:
      do {
        param_3 = param_3 + -1;
        if (param_3 == -1) {
          do {
            pbVar10 = unaff_s3 + 1;
            bVar6 = *pbVar10;
            if (bVar6 == 0) {
              *(undefined *)(*(int *)(unaff_s1 + 0x24) + *(int *)(unaff_s1 + 0x28)) = 0;
              return *(undefined4 *)(unaff_s1 + 0x28);
            }
            if (bVar6 == unaff_s4) {
              pbVar10 = unaff_s3 + 2;
              bVar6 = *pbVar10;
              if (bVar6 != unaff_s4) {
                uVar1 = FONT_OBJ_820();
                return uVar1;
              }
            }
            iVar5 = *(int *)(unaff_s1 + 0x28);
            *(int *)(unaff_s1 + 0x28) = iVar5 + 1;
            *(byte *)(*(int *)(unaff_s1 + 0x24) + iVar5) = bVar6;
            unaff_s3 = pbVar10;
          } while (*(int *)(unaff_s1 + 0x28) <= *(int *)(unaff_s1 + 0x1c));
          uVar1 = FONT_OBJ_A6C();
          return uVar1;
        }
        iVar5 = *(int *)(unaff_s1 + 0x28);
        *(int *)(unaff_s1 + 0x28) = iVar5 + 1;
        *(char *)(*(int *)(unaff_s1 + 0x24) + iVar5) = *pcVar9;
        pcVar9 = pcVar9 + 1;
      } while (*(int *)(unaff_s1 + 0x28) <= *(int *)(unaff_s1 + 0x1c));
      goto FONT_OBJ_73C;
    }
    break;
  case 99:
    uVar1 = FONT_OBJ_9A0(param_1,param_2,1);
    return uVar1;
  case 100:
    pcVar4 = *in_stack_00000210;
    cVar7 = '\0';
    if ((int)pcVar4 < 0) {
      pcVar4 = (char *)-(int)pcVar4;
      cVar7 = '-';
    }
    param_3 = 0;
    do {
      do {
        pcVar8 = pcVar9;
        iVar5 = param_3;
        pcVar9 = pcVar8 + -1;
        param_3 = iVar5 + 1;
        pcVar3 = (char *)(ZEXT48(pcVar4) * (ulonglong)unaff_s5 >> 0x23);
        *pcVar9 = (char)pcVar4 + (char)pcVar3 * -10 + '0';
        pcVar4 = pcVar3;
      } while (param_3 == 0);
    } while (pcVar3 != (char *)0x0);
    if (cVar7 != '\0') {
      pcVar8[-2] = cVar7;
      uVar1 = FONT_OBJ_9A0(0,cVar7,iVar5 + 2);
      return uVar1;
    }
    break;
  case 0x73:
    pcVar9 = *in_stack_00000210;
    param_3 = strlen(pcVar9);
  }
  do {
    if (unaff_s2 <= param_3) goto joined_r0x80089680;
    iVar5 = *(int *)(unaff_s1 + 0x28);
    *(int *)(unaff_s1 + 0x28) = iVar5 + 1;
    *(undefined *)(*(int *)(unaff_s1 + 0x24) + iVar5) = 0x20;
    unaff_s2 = unaff_s2 + -1;
  } while (*(int *)(unaff_s1 + 0x28) <= *(int *)(unaff_s1 + 0x1c));
FONT_OBJ_73C:
  uVar1 = FONT_OBJ_A6C();
  return uVar1;
}



undefined4 FONT_OBJ_868(void)

{
  undefined4 uVar1;
  uint uVar2;
  uint uVar3;
  int iVar4;
  byte bVar5;
  char cVar6;
  int iVar7;
  int iVar8;
  char *unaff_s0;
  char *pcVar9;
  int unaff_s1;
  int unaff_s2;
  int unaff_s3;
  byte *pbVar10;
  uint unaff_s4;
  uint unaff_s5;
  uint *in_stack_00000210;
  
  uVar3 = *in_stack_00000210;
  cVar6 = '\0';
  if ((int)uVar3 < 0) {
    uVar3 = -uVar3;
    cVar6 = '-';
  }
  iVar7 = 0;
  do {
    do {
      pcVar9 = unaff_s0;
      iVar8 = iVar7;
      unaff_s0 = pcVar9 + -1;
      iVar7 = iVar8 + 1;
      uVar2 = (uint)((ulonglong)uVar3 * (ulonglong)unaff_s5 >> 0x23);
      *unaff_s0 = (char)uVar3 + (char)uVar2 * -10 + '0';
      uVar3 = uVar2;
    } while (iVar7 == 0);
  } while (uVar2 != 0);
  if (cVar6 != '\0') {
    pcVar9[-2] = cVar6;
    uVar1 = FONT_OBJ_9A0(0,cVar6,iVar8 + 2);
    return uVar1;
  }
  if (iVar7 < unaff_s2) {
    do {
      iVar4 = *(int *)(unaff_s1 + 0x28);
      *(int *)(unaff_s1 + 0x28) = iVar4 + 1;
      *(undefined *)(*(int *)(unaff_s1 + 0x24) + iVar4) = 0x20;
      unaff_s2 = unaff_s2 + -1;
      if (*(int *)(unaff_s1 + 0x1c) < *(int *)(unaff_s1 + 0x28)) goto FONT_OBJ_73C;
    } while (iVar7 < unaff_s2);
  }
  while( true ) {
    if (iVar8 == -1) {
      pbVar10 = (byte *)(unaff_s3 + 1);
      do {
        bVar5 = *pbVar10;
        if (bVar5 == 0) {
          *(undefined *)(*(int *)(unaff_s1 + 0x24) + *(int *)(unaff_s1 + 0x28)) = 0;
          return *(undefined4 *)(unaff_s1 + 0x28);
        }
        if (bVar5 == unaff_s4) {
          pbVar10 = pbVar10 + 1;
          bVar5 = *pbVar10;
          if (bVar5 != unaff_s4) {
            uVar1 = FONT_OBJ_820();
            return uVar1;
          }
        }
        iVar7 = *(int *)(unaff_s1 + 0x28);
        *(int *)(unaff_s1 + 0x28) = iVar7 + 1;
        *(byte *)(*(int *)(unaff_s1 + 0x24) + iVar7) = bVar5;
        pbVar10 = pbVar10 + 1;
      } while (*(int *)(unaff_s1 + 0x28) <= *(int *)(unaff_s1 + 0x1c));
      uVar1 = FONT_OBJ_A6C();
      return uVar1;
    }
    iVar7 = *(int *)(unaff_s1 + 0x28);
    *(int *)(unaff_s1 + 0x28) = iVar7 + 1;
    *(char *)(*(int *)(unaff_s1 + 0x24) + iVar7) = *unaff_s0;
    unaff_s0 = unaff_s0 + 1;
    if (*(int *)(unaff_s1 + 0x1c) < *(int *)(unaff_s1 + 0x28)) break;
    iVar8 = iVar8 + -1;
  }
FONT_OBJ_73C:
  uVar1 = FONT_OBJ_A6C();
  return uVar1;
}



undefined4 FONT_OBJ_8E8(void)

{
  uint uVar1;
  undefined4 uVar2;
  uint uVar3;
  int iVar4;
  byte bVar5;
  int iVar6;
  int iVar7;
  char param_4;
  undefined *unaff_s0;
  int unaff_s1;
  int unaff_s2;
  int unaff_s3;
  byte *pbVar8;
  uint unaff_s4;
  uint *in_stack_00000210;
  
  uVar3 = *in_stack_00000210;
  iVar6 = 0;
  do {
    do {
      iVar7 = iVar6;
      unaff_s0 = unaff_s0 + -1;
      uVar1 = uVar3 & 0xf;
      uVar3 = uVar3 >> 4;
      iVar6 = iVar7 + 1;
      *unaff_s0 = PTR_s_0123456789ABCDEF_800a0090[uVar1];
    } while (iVar6 == 0);
  } while (uVar3 != 0);
  if (param_4 == '\0') {
    if (iVar6 < unaff_s2) {
      do {
        iVar4 = *(int *)(unaff_s1 + 0x28);
        *(int *)(unaff_s1 + 0x28) = iVar4 + 1;
        *(undefined *)(*(int *)(unaff_s1 + 0x24) + iVar4) = 0x20;
        unaff_s2 = unaff_s2 + -1;
        if (*(int *)(unaff_s1 + 0x1c) < *(int *)(unaff_s1 + 0x28)) goto FONT_OBJ_73C;
      } while (iVar6 < unaff_s2);
    }
  }
  else if (iVar6 < unaff_s2) {
    do {
      unaff_s0 = unaff_s0 + -1;
      iVar6 = iVar6 + 1;
      *unaff_s0 = 0x30;
    } while (iVar6 < unaff_s2);
    uVar2 = FONT_OBJ_9A4();
    return uVar2;
  }
  while( true ) {
    if (iVar7 == -1) {
      pbVar8 = (byte *)(unaff_s3 + 1);
      do {
        bVar5 = *pbVar8;
        if (bVar5 == 0) {
          *(undefined *)(*(int *)(unaff_s1 + 0x24) + *(int *)(unaff_s1 + 0x28)) = 0;
          return *(undefined4 *)(unaff_s1 + 0x28);
        }
        if (bVar5 == unaff_s4) {
          pbVar8 = pbVar8 + 1;
          bVar5 = *pbVar8;
          if (bVar5 != unaff_s4) {
            uVar2 = FONT_OBJ_820();
            return uVar2;
          }
        }
        iVar6 = *(int *)(unaff_s1 + 0x28);
        *(int *)(unaff_s1 + 0x28) = iVar6 + 1;
        *(byte *)(*(int *)(unaff_s1 + 0x24) + iVar6) = bVar5;
        pbVar8 = pbVar8 + 1;
      } while (*(int *)(unaff_s1 + 0x28) <= *(int *)(unaff_s1 + 0x1c));
      uVar2 = FONT_OBJ_A6C();
      return uVar2;
    }
    iVar6 = *(int *)(unaff_s1 + 0x28);
    *(int *)(unaff_s1 + 0x28) = iVar6 + 1;
    *(undefined *)(*(int *)(unaff_s1 + 0x24) + iVar6) = *unaff_s0;
    unaff_s0 = unaff_s0 + 1;
    if (*(int *)(unaff_s1 + 0x1c) < *(int *)(unaff_s1 + 0x28)) break;
    iVar7 = iVar7 + -1;
  }
FONT_OBJ_73C:
  uVar2 = FONT_OBJ_A6C();
  return uVar2;
}



void FONT_OBJ_960(undefined4 param_1,undefined4 param_2)

{
  int unaff_s0;
  undefined4 *in_stack_00000210;
  
  *(char *)(unaff_s0 + -1) = (char)*in_stack_00000210;
  FONT_OBJ_9A0(param_1,param_2,1);
  return;
}



undefined4 FONT_OBJ_980(void)

{
  undefined4 uVar1;
  int iVar2;
  int iVar3;
  byte bVar4;
  char *pcVar5;
  int unaff_s1;
  int unaff_s2;
  int unaff_s3;
  byte *pbVar6;
  uint unaff_s4;
  char **in_stack_00000210;
  
  pcVar5 = *in_stack_00000210;
  iVar2 = strlen(pcVar5);
  if (iVar2 < unaff_s2) {
    do {
      iVar3 = *(int *)(unaff_s1 + 0x28);
      *(int *)(unaff_s1 + 0x28) = iVar3 + 1;
      *(undefined *)(*(int *)(unaff_s1 + 0x24) + iVar3) = 0x20;
      unaff_s2 = unaff_s2 + -1;
      if (*(int *)(unaff_s1 + 0x1c) < *(int *)(unaff_s1 + 0x28)) goto FONT_OBJ_73C;
    } while (iVar2 < unaff_s2);
  }
  do {
    iVar2 = iVar2 + -1;
    if (iVar2 == -1) {
      pbVar6 = (byte *)(unaff_s3 + 1);
      do {
        bVar4 = *pbVar6;
        if (bVar4 == 0) {
          *(undefined *)(*(int *)(unaff_s1 + 0x24) + *(int *)(unaff_s1 + 0x28)) = 0;
          return *(undefined4 *)(unaff_s1 + 0x28);
        }
        if (bVar4 == unaff_s4) {
          pbVar6 = pbVar6 + 1;
          bVar4 = *pbVar6;
          if (bVar4 != unaff_s4) {
            uVar1 = FONT_OBJ_820();
            return uVar1;
          }
        }
        iVar2 = *(int *)(unaff_s1 + 0x28);
        *(int *)(unaff_s1 + 0x28) = iVar2 + 1;
        *(byte *)(*(int *)(unaff_s1 + 0x24) + iVar2) = bVar4;
        pbVar6 = pbVar6 + 1;
      } while (*(int *)(unaff_s1 + 0x28) <= *(int *)(unaff_s1 + 0x1c));
      uVar1 = FONT_OBJ_A6C();
      return uVar1;
    }
    iVar3 = *(int *)(unaff_s1 + 0x28);
    *(int *)(unaff_s1 + 0x28) = iVar3 + 1;
    *(char *)(*(int *)(unaff_s1 + 0x24) + iVar3) = *pcVar5;
    pcVar5 = pcVar5 + 1;
  } while (*(int *)(unaff_s1 + 0x28) <= *(int *)(unaff_s1 + 0x1c));
FONT_OBJ_73C:
  uVar1 = FONT_OBJ_A6C();
  return uVar1;
}



undefined4 FONT_OBJ_9A0(undefined4 param_1,undefined4 param_2,int param_3)

{
  undefined4 uVar1;
  int iVar2;
  byte bVar3;
  undefined *unaff_s0;
  int unaff_s1;
  int unaff_s2;
  int unaff_s3;
  byte *pbVar4;
  uint unaff_s4;
  
  if (param_3 < unaff_s2) {
    do {
      iVar2 = *(int *)(unaff_s1 + 0x28);
      *(int *)(unaff_s1 + 0x28) = iVar2 + 1;
      *(undefined *)(*(int *)(unaff_s1 + 0x24) + iVar2) = 0x20;
      unaff_s2 = unaff_s2 + -1;
      if (*(int *)(unaff_s1 + 0x1c) < *(int *)(unaff_s1 + 0x28)) goto FONT_OBJ_73C;
    } while (param_3 < unaff_s2);
  }
  param_3 = param_3 + -1;
  while( true ) {
    if (param_3 == -1) {
      pbVar4 = (byte *)(unaff_s3 + 1);
      do {
        bVar3 = *pbVar4;
        if (bVar3 == 0) {
          *(undefined *)(*(int *)(unaff_s1 + 0x24) + *(int *)(unaff_s1 + 0x28)) = 0;
          return *(undefined4 *)(unaff_s1 + 0x28);
        }
        if (bVar3 == unaff_s4) {
          pbVar4 = pbVar4 + 1;
          bVar3 = *pbVar4;
          if (bVar3 != unaff_s4) {
            uVar1 = FONT_OBJ_820();
            return uVar1;
          }
        }
        iVar2 = *(int *)(unaff_s1 + 0x28);
        *(int *)(unaff_s1 + 0x28) = iVar2 + 1;
        *(byte *)(*(int *)(unaff_s1 + 0x24) + iVar2) = bVar3;
        pbVar4 = pbVar4 + 1;
      } while (*(int *)(unaff_s1 + 0x28) <= *(int *)(unaff_s1 + 0x1c));
      uVar1 = FONT_OBJ_A6C();
      return uVar1;
    }
    iVar2 = *(int *)(unaff_s1 + 0x28);
    *(int *)(unaff_s1 + 0x28) = iVar2 + 1;
    *(undefined *)(*(int *)(unaff_s1 + 0x24) + iVar2) = *unaff_s0;
    unaff_s0 = unaff_s0 + 1;
    if (*(int *)(unaff_s1 + 0x1c) < *(int *)(unaff_s1 + 0x28)) break;
    param_3 = param_3 + -1;
  }
FONT_OBJ_73C:
  uVar1 = FONT_OBJ_A6C();
  return uVar1;
}



undefined4 FONT_OBJ_9A4(undefined4 param_1,undefined4 param_2,int param_3)

{
  undefined4 uVar1;
  int in_v0;
  int iVar2;
  byte bVar3;
  undefined *unaff_s0;
  int unaff_s1;
  int unaff_s2;
  int unaff_s3;
  byte *pbVar4;
  uint unaff_s4;
  
  if (in_v0 != 0) {
    do {
      iVar2 = *(int *)(unaff_s1 + 0x28);
      *(int *)(unaff_s1 + 0x28) = iVar2 + 1;
      *(undefined *)(*(int *)(unaff_s1 + 0x24) + iVar2) = 0x20;
      unaff_s2 = unaff_s2 + -1;
      if (*(int *)(unaff_s1 + 0x1c) < *(int *)(unaff_s1 + 0x28)) goto FONT_OBJ_73C;
    } while (param_3 < unaff_s2);
  }
  param_3 = param_3 + -1;
  while( true ) {
    if (param_3 == -1) {
      pbVar4 = (byte *)(unaff_s3 + 1);
      do {
        bVar3 = *pbVar4;
        if (bVar3 == 0) {
          *(undefined *)(*(int *)(unaff_s1 + 0x24) + *(int *)(unaff_s1 + 0x28)) = 0;
          return *(undefined4 *)(unaff_s1 + 0x28);
        }
        if (bVar3 == unaff_s4) {
          pbVar4 = pbVar4 + 1;
          bVar3 = *pbVar4;
          if (bVar3 != unaff_s4) {
            uVar1 = FONT_OBJ_820();
            return uVar1;
          }
        }
        iVar2 = *(int *)(unaff_s1 + 0x28);
        *(int *)(unaff_s1 + 0x28) = iVar2 + 1;
        *(byte *)(*(int *)(unaff_s1 + 0x24) + iVar2) = bVar3;
        pbVar4 = pbVar4 + 1;
      } while (*(int *)(unaff_s1 + 0x28) <= *(int *)(unaff_s1 + 0x1c));
      uVar1 = FONT_OBJ_A6C();
      return uVar1;
    }
    iVar2 = *(int *)(unaff_s1 + 0x28);
    *(int *)(unaff_s1 + 0x28) = iVar2 + 1;
    *(undefined *)(*(int *)(unaff_s1 + 0x24) + iVar2) = *unaff_s0;
    unaff_s0 = unaff_s0 + 1;
    if (*(int *)(unaff_s1 + 0x1c) < *(int *)(unaff_s1 + 0x28)) break;
    param_3 = param_3 + -1;
  }
FONT_OBJ_73C:
  uVar1 = FONT_OBJ_A6C();
  return uVar1;
}



void FONT_OBJ_A6C(void)

{
  return;
}



int strlen(char *param_1)

{
  int iVar1;
  
  iVar1 = (*(code *)&LAB_000000a0)();
  return iVar1;
}



void * memset(uchar *param_1,uchar param_2,int param_3)

{
  void *pvVar1;
  
  pvVar1 = (void *)(*(code *)&LAB_000000a0)();
  return pvVar1;
}



u_short GetTPage(int tp,int abr,int x,int y)

{
  return (ushort)((tp & 3U) << 7) | (ushort)((abr & 3U) << 5) | (ushort)((int)(y & 0x100U) >> 4) |
         (ushort)((int)(x & 0x3ffU) >> 6) | (ushort)((y & 0x200U) << 2);
}



u_short GetClut(int x,int y)

{
  return (ushort)(y << 6) | (ushort)(x >> 4) & 0x3f;
}



void DumpTPage(u_short tpage)

{
  (*(code *)PTR_printf_800a00e0)
            ("tpage: (%d,%d,%d,%d)\n",tpage >> 7 & 3,tpage >> 5 & 3,(tpage & 0x1f) << 6,
             (tpage & 0x10) * 0x10 + (tpage >> 2 & 0x200));
  return;
}



void DumpClut(u_short clut)

{
  (*(code *)PTR_printf_800a00e0)("clut: (%d,%d)\n",(clut & 0x3f) << 4,clut >> 6);
  return;
}



void * NextPrim(void *p)

{
                    // WARNING: Load size is inaccurate
  return (void *)(*p & 0xffffff | 0x80000000);
}



int IsEndPrim(void *p)

{
                    // WARNING: Load size is inaccurate
  return (uint)((*p & 0xffffff) == 0xffffff);
}



void AddPrim(void *ot,void *p)

{
                    // WARNING: Load size is inaccurate
                    // WARNING: Load size is inaccurate
  *(uint *)p = *p & 0xff000000 | *ot & 0xffffff;
                    // WARNING: Load size is inaccurate
  *(uint *)ot = *ot & 0xff000000 | (uint)p & 0xffffff;
  return;
}



void AddPrims(void *ot,void *p0,void *p1)

{
                    // WARNING: Load size is inaccurate
                    // WARNING: Load size is inaccurate
  *(uint *)p1 = *p1 & 0xff000000 | *ot & 0xffffff;
                    // WARNING: Load size is inaccurate
  *(uint *)ot = *ot & 0xff000000 | (uint)p0 & 0xffffff;
  return;
}



void CatPrim(void *p0,void *p1)

{
                    // WARNING: Load size is inaccurate
  *(uint *)p0 = *p0 & 0xff000000 | (uint)p1 & 0xffffff;
  return;
}



void TermPrim(void *p)

{
                    // WARNING: Load size is inaccurate
  *(uint *)p = *p | 0xffffff;
  return;
}



void SetSemiTrans(void *p,int abe)

{
  if (abe != 0) {
    PRIM_OBJ_200();
    return;
  }
  *(byte *)((int)p + 7) = *(byte *)((int)p + 7) & 0xfd;
  return;
}



void PRIM_OBJ_200(int param_1)

{
  undefined in_v0;
  
  *(undefined *)(param_1 + 7) = in_v0;
  return;
}



void SetShadeTex(void *p,int tge)

{
  if (tge != 0) {
    PRIM_OBJ_228();
    return;
  }
  *(byte *)((int)p + 7) = *(byte *)((int)p + 7) & 0xfe;
  return;
}



void PRIM_OBJ_228(int param_1)

{
  undefined in_v0;
  
  *(undefined *)(param_1 + 7) = in_v0;
  return;
}



void SetPolyF3(POLY_F3 *p)

{
  *(undefined *)((int)&p->tag + 3) = 4;
  p->code = ' ';
  return;
}



void SetPolyFT3(POLY_FT3 *p)

{
  *(undefined *)((int)&p->tag + 3) = 7;
  p->code = '$';
  return;
}



void SetPolyG3(POLY_G3 *p)

{
  *(undefined *)((int)&p->tag + 3) = 6;
  p->code = '0';
  return;
}



void SetPolyGT3(POLY_GT3 *p)

{
  *(undefined *)((int)&p->tag + 3) = 9;
  p->code = '4';
  return;
}



void SetPolyF4(POLY_F4 *p)

{
  *(undefined *)((int)&p->tag + 3) = 5;
  p->code = '(';
  return;
}



void SetPolyFT4(POLY_FT4 *p)

{
  *(undefined *)((int)&p->tag + 3) = 9;
  p->code = ',';
  return;
}



void SetPolyG4(POLY_G4 *p)

{
  *(undefined *)((int)&p->tag + 3) = 8;
  p->code = '8';
  return;
}



void SetPolyGT4(POLY_GT4 *p)

{
  *(undefined *)((int)&p->tag + 3) = 0xc;
  p->code = '<';
  return;
}



void SetSprt8(SPRT_8 *p)

{
  *(undefined *)((int)&p->tag + 3) = 3;
  p->code = 't';
  return;
}



void SetSprt16(SPRT_16 *p)

{
  *(undefined *)((int)&p->tag + 3) = 3;
  p->code = '|';
  return;
}



void SetSprt(SPRT *p)

{
  *(undefined *)((int)&p->tag + 3) = 4;
  p->code = 'd';
  return;
}



void SetTile1(TILE_1 *p)

{
  *(undefined *)((int)&p->tag + 3) = 2;
  p->code = 'h';
  return;
}



void SetTile8(TILE_8 *p)

{
  *(undefined *)((int)&p->tag + 3) = 2;
  p->code = 'p';
  return;
}



void SetTile16(TILE_16 *p)

{
  *(undefined *)((int)&p->tag + 3) = 2;
  p->code = 'x';
  return;
}



void SetTile(TILE *p)

{
  *(undefined *)((int)&p->tag + 3) = 3;
  p->code = '`';
  return;
}



void SetLineF2(LINE_F2 *p)

{
  *(undefined *)((int)&p->tag + 3) = 3;
  p->code = '@';
  return;
}



void SetLineG2(LINE_G2 *p)

{
  *(undefined *)((int)&p->tag + 3) = 4;
  p->code = 'P';
  return;
}



void SetLineF3(LINE_F3 *p)

{
  *(undefined *)((int)&p->tag + 3) = 5;
  p->code = 'H';
  p->pad = 0x55555555;
  return;
}



void SetLineG3(LINE_G3 *p)

{
  *(undefined *)((int)&p->tag + 3) = 7;
  p->code = 'X';
  p->pad = 0x55555555;
  return;
}



void SetLineF4(LINE_F4 *p)

{
  *(undefined *)((int)&p->tag + 3) = 6;
  p->code = 'L';
  p->pad = 0x55555555;
  return;
}



void SetLineG4(LINE_G4 *p)

{
  *(undefined *)((int)&p->tag + 3) = 9;
  p->code = '\\';
  p->pad = 0x55555555;
  return;
}



void SetDrawTPage(DR_TPAGE *p,int dfe,int dtd,int tpage)

{
  uint uVar1;
  uint uVar2;
  
  *(undefined *)((int)&p->tag + 3) = 1;
  uVar2 = 0xe1000000;
  if (dtd != 0) {
    uVar2 = 0xe1000200;
  }
  uVar1 = tpage & 0x9ff;
  if (dfe != 0) {
    uVar1 = uVar1 | 0x400;
  }
  p->code[0] = uVar2 | uVar1;
  return;
}



void SetDrawMove(DR_MOVE *p,RECT *rect,int x,int y)

{
  undefined uVar1;
  u_long uVar2;
  
  uVar1 = 5;
  if ((rect->w == 0) || (rect->h == 0)) {
    uVar1 = 0;
  }
  p->code[0] = 0x1000000;
  p->code[1] = 0x80000000;
  *(undefined *)((int)&p->tag + 3) = uVar1;
  uVar2 = *(u_long *)rect;
  p->code[3] = y << 0x10 | x & 0xffffU;
  p->code[2] = uVar2;
  p->code[4] = *(u_long *)&rect->w;
  return;
}



void SetDrawLoad(DR_LOAD *p,RECT *rect)

{
  uint uVar1;
  int iVar2;
  
  uVar1 = ((int)rect->w * (int)rect->h + 1) / 2;
  iVar2 = uVar1 + 4;
  if (0xc < uVar1) {
    iVar2 = 0;
  }
  *(char *)((int)&p->tag + 3) = (char)iVar2;
  p->code[0] = 0xa0000000;
  p->code[1] = *(u_long *)rect;
  p->code[2] = *(u_long *)&rect->w;
  p->code[iVar2 + -1] = 0x1000000;
  return;
}



int MargePrim(void *p0,void *p1)

{
  int iVar1;
  uint uVar2;
  
  uVar2 = (uint)*(byte *)((int)p0 + 3) + (uint)*(byte *)((int)p1 + 3) + 1;
  if (uVar2 < 0x11) {
    *(char *)((int)p0 + 3) = (char)uVar2;
    *(undefined4 *)p1 = 0;
    iVar1 = PRIM_OBJ_52C();
    return iVar1;
  }
  return -1;
}



void PRIM_OBJ_52C(void)

{
  return;
}



void DumpDrawEnv(DRAWENV *env)

{
  ushort uVar1;
  
  (*(code *)PTR_printf_800a00e0)
            ("clip (%3d,%3d)-(%d,%d)\n",(int)(env->clip).x,(int)(env->clip).y,(int)(env->clip).w,
             (int)(env->clip).h);
  (*(code *)PTR_printf_800a00e0)("ofs  (%3d,%3d)\n",(int)env->ofs[0],(int)env->ofs[1]);
  (*(code *)PTR_printf_800a00e0)
            ("tw   (%d,%d)-(%d,%d)\n",(int)(env->tw).x,(int)(env->tw).y,(int)(env->tw).w,
             (int)(env->tw).h);
  (*(code *)PTR_printf_800a00e0)("dtd   %d\n",env->dtd);
  (*(code *)PTR_printf_800a00e0)("dfe   %d\n",env->dfe);
  uVar1 = env->tpage;
  (*(code *)PTR_printf_800a00e0)
            ("tpage: (%d,%d,%d,%d)\n",uVar1 >> 7 & 3,uVar1 >> 5 & 3,(uVar1 & 0x1f) << 6,
             (uVar1 & 0x10) * 0x10 + (uVar1 >> 2 & 0x200));
  return;
}



void DumpDispEnv(DISPENV *env)

{
  (*(code *)PTR_printf_800a00e0)
            ("disp   (%3d,%3d)-(%d,%d)\n",(int)(env->disp).x,(int)(env->disp).y,(int)(env->disp).w,
             (int)(env->disp).h);
  (*(code *)PTR_printf_800a00e0)
            ("screen (%3d,%3d)-(%d,%d)\n",(int)(env->screen).x,(int)(env->screen).y,
             (int)(env->screen).w,(int)(env->screen).h);
  (*(code *)PTR_printf_800a00e0)("isinter %d\n",env->isinter);
  (*(code *)PTR_printf_800a00e0)("isrgb24 %d\n",env->isrgb24);
  return;
}



int ResetGraph(int mode)

{
  int iVar1;
  uint uVar2;
  
  uVar2 = mode & 7;
  if (uVar2 != 3) {
    if (3 < uVar2) {
      if (uVar2 != 5) {
        iVar1 = SYS_OBJ_11C();
        return iVar1;
      }
      goto SYS_OBJ_70;
    }
    if (uVar2 != 0) {
      iVar1 = SYS_OBJ_11C();
      return iVar1;
    }
  }
  printf("ResetGraph:jtb=%08x,env=%08x\n",&PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a009c,
         &DAT_800a00e4);
SYS_OBJ_70:
  memset(&DAT_800a00e4,'\0',0x80);
  ResetCallback();
  GPU_cw((uint)PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc & 0xffffff);
  DAT_800a00e4 = _reset(mode);
  DAT_800a00e5 = 1;
  DAT_800a00e8 = (undefined2)*(undefined4 *)(&DAT_800a0164 + (uint)DAT_800a00e4 * 4);
  DAT_800a00ea = (undefined2)*(undefined4 *)(&DAT_800a0178 + (uint)DAT_800a00e4 * 4);
  memset((uchar *)&DAT_800a00f4,0xff,0x5c);
  memset((uchar *)&DAT_800a0150,0xff,0x14);
  iVar1 = SYS_OBJ_16C();
  return iVar1;
}



void SYS_OBJ_11C(void)

{
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("ResetGraph(%d)...\n");
  }
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x34))(1);
  return;
}



void SYS_OBJ_16C(void)

{
  return;
}



uint SetGraphReverse(undefined4 param_1)

{
  uint uVar1;
  undefined4 uVar2;
  uint uVar3;
  
  uVar3 = (uint)DAT_800a00e7;
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("SetGraphReverse(%d)...\n",param_1);
  }
  DAT_800a00e7 = (byte)param_1;
  uVar1 = (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x28))(8);
  if (DAT_800a00e7 != '\0') {
    uVar3 = SYS_OBJ_210();
    return uVar3;
  }
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(uVar1 | 0x8000000);
  if (DAT_800a00e4 == '\x02') {
    uVar2 = 0x20000504;
    if (DAT_800a00e7 != '\0') {
      uVar2 = 0x20000501;
    }
    (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(uVar2);
  }
  return uVar3;
}



void SYS_OBJ_210(uint param_1)

{
  uint in_v0;
  undefined4 uVar1;
  
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(param_1 | in_v0);
  if (DAT_800a00e4 == '\x02') {
    uVar1 = 0x20000504;
    if (DAT_800a00e7 != '\0') {
      uVar1 = 0x20000501;
    }
    (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(uVar1);
  }
  return;
}



int SetGraphDebug(int level)

{
  uint uVar1;
  
  uVar1 = (uint)DAT_800a00e6;
  DAT_800a00e6 = (byte)level;
  if ((level & 0xffU) != 0) {
    (*(code *)PTR_printf_800a00e0)
              ("SetGraphDebug:level:%d,type:%d reverse:%d\n",level & 0xffU,DAT_800a00e4,DAT_800a00e7
              );
  }
  return uVar1;
}



byte SetGraphQueue(uint param_1)

{
  byte bVar1;
  
  bVar1 = DAT_800a00e5;
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("SetGrapQue(%d)...\n",param_1);
  }
  if (param_1 != DAT_800a00e5) {
    (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x34))(1);
    DAT_800a00e5 = (byte)param_1;
    DMACallback(2,0);
  }
  return bVar1;
}



undefined GetGraphType(void)

{
  return DAT_800a00e4;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int GetGraphDebug(void)

{
  return (uint)DAT_800a00e6;
}



u_long DrawSyncCallback(func *func)

{
  u_long uVar1;
  
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("DrawSyncCallback(%08x)...\n",func);
  }
  uVar1 = (u_long)DAT_800a00f0;
  DAT_800a00f0 = func;
  return uVar1;
}



void SetDispMask(int mask)

{
  undefined4 uVar1;
  
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("SetDispMask(%d)...\n",mask);
  }
  if (mask == 0) {
    memset((uchar *)&DAT_800a0150,0xff,0x14);
  }
  uVar1 = 0x3000001;
  if (mask != 0) {
    uVar1 = 0x3000000;
  }
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(uVar1);
  return;
}



int DrawSync(int mode)

{
  int iVar1;
  
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("DrawSync(%d)...\n",mode);
  }
  iVar1 = (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x3c))(mode);
  return iVar1;
}



void checkRECT(astruct *param_1,short *param_2)

{
  int iVar1;
  int iVar2;
  
  if (DAT_800a00e6 != '\x01') {
    if (DAT_800a00e6 == '\x02') {
      (*(code *)PTR_printf_800a00e0)(&DAT_80012f6c,param_1);
      (*(code *)PTR_printf_800a00e0)
                ("(%d,%d)-(%d,%d)\n",(int)*param_2,(int)param_2[1],(int)param_2[2],(int)param_2[3]);
      return;
    }
    SYS_OBJ_640();
    return;
  }
  iVar2 = (int)param_2[2];
  if ((iVar2 <= DAT_800a00e8) && (iVar2 + *param_2 <= (int)DAT_800a00e8)) {
    iVar1 = (int)param_2[1];
    if (((iVar1 <= DAT_800a00ea) &&
        (((iVar1 + param_2[3] <= (int)DAT_800a00ea && (0 < iVar2)) && (-1 < *param_2)))) &&
       ((-1 < iVar1 && (0 < param_2[3])))) {
      return;
    }
  }
  SYS_OBJ_604("%s:bad RECT");
  return;
}



void SYS_OBJ_604(void)

{
  short *unaff_s0;
  
  (*(code *)PTR_printf_800a00e0)();
  (*(code *)PTR_printf_800a00e0)
            ("(%d,%d)-(%d,%d)\n",(int)*unaff_s0,(int)unaff_s0[1],(int)unaff_s0[2]);
  return;
}



void SYS_OBJ_640(void)

{
  return;
}



int ClearImage(RECT *rect,u_char r,u_char g,u_char b)

{
  int iVar1;
  
  checkRECT((astruct *)"ClearImage",&rect->x);
  iVar1 = (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 8))
                    (*(undefined4 *)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0xc),rect
                     ,8,(uint)b << 0x10 | (uint)g << 8 | (uint)r);
  return iVar1;
}



int ClearImage2(RECT *rect,u_char r,u_char g,u_char b)

{
  int iVar1;
  
  checkRECT((astruct *)"ClearImage",&rect->x);
  iVar1 = (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 8))
                    (*(undefined4 *)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0xc),rect
                     ,8,(uint)b << 0x10 | (uint)g << 8 | 0x80000000 | (uint)r);
  return iVar1;
}



int LoadImage(RECT *rect,u_long *p)

{
  int iVar1;
  
  checkRECT((astruct *)"LoadImage",&rect->x);
  iVar1 = (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 8))
                    (*(undefined4 *)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x20),
                     rect,8,p);
  return iVar1;
}



int StoreImage(RECT *rect,u_long *p)

{
  int iVar1;
  
  checkRECT((astruct *)"StoreImage",&rect->x);
  iVar1 = (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 8))
                    (*(undefined4 *)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x1c),
                     rect,8,p);
  return iVar1;
}



int MoveImage(RECT *rect,int x,int y)

{
  int iVar1;
  
  checkRECT((astruct *)"MoveImage",&rect->x);
  iVar1 = -1;
  if (rect->w != 0) {
    if (rect->h == 0) {
      iVar1 = SYS_OBJ_8F4();
      return iVar1;
    }
    DAT_800a0198 = y << 0x10 | x & 0xffffU;
    DAT_800a0194._0_2_ = rect->x;
    DAT_800a0194._2_2_ = rect->y;
    DAT_800a019c._0_2_ = rect->w;
    DAT_800a019c._2_2_ = rect->h;
    iVar1 = (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 8))
                      (*(undefined4 *)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x18),
                       &DAT_800a018c,0x14,0);
  }
  return iVar1;
}



void SYS_OBJ_8F4(void)

{
  return;
}



u_long * ClearOTag(u_long *ot,int n)

{
  int iVar1;
  
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("ClearOTag(%08x,%d)...\n",ot,n);
  }
  for (iVar1 = n + -1; iVar1 != 0; iVar1 = iVar1 + -1) {
    *(undefined *)((int)ot + 3) = 0;
    *ot = *ot & 0xff000000 | (uint)(ot + 1) & 0xffffff;
    ot = ot + 1;
  }
  *ot = 0xa01a0;
  return ot;
}



u_long * ClearOTagR(u_long *ot,int n)

{
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("ClearOTagR(%08x,%d)...\n",ot,n);
  }
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x2c))(ot,n);
  *ot = 0xa01a0;
  return ot;
}



void DrawPrim(void *p)

{
  undefined uVar1;
  
  uVar1 = *(undefined *)((int)p + 3);
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x3c))(0);
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x14))((int)p + 4,uVar1);
  return;
}



void DrawOTag(u_long *p)

{
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("DrawOTag(%08x)...\n",p);
  }
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 8))
            (*(undefined4 *)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x18),p,0,0);
  return;
}



DRAWENV * PutDrawEnv(DRAWENV *env)

{
  undefined *puVar1;
  undefined4 *puVar2;
  undefined4 uVar3;
  undefined4 uVar4;
  undefined4 uVar5;
  DRAWENV *pDVar6;
  DRAWENV *pDVar7;
  undefined4 *puVar8;
  
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("PutDrawEnv(%08x)...\n",env);
  }
  SetDrawEnv2(&env->dr_env,env);
  puVar1 = PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc;
  (env->dr_env).tag = (env->dr_env).tag | 0xffffff;
  (**(code **)(puVar1 + 8))(*(undefined4 *)(puVar1 + 0x18),&env->dr_env,0x40,0);
  pDVar7 = env;
  puVar2 = &DAT_800a00f4;
  do {
    puVar8 = puVar2;
    pDVar6 = pDVar7;
    uVar3 = *(undefined4 *)&(pDVar6->clip).w;
    uVar4 = *(undefined4 *)pDVar6->ofs;
    uVar5 = *(undefined4 *)&pDVar6->tw;
    *puVar8 = *(undefined4 *)&pDVar6->clip;
    puVar8[1] = uVar3;
    puVar8[2] = uVar4;
    puVar8[3] = uVar5;
    pDVar7 = (DRAWENV *)&(pDVar6->tw).w;
    puVar2 = puVar8 + 4;
  } while (pDVar7 != (DRAWENV *)((env->dr_env).code + 0xc));
  uVar3 = *(undefined4 *)&pDVar6->tpage;
  uVar4 = *(undefined4 *)&pDVar6->isbg;
  puVar8[4] = *(undefined4 *)pDVar7;
  puVar8[5] = uVar3;
  puVar8[6] = uVar4;
  return env;
}



void DrawOTagEnv(u_long *p,DRAWENV *env)

{
  undefined *puVar1;
  undefined4 *puVar2;
  undefined4 uVar3;
  undefined4 uVar4;
  undefined4 uVar5;
  DRAWENV *pDVar6;
  DRAWENV *pDVar7;
  undefined4 *puVar8;
  
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("DrawOTagEnv(%08x,&08x)...\n",p,env);
  }
  SetDrawEnv2(&env->dr_env,env);
  puVar1 = PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc;
  (env->dr_env).tag = (env->dr_env).tag & 0xff000000 | (uint)p & 0xffffff;
  (**(code **)(puVar1 + 8))(*(undefined4 *)(puVar1 + 0x18),&env->dr_env,0x40,0);
  pDVar7 = env;
  puVar2 = &DAT_800a00f4;
  do {
    puVar8 = puVar2;
    pDVar6 = pDVar7;
    uVar3 = *(undefined4 *)&(pDVar6->clip).w;
    uVar4 = *(undefined4 *)pDVar6->ofs;
    uVar5 = *(undefined4 *)&pDVar6->tw;
    *puVar8 = *(undefined4 *)&pDVar6->clip;
    puVar8[1] = uVar3;
    puVar8[2] = uVar4;
    puVar8[3] = uVar5;
    pDVar7 = (DRAWENV *)&(pDVar6->tw).w;
    puVar2 = puVar8 + 4;
  } while (pDVar7 != (DRAWENV *)((env->dr_env).code + 0xc));
  uVar3 = *(undefined4 *)&pDVar6->tpage;
  uVar4 = *(undefined4 *)&pDVar6->isbg;
  puVar8[4] = *(undefined4 *)pDVar7;
  puVar8[5] = uVar3;
  puVar8[6] = uVar4;
  return;
}



DRAWENV * GetDrawEnv(DRAWENV *env)

{
  memcpy((uchar *)env,(uchar *)&DAT_800a00f4,0x5c);
  return env;
}



DISPENV * PutDispEnv(DISPENV *env)

{
  short sVar1;
  bool bVar2;
  u_char uVar3;
  DISPENV *pDVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  uint uVar9;
  uint uVar10;
  uint uVar11;
  uint uVar12;
  int iVar13;
  uint uVar14;
  uint uVar15;
  
  uVar15 = 0x8000000;
  if (1 < DAT_800a00e6) {
    (*(code *)PTR_printf_800a00e0)("PutDispEnv(%08x)...\n",env);
  }
  if (DAT_800a00e4 - 1 < 2) {
    get_dx(env);
    pDVar4 = (DISPENV *)SYS_OBJ_E34();
    return pDVar4;
  }
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            (((ushort)(env->disp).y & 0x3ff) << 10 | (ushort)(env->disp).x & 0x3ff | 0x5000000);
  if ((((DAT_800a0158 == (env->screen).x) && (DAT_800a015a == (env->screen).y)) &&
      (DAT_800a015c == (env->screen).w)) && (DAT_800a015e == (env->screen).h)) goto SYS_OBJ_1090;
  uVar3 = FUN_800889cc();
  sVar1 = (env->screen).x;
  env->pad0 = uVar3;
  iVar5 = sVar1 * 10;
  iVar7 = (int)(env->screen).y;
  iVar6 = iVar5 + 0x260;
  if (uVar3 != '\0') {
    pDVar4 = (DISPENV *)SYS_OBJ_F00();
    return pDVar4;
  }
  iVar13 = iVar7 + 0x10;
  iVar8 = (int)(env->screen).w;
  if (iVar8 != 0) {
    pDVar4 = (DISPENV *)SYS_OBJ_F24(iVar7,iVar8,iVar6 + iVar8 * 10);
    return pDVar4;
  }
  uVar12 = iVar5 + 0xc60;
  iVar5 = (int)(env->screen).h;
  uVar14 = iVar13 + iVar5;
  if (iVar5 == 0) {
    uVar14 = iVar7 + 0x100;
  }
  if (iVar6 < 500) {
    uVar9 = 500;
  }
  else {
    uVar9 = 0xcda;
    if (iVar6 < 0xcdb) {
      pDVar4 = (DISPENV *)SYS_OBJ_F58(iVar7,iVar6);
      return pDVar4;
    }
  }
  uVar10 = uVar9 + 0x50;
  if (((int)(uVar9 + 0x50) <= (int)uVar12) && (uVar10 = 0xcda, (int)uVar12 < 0xcdb)) {
    uVar10 = uVar12;
  }
  if (iVar13 < 0x10) {
    uVar12 = 0x10;
  }
  else {
    if (env->pad0 == '\0') {
      if (iVar13 < 0x101) {
        pDVar4 = (DISPENV *)SYS_OBJ_FD8(iVar13);
        return pDVar4;
      }
    }
    else if (iVar13 < 0x137) {
      pDVar4 = (DISPENV *)SYS_OBJ_FD8(iVar13);
      return pDVar4;
    }
    uVar12 = 0x100;
    if (env->pad0 != '\0') {
      pDVar4 = (DISPENV *)SYS_OBJ_FD8(0x136);
      return pDVar4;
    }
  }
  uVar11 = uVar12 + 2;
  if ((int)(uVar12 + 2) <= (int)uVar14) {
    if (env->pad0 == '\0') {
      uVar11 = uVar14;
      if ((int)uVar14 < 0x103) goto code_r0x8008ae68;
    }
    else if ((int)uVar14 < 0x139) {
      pDVar4 = (DISPENV *)SYS_OBJ_1034(uVar12,uVar14);
      return pDVar4;
    }
    uVar11 = 0x102;
    if (env->pad0 != '\0') {
      pDVar4 = (DISPENV *)SYS_OBJ_1034(uVar12,0x138);
      return pDVar4;
    }
  }
code_r0x8008ae68:
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar10 & 0xfff) << 0xc | uVar9 | 0x6000000);
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar11 & 0x3ff) << 10 | uVar12 | 0x7000000);
SYS_OBJ_1090:
  iVar5._0_1_ = env->isinter;
  iVar5._1_1_ = env->isrgb24;
  iVar5._2_1_ = env->pad0;
  iVar5._3_1_ = env->pad1;
  if (((DAT_800a0160 != iVar5) || (DAT_800a0150 != (env->disp).x)) ||
     ((DAT_800a0152 != (env->disp).y ||
      ((DAT_800a0154 != (env->disp).w || (DAT_800a0156 != (env->disp).h)))))) {
    uVar3 = FUN_800889cc();
    env->pad0 = uVar3;
    if (uVar3 == '\x01') {
      uVar15 = 0x8000008;
    }
    if (env->isrgb24 != '\0') {
      uVar15 = uVar15 | 0x10;
    }
    if (env->isinter != '\0') {
      uVar15 = uVar15 | 0x20;
    }
    if (DAT_800a00e7 != '\0') {
      uVar15 = uVar15 | 0x80;
    }
    sVar1 = (env->disp).w;
    if (0x118 < sVar1) {
      if (sVar1 < 0x161) {
        pDVar4 = (DISPENV *)SYS_OBJ_11C0();
        return pDVar4;
      }
      if (sVar1 < 0x191) {
        pDVar4 = (DISPENV *)SYS_OBJ_11C0();
        return pDVar4;
      }
      if (sVar1 < 0x231) {
        pDVar4 = (DISPENV *)SYS_OBJ_11C0();
        return pDVar4;
      }
      uVar15 = uVar15 | 3;
    }
    sVar1 = (env->disp).h;
    bVar2 = sVar1 < 0x121;
    if (env->pad0 == '\0') {
      bVar2 = sVar1 < 0x101;
    }
    if (!bVar2) {
      uVar15 = uVar15 | 0x24;
    }
    (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(uVar15);
  }
  memcpy((uchar *)&DAT_800a0150,(uchar *)env,0x14);
  return env;
}



void SYS_OBJ_E34(void)

{
  short sVar1;
  bool bVar2;
  char cVar3;
  uint in_v0;
  uint in_v1;
  int iVar4;
  int iVar5;
  int iVar6;
  uint uVar7;
  uint uVar8;
  uint uVar9;
  uint uVar10;
  short *unaff_s0;
  int iVar11;
  uint uVar12;
  uint unaff_s3;
  
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(in_v0 | in_v1);
  if ((((DAT_800a0158 == unaff_s0[4]) && (DAT_800a015a == unaff_s0[5])) &&
      (DAT_800a015c == unaff_s0[6])) && (DAT_800a015e == unaff_s0[7])) goto SYS_OBJ_1090;
  cVar3 = FUN_800889cc();
  *(char *)(unaff_s0 + 9) = cVar3;
  iVar5 = (int)unaff_s0[5];
  iVar4 = unaff_s0[4] * 10 + 0x260;
  if (cVar3 != '\0') {
    SYS_OBJ_F00();
    return;
  }
  iVar11 = iVar5 + 0x10;
  iVar6 = (int)unaff_s0[6];
  if (iVar6 != 0) {
    SYS_OBJ_F24(iVar5,iVar6,iVar4 + iVar6 * 10);
    return;
  }
  uVar10 = unaff_s0[4] * 10 + 0xc60;
  uVar12 = iVar11 + unaff_s0[7];
  if (unaff_s0[7] == 0) {
    uVar12 = iVar5 + 0x100;
  }
  if (iVar4 < 500) {
    uVar7 = 500;
  }
  else {
    uVar7 = 0xcda;
    if (iVar4 < 0xcdb) {
      SYS_OBJ_F58(iVar5,iVar4);
      return;
    }
  }
  uVar8 = uVar7 + 0x50;
  if (((int)(uVar7 + 0x50) <= (int)uVar10) && (uVar8 = 0xcda, (int)uVar10 < 0xcdb)) {
    uVar8 = uVar10;
  }
  if (iVar11 < 0x10) {
    uVar10 = 0x10;
  }
  else {
    if (*(char *)(unaff_s0 + 9) == '\0') {
      if (iVar11 < 0x101) {
        SYS_OBJ_FD8(iVar11);
        return;
      }
    }
    else if (iVar11 < 0x137) {
      SYS_OBJ_FD8(iVar11);
      return;
    }
    uVar10 = 0x100;
    if (*(char *)(unaff_s0 + 9) != '\0') {
      SYS_OBJ_FD8(0x136);
      return;
    }
  }
  uVar9 = uVar10 + 2;
  if ((int)(uVar10 + 2) <= (int)uVar12) {
    if (*(char *)(unaff_s0 + 9) == '\0') {
      uVar9 = uVar12;
      if ((int)uVar12 < 0x103) goto code_r0x8008ae68;
    }
    else if ((int)uVar12 < 0x139) {
      SYS_OBJ_1034(uVar10,uVar12);
      return;
    }
    uVar9 = 0x102;
    if (*(char *)(unaff_s0 + 9) != '\0') {
      SYS_OBJ_1034(uVar10,0x138);
      return;
    }
  }
code_r0x8008ae68:
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar8 & 0xfff) << 0xc | uVar7 | 0x6000000);
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar9 & 0x3ff) << 10 | uVar10 | 0x7000000);
SYS_OBJ_1090:
  if (((DAT_800a0160 != *(int *)(unaff_s0 + 8)) || (DAT_800a0150 != *unaff_s0)) ||
     ((DAT_800a0152 != unaff_s0[1] ||
      ((DAT_800a0154 != unaff_s0[2] || (DAT_800a0156 != unaff_s0[3])))))) {
    cVar3 = FUN_800889cc();
    *(char *)(unaff_s0 + 9) = cVar3;
    if (cVar3 == '\x01') {
      unaff_s3 = unaff_s3 | 8;
    }
    if (*(char *)((int)unaff_s0 + 0x11) != '\0') {
      unaff_s3 = unaff_s3 | 0x10;
    }
    if (*(char *)(unaff_s0 + 8) != '\0') {
      unaff_s3 = unaff_s3 | 0x20;
    }
    if (DAT_800a00e7 != '\0') {
      unaff_s3 = unaff_s3 | 0x80;
    }
    sVar1 = unaff_s0[2];
    if (0x118 < sVar1) {
      if (sVar1 < 0x161) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x191) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x231) {
        SYS_OBJ_11C0();
        return;
      }
      unaff_s3 = unaff_s3 | 3;
    }
    bVar2 = unaff_s0[3] < 0x121;
    if (*(char *)(unaff_s0 + 9) == '\0') {
      bVar2 = unaff_s0[3] < 0x101;
    }
    if (!bVar2) {
      unaff_s3 = unaff_s3 | 0x24;
    }
    (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(unaff_s3);
  }
  memcpy((uchar *)&DAT_800a0150,(uchar *)unaff_s0,0x14);
  return;
}



void SYS_OBJ_F00(undefined4 param_1)

{
  short sVar1;
  bool bVar2;
  char cVar3;
  int in_v1;
  int iVar4;
  uint uVar5;
  uint uVar6;
  uint uVar7;
  uint uVar8;
  short *unaff_s0;
  int unaff_s1;
  uint uVar9;
  uint unaff_s3;
  
  iVar4 = (int)unaff_s0[6];
  if (iVar4 != 0) {
    SYS_OBJ_F24(param_1,iVar4,in_v1 + iVar4 * 10);
    return;
  }
  uVar8 = in_v1 + 0xa00;
  uVar9 = unaff_s1 + unaff_s0[7];
  if (unaff_s0[7] == 0) {
    uVar9 = unaff_s1 + 0xf0;
  }
  if (in_v1 < 500) {
    uVar5 = 500;
  }
  else {
    uVar5 = 0xcda;
    if (in_v1 < 0xcdb) {
      SYS_OBJ_F58();
      return;
    }
  }
  uVar6 = uVar5 + 0x50;
  if (((int)(uVar5 + 0x50) <= (int)uVar8) && (uVar6 = 0xcda, (int)uVar8 < 0xcdb)) {
    uVar6 = uVar8;
  }
  if (unaff_s1 < 0x10) {
    uVar8 = 0x10;
  }
  else {
    if (*(char *)(unaff_s0 + 9) == '\0') {
      if (unaff_s1 < 0x101) {
        SYS_OBJ_FD8();
        return;
      }
    }
    else if (unaff_s1 < 0x137) {
      SYS_OBJ_FD8();
      return;
    }
    uVar8 = 0x100;
    if (*(char *)(unaff_s0 + 9) != '\0') {
      SYS_OBJ_FD8(0x136);
      return;
    }
  }
  uVar7 = uVar8 + 2;
  if ((int)(uVar8 + 2) <= (int)uVar9) {
    if (*(char *)(unaff_s0 + 9) == '\0') {
      uVar7 = uVar9;
      if ((int)uVar9 < 0x103) goto code_r0x8008ae68;
    }
    else if ((int)uVar9 < 0x139) {
      SYS_OBJ_1034(uVar8,uVar9);
      return;
    }
    uVar7 = 0x102;
    if (*(char *)(unaff_s0 + 9) != '\0') {
      SYS_OBJ_1034(uVar8,0x138);
      return;
    }
  }
code_r0x8008ae68:
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar6 & 0xfff) << 0xc | uVar5 | 0x6000000);
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar7 & 0x3ff) << 10 | uVar8 | 0x7000000);
  if ((((DAT_800a0160 != *(int *)(unaff_s0 + 8)) || (DAT_800a0150 != *unaff_s0)) ||
      (DAT_800a0152 != unaff_s0[1])) ||
     ((DAT_800a0154 != unaff_s0[2] || (DAT_800a0156 != unaff_s0[3])))) {
    cVar3 = FUN_800889cc();
    *(char *)(unaff_s0 + 9) = cVar3;
    if (cVar3 == '\x01') {
      unaff_s3 = unaff_s3 | 8;
    }
    if (*(char *)((int)unaff_s0 + 0x11) != '\0') {
      unaff_s3 = unaff_s3 | 0x10;
    }
    if (*(char *)(unaff_s0 + 8) != '\0') {
      unaff_s3 = unaff_s3 | 0x20;
    }
    if (DAT_800a00e7 != '\0') {
      unaff_s3 = unaff_s3 | 0x80;
    }
    sVar1 = unaff_s0[2];
    if (0x118 < sVar1) {
      if (sVar1 < 0x161) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x191) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x231) {
        SYS_OBJ_11C0();
        return;
      }
      unaff_s3 = unaff_s3 | 3;
    }
    bVar2 = unaff_s0[3] < 0x121;
    if (*(char *)(unaff_s0 + 9) == '\0') {
      bVar2 = unaff_s0[3] < 0x101;
    }
    if (!bVar2) {
      unaff_s3 = unaff_s3 | 0x24;
    }
    (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(unaff_s3);
  }
  memcpy((uchar *)&DAT_800a0150,(uchar *)unaff_s0,0x14);
  return;
}



void SYS_OBJ_F24(undefined4 param_1,undefined4 param_2,uint param_3)

{
  short sVar1;
  bool bVar2;
  char cVar3;
  int in_v1;
  uint uVar4;
  uint uVar5;
  uint uVar6;
  uint uVar7;
  short *unaff_s0;
  int unaff_s1;
  uint uVar8;
  uint unaff_s3;
  
  uVar8 = unaff_s1 + unaff_s0[7];
  if (unaff_s0[7] == 0) {
    uVar8 = unaff_s1 + 0xf0;
  }
  if (in_v1 < 500) {
    uVar5 = 500;
  }
  else {
    uVar5 = 0xcda;
    if (in_v1 < 0xcdb) {
      SYS_OBJ_F58();
      return;
    }
  }
  uVar6 = uVar5 + 0x50;
  if (((int)(uVar5 + 0x50) <= (int)param_3) && (uVar6 = 0xcda, (int)param_3 < 0xcdb)) {
    uVar6 = param_3;
  }
  if (unaff_s1 < 0x10) {
    uVar4 = 0x10;
  }
  else {
    if (*(char *)(unaff_s0 + 9) == '\0') {
      if (unaff_s1 < 0x101) {
        SYS_OBJ_FD8();
        return;
      }
    }
    else if (unaff_s1 < 0x137) {
      SYS_OBJ_FD8();
      return;
    }
    uVar4 = 0x100;
    if (*(char *)(unaff_s0 + 9) != '\0') {
      SYS_OBJ_FD8(0x136);
      return;
    }
  }
  uVar7 = uVar4 + 2;
  if ((int)(uVar4 + 2) <= (int)uVar8) {
    if (*(char *)(unaff_s0 + 9) == '\0') {
      uVar7 = uVar8;
      if ((int)uVar8 < 0x103) goto code_r0x8008ae68;
    }
    else if ((int)uVar8 < 0x139) {
      SYS_OBJ_1034(uVar4,uVar8);
      return;
    }
    uVar7 = 0x102;
    if (*(char *)(unaff_s0 + 9) != '\0') {
      SYS_OBJ_1034(uVar4,0x138);
      return;
    }
  }
code_r0x8008ae68:
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar6 & 0xfff) << 0xc | uVar5 | 0x6000000);
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar7 & 0x3ff) << 10 | uVar4 | 0x7000000);
  if ((((DAT_800a0160 != *(int *)(unaff_s0 + 8)) || (DAT_800a0150 != *unaff_s0)) ||
      (DAT_800a0152 != unaff_s0[1])) ||
     ((DAT_800a0154 != unaff_s0[2] || (DAT_800a0156 != unaff_s0[3])))) {
    cVar3 = FUN_800889cc();
    *(char *)(unaff_s0 + 9) = cVar3;
    if (cVar3 == '\x01') {
      unaff_s3 = unaff_s3 | 8;
    }
    if (*(char *)((int)unaff_s0 + 0x11) != '\0') {
      unaff_s3 = unaff_s3 | 0x10;
    }
    if (*(char *)(unaff_s0 + 8) != '\0') {
      unaff_s3 = unaff_s3 | 0x20;
    }
    if (DAT_800a00e7 != '\0') {
      unaff_s3 = unaff_s3 | 0x80;
    }
    sVar1 = unaff_s0[2];
    if (0x118 < sVar1) {
      if (sVar1 < 0x161) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x191) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x231) {
        SYS_OBJ_11C0();
        return;
      }
      unaff_s3 = unaff_s3 | 3;
    }
    bVar2 = unaff_s0[3] < 0x121;
    if (*(char *)(unaff_s0 + 9) == '\0') {
      bVar2 = unaff_s0[3] < 0x101;
    }
    if (!bVar2) {
      unaff_s3 = unaff_s3 | 0x24;
    }
    (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(unaff_s3);
  }
  memcpy((uchar *)&DAT_800a0150,(uchar *)unaff_s0,0x14);
  return;
}



void SYS_OBJ_F58(undefined4 param_1,uint param_2,uint param_3)

{
  short sVar1;
  bool bVar2;
  char cVar3;
  uint uVar4;
  uint uVar5;
  uint uVar6;
  short *unaff_s0;
  int unaff_s1;
  uint unaff_s2;
  uint unaff_s3;
  
  uVar5 = param_2 + 0x50;
  if (((int)(param_2 + 0x50) <= (int)param_3) && (uVar5 = 0xcda, (int)param_3 < 0xcdb)) {
    uVar5 = param_3;
  }
  if (unaff_s1 < 0x10) {
    uVar4 = 0x10;
  }
  else {
    if (*(char *)(unaff_s0 + 9) == '\0') {
      if (unaff_s1 < 0x101) {
        SYS_OBJ_FD8();
        return;
      }
    }
    else if (unaff_s1 < 0x137) {
      SYS_OBJ_FD8();
      return;
    }
    uVar4 = 0x100;
    if (*(char *)(unaff_s0 + 9) != '\0') {
      SYS_OBJ_FD8(0x136);
      return;
    }
  }
  uVar6 = uVar4 + 2;
  if ((int)(uVar4 + 2) <= (int)unaff_s2) {
    if (*(char *)(unaff_s0 + 9) == '\0') {
      uVar6 = unaff_s2;
      if ((int)unaff_s2 < 0x103) goto code_r0x8008ae68;
    }
    else if ((int)unaff_s2 < 0x139) {
      SYS_OBJ_1034();
      return;
    }
    uVar6 = 0x102;
    if (*(char *)(unaff_s0 + 9) != '\0') {
      SYS_OBJ_1034(uVar4,0x138);
      return;
    }
  }
code_r0x8008ae68:
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar5 & 0xfff) << 0xc | param_2 & 0xfff | 0x6000000);
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar6 & 0x3ff) << 10 | uVar4 | 0x7000000);
  if ((((DAT_800a0160 != *(int *)(unaff_s0 + 8)) || (DAT_800a0150 != *unaff_s0)) ||
      (DAT_800a0152 != unaff_s0[1])) ||
     ((DAT_800a0154 != unaff_s0[2] || (DAT_800a0156 != unaff_s0[3])))) {
    cVar3 = FUN_800889cc();
    *(char *)(unaff_s0 + 9) = cVar3;
    if (cVar3 == '\x01') {
      unaff_s3 = unaff_s3 | 8;
    }
    if (*(char *)((int)unaff_s0 + 0x11) != '\0') {
      unaff_s3 = unaff_s3 | 0x10;
    }
    if (*(char *)(unaff_s0 + 8) != '\0') {
      unaff_s3 = unaff_s3 | 0x20;
    }
    if (DAT_800a00e7 != '\0') {
      unaff_s3 = unaff_s3 | 0x80;
    }
    sVar1 = unaff_s0[2];
    if (0x118 < sVar1) {
      if (sVar1 < 0x161) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x191) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x231) {
        SYS_OBJ_11C0();
        return;
      }
      unaff_s3 = unaff_s3 | 3;
    }
    bVar2 = unaff_s0[3] < 0x121;
    if (*(char *)(unaff_s0 + 9) == '\0') {
      bVar2 = unaff_s0[3] < 0x101;
    }
    if (!bVar2) {
      unaff_s3 = unaff_s3 | 0x24;
    }
    (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(unaff_s3);
  }
  memcpy((uchar *)&DAT_800a0150,(uchar *)unaff_s0,0x14);
  return;
}



void SYS_OBJ_FD8(uint param_1,undefined4 param_2,uint param_3)

{
  short sVar1;
  bool bVar2;
  char cVar3;
  uint in_v1;
  uint uVar4;
  short *unaff_s0;
  uint unaff_s2;
  uint unaff_s3;
  
  uVar4 = param_1 + 2;
  if ((int)(param_1 + 2) <= (int)unaff_s2) {
    if (*(char *)(unaff_s0 + 9) == '\0') {
      uVar4 = unaff_s2;
      if ((int)unaff_s2 < 0x103) goto code_r0x8008ae68;
    }
    else if ((int)unaff_s2 < 0x139) {
      SYS_OBJ_1034();
      return;
    }
    uVar4 = 0x102;
    if (*(char *)(unaff_s0 + 9) != '\0') {
      SYS_OBJ_1034(param_1,0x138);
      return;
    }
  }
code_r0x8008ae68:
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((param_3 & 0xfff) << 0xc | in_v1 & 0xfff | 0x6000000);
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((uVar4 & 0x3ff) << 10 | param_1 & 0x3ff | 0x7000000);
  if ((((DAT_800a0160 != *(int *)(unaff_s0 + 8)) || (DAT_800a0150 != *unaff_s0)) ||
      (DAT_800a0152 != unaff_s0[1])) ||
     ((DAT_800a0154 != unaff_s0[2] || (DAT_800a0156 != unaff_s0[3])))) {
    cVar3 = FUN_800889cc();
    *(char *)(unaff_s0 + 9) = cVar3;
    if (cVar3 == '\x01') {
      unaff_s3 = unaff_s3 | 8;
    }
    if (*(char *)((int)unaff_s0 + 0x11) != '\0') {
      unaff_s3 = unaff_s3 | 0x10;
    }
    if (*(char *)(unaff_s0 + 8) != '\0') {
      unaff_s3 = unaff_s3 | 0x20;
    }
    if (DAT_800a00e7 != '\0') {
      unaff_s3 = unaff_s3 | 0x80;
    }
    sVar1 = unaff_s0[2];
    if (0x118 < sVar1) {
      if (sVar1 < 0x161) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x191) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x231) {
        SYS_OBJ_11C0();
        return;
      }
      unaff_s3 = unaff_s3 | 3;
    }
    bVar2 = unaff_s0[3] < 0x121;
    if (*(char *)(unaff_s0 + 9) == '\0') {
      bVar2 = unaff_s0[3] < 0x101;
    }
    if (!bVar2) {
      unaff_s3 = unaff_s3 | 0x24;
    }
    (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(unaff_s3);
  }
  memcpy((uchar *)&DAT_800a0150,(uchar *)unaff_s0,0x14);
  return;
}



void SYS_OBJ_1034(undefined4 param_1,uint param_2,uint param_3)

{
  short sVar1;
  bool bVar2;
  char cVar3;
  uint in_v1;
  short *unaff_s0;
  uint unaff_s1;
  uint unaff_s3;
  
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((param_3 & 0xfff) << 0xc | in_v1 & 0xfff | 0x6000000);
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))
            ((param_2 & 0x3ff) << 10 | unaff_s1 & 0x3ff | 0x7000000);
  if ((((DAT_800a0160 != *(int *)(unaff_s0 + 8)) || (DAT_800a0150 != *unaff_s0)) ||
      (DAT_800a0152 != unaff_s0[1])) ||
     ((DAT_800a0154 != unaff_s0[2] || (DAT_800a0156 != unaff_s0[3])))) {
    cVar3 = FUN_800889cc();
    *(char *)(unaff_s0 + 9) = cVar3;
    if (cVar3 == '\x01') {
      unaff_s3 = unaff_s3 | 8;
    }
    if (*(char *)((int)unaff_s0 + 0x11) != '\0') {
      unaff_s3 = unaff_s3 | 0x10;
    }
    if (*(char *)(unaff_s0 + 8) != '\0') {
      unaff_s3 = unaff_s3 | 0x20;
    }
    if (DAT_800a00e7 != '\0') {
      unaff_s3 = unaff_s3 | 0x80;
    }
    sVar1 = unaff_s0[2];
    if (0x118 < sVar1) {
      if (sVar1 < 0x161) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x191) {
        SYS_OBJ_11C0();
        return;
      }
      if (sVar1 < 0x231) {
        SYS_OBJ_11C0();
        return;
      }
      unaff_s3 = unaff_s3 | 3;
    }
    bVar2 = unaff_s0[3] < 0x121;
    if (*(char *)(unaff_s0 + 9) == '\0') {
      bVar2 = unaff_s0[3] < 0x101;
    }
    if (!bVar2) {
      unaff_s3 = unaff_s3 | 0x24;
    }
    (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(unaff_s3);
  }
  memcpy((uchar *)&DAT_800a0150,(uchar *)unaff_s0,0x14);
  return;
}



void SYS_OBJ_11C0(void)

{
  bool bVar1;
  uchar *unaff_s0;
  uint unaff_s3;
  
  bVar1 = *(short *)(unaff_s0 + 6) < 0x121;
  if (unaff_s0[0x12] == '\0') {
    bVar1 = *(short *)(unaff_s0 + 6) < 0x101;
  }
  if (!bVar1) {
    unaff_s3 = unaff_s3 | 0x24;
  }
  (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x10))(unaff_s3);
  memcpy((uchar *)&DAT_800a0150,unaff_s0,0x14);
  return;
}



DISPENV * GetDispEnv(DISPENV *env)

{
  memcpy((uchar *)env,(uchar *)&DAT_800a0150,0x14);
  return env;
}



// WARNING: Unknown calling convention -- yet parameter storage is locked

int GetODE(void)

{
  uint uVar1;
  
  uVar1 = (**(code **)(PTR_PTR_s__Id__sys_c_v_1_129_1996_12_25_03_800a00dc + 0x38))();
  return uVar1 >> 0x1f;
}



void SetTexWindow(DR_TWIN *p,RECT *tw)

{
  u_long uVar1;
  
  *(undefined *)((int)&p->tag + 3) = 2;
  uVar1 = get_tw(tw);
  p->code[0] = uVar1;
  p->code[1] = 0;
  return;
}



void SetDrawArea(DR_AREA *p,RECT *r)

{
  u_long uVar1;
  
  *(undefined *)((int)&p->tag + 3) = 2;
  uVar1 = get_cs((int)r->x,(int)r->y);
  p->code[0] = uVar1;
  uVar1 = get_ce((int)(((uint)(ushort)r->x + (uint)(ushort)r->w + -1) * 0x10000) >> 0x10,
                 (int)(((uint)(ushort)r->y + (uint)(ushort)r->h + -1) * 0x10000) >> 0x10);
  p->code[1] = uVar1;
  return;
}



void SetDrawOffset(DR_OFFSET *p,u_short *ofs)

{
  u_long uVar1;
  
  *(undefined *)((int)&p->tag + 3) = 2;
  uVar1 = get_ofs((int)(short)*ofs,(int)(short)ofs[1]);
  p->code[0] = uVar1;
  p->code[1] = 0;
  return;
}



void SetPriority(int param_1,int param_2,int param_3)

{
  uint uVar1;
  
  *(undefined *)(param_1 + 3) = 2;
  uVar1 = 0xe6000000;
  if (param_2 != 0) {
    uVar1 = 0xe6000002;
  }
  if (param_3 != 0) {
    uVar1 = uVar1 | 1;
  }
  *(uint *)(param_1 + 4) = uVar1;
  *(undefined4 *)(param_1 + 8) = 0;
  return;
}



void SetDrawMode(DR_MODE *p,int dfe,int dtd,int tpage,RECT *tw)

{
  u_long uVar1;
  
  *(undefined *)((int)&p->tag + 3) = 2;
  uVar1 = get_mode(dfe,dtd,tpage & 0xffff);
  p->code[0] = uVar1;
  uVar1 = get_tw(tw);
  p->code[1] = uVar1;
  return;
}



void SetDrawEnv(DR_ENV *dr_env,DRAWENV *env)

{
  short sVar1;
  short sVar2;
  u_long uVar3;
  int iVar4;
  char cVar5;
  u_long local_30;
  u_long local_2c;
  
  uVar3 = get_cs((int)(env->clip).x,(int)(env->clip).y);
  dr_env->code[0] = uVar3;
  uVar3 = get_ce((int)(((uint)(ushort)(env->clip).w + (uint)(ushort)(env->clip).x + -1) * 0x10000)
                 >> 0x10,(int)(((uint)(ushort)(env->clip).y + (uint)(ushort)(env->clip).h + -1) *
                              0x10000) >> 0x10);
  dr_env->code[1] = uVar3;
  uVar3 = get_ofs((int)env->ofs[0],(int)env->ofs[1]);
  dr_env->code[2] = uVar3;
  uVar3 = get_mode(env->dfe,env->dtd,env->tpage);
  dr_env->code[3] = uVar3;
  uVar3 = get_tw(&env->tw);
  dr_env->code[4] = uVar3;
  dr_env->code[5] = 0xe6000000;
  cVar5 = '\a';
  if (env->isbg != '\0') {
    sVar2 = (env->clip).w;
    sVar1 = 0;
    if ((-1 < sVar2) && (sVar1 = DAT_800a00e8 + -1, (int)sVar2 <= DAT_800a00e8 + -1)) {
      sVar1 = sVar2;
    }
    iVar4 = (int)(env->clip).h;
    if (iVar4 < 0) {
      sVar2 = 0;
    }
    else {
      sVar2 = DAT_800a00ea + -1;
      if (iVar4 <= DAT_800a00ea + -1) {
        SYS_OBJ_1578(iVar4);
        return;
      }
    }
    local_2c = CONCAT22(sVar2,sVar1);
    local_30 = CONCAT22((env->clip).y - env->ofs[1],(env->clip).x - env->ofs[0]);
    dr_env->code[6] = (uint)env->b0 << 0x10 | (uint)env->g0 << 8 | 0x60000000 | (uint)env->r0;
    dr_env->code[7] = local_30;
    dr_env->code[8] = local_2c;
    cVar5 = '\n';
  }
  *(char *)((int)&dr_env->tag + 3) = cVar5 + -1;
  return;
}



void SYS_OBJ_1578(void)

{
  undefined2 in_v0;
  int in_a3;
  int unaff_s0;
  int unaff_s1;
  short param_5;
  short sStack00000012;
  undefined2 param_6;
  
  _param_6 = CONCAT22(in_v0,param_6);
  _param_5 = CONCAT22(sStack00000012 - *(short *)(unaff_s0 + 10),param_5 - *(short *)(unaff_s0 + 8))
  ;
  *(uint *)(in_a3 * 4 + unaff_s1) =
       (uint)*(byte *)(unaff_s0 + 0x1b) << 0x10 | (uint)*(byte *)(unaff_s0 + 0x1a) << 8 | 0x60000000
       | (uint)*(byte *)(unaff_s0 + 0x19);
  *(undefined4 *)((in_a3 + 1) * 4 + unaff_s1) = _param_5;
  *(undefined4 *)((in_a3 + 2) * 4 + unaff_s1) = _param_6;
  *(char *)(unaff_s1 + 3) = (char)in_a3 + '\x02';
  return;
}



void SetDrawEnv2(int param_1,undefined4 *param_2)

{
  ushort uVar1;
  ushort uVar2;
  short sVar3;
  undefined4 uVar4;
  int iVar5;
  char cVar6;
  undefined4 local_30;
  undefined4 local_2c;
  
  uVar4 = get_cs((int)(short)*(ushort *)param_2,(int)(short)*(ushort *)((int)param_2 + 2));
  *(undefined4 *)(param_1 + 4) = uVar4;
  uVar4 = get_ce((int)(((uint)*(ushort *)(param_2 + 1) + (uint)*(ushort *)param_2 + -1) * 0x10000)
                 >> 0x10,(int)(((uint)*(ushort *)((int)param_2 + 2) +
                                (uint)*(ushort *)((int)param_2 + 6) + -1) * 0x10000) >> 0x10);
  *(undefined4 *)(param_1 + 8) = uVar4;
  uVar4 = get_ofs((int)(short)*(ushort *)(param_2 + 2),(int)(short)*(ushort *)((int)param_2 + 10));
  *(undefined4 *)(param_1 + 0xc) = uVar4;
  uVar4 = get_mode(*(undefined *)((int)param_2 + 0x17),*(undefined *)((int)param_2 + 0x16),
                   *(ushort *)(param_2 + 5));
  *(undefined4 *)(param_1 + 0x10) = uVar4;
  uVar4 = get_tw(param_2 + 3);
  *(undefined4 *)(param_1 + 0x14) = uVar4;
  *(undefined4 *)(param_1 + 0x18) = 0xe6000000;
  cVar6 = '\a';
  if (*(char *)(param_2 + 6) != '\0') {
    uVar4 = *param_2;
    uVar1 = *(ushort *)(param_2 + 1);
    uVar2 = 0;
    if ((-1 < (short)uVar1) && (uVar2 = DAT_800a00e8 - 1, (int)(short)uVar1 <= DAT_800a00e8 + -1)) {
      uVar2 = uVar1;
    }
    iVar5 = (int)(short)*(ushort *)((int)param_2 + 6);
    if (iVar5 < 0) {
      sVar3 = 0;
    }
    else {
      sVar3 = DAT_800a00ea + -1;
      if (iVar5 <= DAT_800a00ea + -1) {
        SYS_OBJ_1790(iVar5);
        return;
      }
    }
    local_2c = CONCAT22(sVar3,uVar2);
    if (((*(ushort *)param_2 & 0x3f) != 0) || ((uVar2 & 0x3f) != 0)) {
      local_30 = CONCAT22(*(ushort *)((int)param_2 + 2) - *(ushort *)((int)param_2 + 10),
                          *(ushort *)param_2 - *(ushort *)(param_2 + 2));
      *(uint *)(param_1 + 0x1c) =
           (uint)*(byte *)((int)param_2 + 0x1b) << 0x10 |
           (uint)*(byte *)((int)param_2 + 0x1a) << 8 | 0x60000000 |
           (uint)*(byte *)((int)param_2 + 0x19);
      *(undefined4 *)(param_1 + 0x20) = local_30;
      *(undefined4 *)(param_1 + 0x24) = local_2c;
      SYS_OBJ_18AC();
      return;
    }
    cVar6 = '\n';
    *(uint *)(param_1 + 0x1c) =
         (uint)*(byte *)((int)param_2 + 0x1b) << 0x10 |
         (uint)*(byte *)((int)param_2 + 0x1a) << 8 | 0x2000000 |
         (uint)*(byte *)((int)param_2 + 0x19);
    *(undefined4 *)(param_1 + 0x20) = uVar4;
    *(undefined4 *)(param_1 + 0x24) = local_2c;
  }
  *(char *)(param_1 + 3) = cVar6 + -1;
  return;
}



void SYS_OBJ_1790(void)

{
  undefined2 in_v0;
  int in_t0;
  int unaff_s0;
  int unaff_s1;
  short param_5;
  short sStack00000012;
  ushort param_6;
  
  _param_6 = CONCAT22(in_v0,param_6);
  if (((_param_5 & 0x3f) == 0) && ((param_6 & 0x3f) == 0)) {
    *(uint *)(in_t0 * 4 + unaff_s1) =
         (uint)*(byte *)(unaff_s0 + 0x1b) << 0x10 |
         (uint)*(byte *)(unaff_s0 + 0x1a) << 8 | 0x2000000 | (uint)*(byte *)(unaff_s0 + 0x19);
    *(uint *)((in_t0 + 1) * 4 + unaff_s1) = _param_5;
    *(undefined4 *)((in_t0 + 2) * 4 + unaff_s1) = _param_6;
    *(char *)(unaff_s1 + 3) = (char)in_t0 + '\x02';
    return;
  }
  _param_5 = CONCAT22(sStack00000012 - *(short *)(unaff_s0 + 10),param_5 - *(short *)(unaff_s0 + 8))
  ;
  *(uint *)(in_t0 * 4 + unaff_s1) =
       (uint)*(byte *)(unaff_s0 + 0x1b) << 0x10 | (uint)*(byte *)(unaff_s0 + 0x1a) << 8 | 0x60000000
       | (uint)*(byte *)(unaff_s0 + 0x19);
  *(uint *)((in_t0 + 1) * 4 + unaff_s1) = _param_5;
  *(undefined4 *)((in_t0 + 2) * 4 + unaff_s1) = _param_6;
  SYS_OBJ_18AC();
  return;
}



void SYS_OBJ_18AC(void)

{
  char in_t0;
  int unaff_s1;
  
  *(char *)(unaff_s1 + 3) = in_t0 + -1;
  return;
}



uint get_mode(int param_1,int param_2,uint param_3)

{
  uint uVar1;
  
  if (DAT_800a00e4 - 1 < 2) {
    uVar1 = 0xe1000000;
    if (param_2 != 0) {
      uVar1 = 0xe1000800;
    }
    param_3 = param_3 & 0x27ff;
    if (param_1 != 0) {
      uVar1 = SYS_OBJ_191C();
      return uVar1;
    }
  }
  else {
    uVar1 = 0xe1000000;
    if (param_2 != 0) {
      uVar1 = 0xe1000200;
    }
    param_3 = param_3 & 0x9ff;
    if (param_1 != 0) {
      param_3 = param_3 | 0x400;
    }
  }
  return uVar1 | param_3;
}



uint SYS_OBJ_191C(void)

{
  uint in_v0;
  uint in_v1;
  
  return in_v1 | in_v0;
}



uint get_cs(short param_1,uint param_2)

{
  uint uVar1;
  int iVar2;
  
  if (param_1 < 0) {
    uVar1 = 0;
  }
  else {
    uVar1 = (int)DAT_800a00e8 - 1;
    if ((int)param_1 <= DAT_800a00e8 + -1) {
      uVar1 = SYS_OBJ_1964();
      return uVar1;
    }
  }
  if ((short)param_2 < 0) {
    param_2 = 0;
  }
  else {
    iVar2 = (int)DAT_800a00ea;
    if (iVar2 + -1 < (int)(short)param_2) {
      uVar1 = SYS_OBJ_19A4(iVar2,iVar2 + -1);
      return uVar1;
    }
  }
  if (1 < DAT_800a00e4 - 1) {
    uVar1 = SYS_OBJ_19D8();
    return uVar1;
  }
  return (param_2 & 0xfff) << 0xc | uVar1 & 0xfff | 0xe3000000;
}



uint SYS_OBJ_1964(undefined4 param_1,uint param_2)

{
  uint in_v0;
  int iVar1;
  uint uVar2;
  
  if ((short)param_2 < 0) {
    param_2 = 0;
  }
  else {
    iVar1 = (int)DAT_800a00ea;
    if (iVar1 + -1 < (int)(short)param_2) {
      uVar2 = SYS_OBJ_19A4(iVar1,iVar1 + -1);
      return uVar2;
    }
  }
  if (1 < DAT_800a00e4 - 1) {
    uVar2 = SYS_OBJ_19D8();
    return uVar2;
  }
  return (param_2 & 0xfff) << 0xc | in_v0 & 0xfff | 0xe3000000;
}



uint SYS_OBJ_19A4(undefined4 param_1,uint param_2,undefined4 param_3,uint param_4)

{
  uint uVar1;
  
  if (1 < DAT_800a00e4 - 1) {
    uVar1 = SYS_OBJ_19D8();
    return uVar1;
  }
  return (param_2 & 0xfff) << 0xc | param_4 & 0xfff | 0xe3000000;
}



uint SYS_OBJ_19D8(void)

{
  uint in_v0;
  uint in_v1;
  
  return in_v1 | in_v0 | 0xe3000000;
}



uint get_ce(short param_1,uint param_2)

{
  uint uVar1;
  int iVar2;
  
  if (param_1 < 0) {
    uVar1 = 0;
  }
  else {
    uVar1 = (int)DAT_800a00e8 - 1;
    if ((int)param_1 <= DAT_800a00e8 + -1) {
      uVar1 = SYS_OBJ_1A30();
      return uVar1;
    }
  }
  if ((short)param_2 < 0) {
    param_2 = 0;
  }
  else {
    iVar2 = (int)DAT_800a00ea;
    if (iVar2 + -1 < (int)(short)param_2) {
      uVar1 = SYS_OBJ_1A70(iVar2,iVar2 + -1);
      return uVar1;
    }
  }
  if (1 < DAT_800a00e4 - 1) {
    uVar1 = SYS_OBJ_1AA4();
    return uVar1;
  }
  return (param_2 & 0xfff) << 0xc | uVar1 & 0xfff | 0xe4000000;
}



uint SYS_OBJ_1A30(undefined4 param_1,uint param_2)

{
  uint in_v0;
  int iVar1;
  uint uVar2;
  
  if ((short)param_2 < 0) {
    param_2 = 0;
  }
  else {
    iVar1 = (int)DAT_800a00ea;
    if (iVar1 + -1 < (int)(short)param_2) {
      uVar2 = SYS_OBJ_1A70(iVar1,iVar1 + -1);
      return uVar2;
    }
  }
  if (1 < DAT_800a00e4 - 1) {
    uVar2 = SYS_OBJ_1AA4();
    return uVar2;
  }
  return (param_2 & 0xfff) << 0xc | in_v0 & 0xfff | 0xe4000000;
}



uint SYS_OBJ_1A70(undefined4 param_1,uint param_2,undefined4 param_3,uint param_4)

{
  uint uVar1;
  
  if (1 < DAT_800a00e4 - 1) {
    uVar1 = SYS_OBJ_1AA4();
    return uVar1;
  }
  return (param_2 & 0xfff) << 0xc | param_4 & 0xfff | 0xe4000000;
}



uint SYS_OBJ_1AA4(void)

{
  uint in_v0;
  uint in_v1;
  
  return in_v1 | in_v0 | 0xe4000000;
}



uint get_ofs(uint param_1,uint param_2)

{
  uint uVar1;
  
  if (1 < DAT_800a00e4 - 1) {
    uVar1 = SYS_OBJ_1AF0();
    return uVar1;
  }
  return (param_2 & 0xfff) << 0xc | param_1 & 0xfff | 0xe5000000;
}



uint SYS_OBJ_1AF0(void)

{
  uint in_v0;
  uint in_v1;
  
  return in_v1 | in_v0 | 0xe5000000;
}



uint get_tw(byte *param_1)

{
  uint uVar1;
  
  if (param_1 == (byte *)0x0) {
    uVar1 = SYS_OBJ_1B78();
    return uVar1;
  }
  return (uint)(param_1[2] >> 3) << 0xf | (uint)(*param_1 >> 3) << 10 | 0xe2000000 |
         ((int)(-(int)*(short *)(param_1 + 6) & 0xffU) >> 3) << 5 |
         (int)(-(int)*(short *)(param_1 + 4) & 0xffU) >> 3;
}



void SYS_OBJ_1B78(void)

{
  return;
}



int get_dx(short *param_1)

{
  int iVar1;
  
  if (DAT_800a00e4 == '\x01') {
    if (DAT_800a00e7 != '\0') {
      iVar1 = SYS_OBJ_1C2C((int)*param_1);
      return iVar1;
    }
    return (int)*param_1;
  }
  if (DAT_800a00e4 != '\x02') {
    iVar1 = SYS_OBJ_1C28();
    return iVar1;
  }
  if (DAT_800a00e7 != '\0') {
    iVar1 = SYS_OBJ_1BC4((int)*param_1);
    return iVar1;
  }
  iVar1 = SYS_OBJ_1C2C();
  return iVar1;
}



void SYS_OBJ_1BC4(void)

{
  SYS_OBJ_1C2C();
  return;
}



int SYS_OBJ_1C28(short *param_1)

{
  return (int)*param_1;
}



void SYS_OBJ_1C2C(void)

{
  return;
}



undefined4 _status(void)

{
  return *(undefined4 *)PTR_GPU_REG1_800a01b8;
}



int _otc(int param_1,int param_2)

{
  uint uVar1;
  int iVar2;
  
  *(uint *)PTR_DMA_DPCR_800a01d4 = *(uint *)PTR_DMA_DPCR_800a01d4 | 0x8000000;
  *(undefined4 *)PTR_DMA_OTC_CHCR_800a01d0 = 0;
  *(int *)PTR_DMA_OTC_MADR_800a01c8 = param_1 + param_2 * 4 + -4;
  *(int *)PTR_DMA_OTC_BCR_800a01cc = param_2;
  *(undefined4 *)PTR_DMA_OTC_CHCR_800a01d0 = 0x11000002;
  set_alarm();
  uVar1 = *(uint *)PTR_DMA_OTC_CHCR_800a01d0;
  while( true ) {
    if ((uVar1 & 0x1000000) == 0) {
      return param_2;
    }
    iVar2 = get_alarm();
    if (iVar2 != 0) break;
    uVar1 = *(uint *)PTR_DMA_OTC_CHCR_800a01d0;
  }
  return -1;
}



undefined4 _clr(undefined4 *param_1,uint param_2)

{
  ushort uVar1;
  undefined4 uVar2;
  uint uVar3;
  int iVar4;
  
  iVar4 = (int)(short)*(ushort *)(param_1 + 1);
  if (iVar4 < 0) {
    uVar1 = 0;
  }
  else {
    uVar1 = DAT_800a00e8 - 1;
    if (iVar4 <= DAT_800a00e8 + -1) {
      uVar2 = SYS_OBJ_1D84(iVar4,iVar4);
      return uVar2;
    }
  }
  iVar4 = (int)(short)*(ushort *)((int)param_1 + 6);
  *(ushort *)(param_1 + 1) = uVar1;
  if (iVar4 < 0) {
    uVar1 = 0;
  }
  else {
    uVar1 = DAT_800a00ea - 1;
    if (iVar4 <= DAT_800a00ea + -1) {
      uVar2 = SYS_OBJ_1DC0(iVar4);
      return uVar2;
    }
  }
  *(ushort *)((int)param_1 + 6) = uVar1;
  if (((*(ushort *)param_1 & 0x3f) == 0) && ((*(ushort *)(param_1 + 1) & 0x3f) == 0)) {
    DAT_800aca80 = 0x5ffffff;
    DAT_800aca84 = 0xe6000000;
    DAT_800aca8c = param_2 & 0xffffff | 0x2000000;
    DAT_800aca88 = *(uint *)PTR_GPU_REG1_800a01b8 & 0x7ff | (param_2 >> 0x1f) << 10 | 0xe1000000;
    DAT_800aca90 = *param_1;
    DAT_800aca94 = param_1[1];
    _cwc(&DAT_800aca80);
    return 0;
  }
  DAT_800aca80 = 0x80acaa4;
  DAT_800aca98 = param_2 & 0xffffff | 0x60000000;
  DAT_800aca90 = 0xe6000000;
  DAT_800aca84 = 0xe3000000;
  DAT_800aca88 = 0xe4ffffff;
  DAT_800aca8c = 0xe5000000;
  DAT_800aca94 = *(uint *)PTR_GPU_REG1_800a01b8 & 0x7ff | (param_2 >> 0x1f) << 10 | 0xe1000000;
  DAT_800aca9c = *param_1;
  DAT_800acaa0 = param_1[1];
  DAT_800acaa4 = 0x3ffffff;
  uVar3 = _param(3);
  DAT_800acaa8 = uVar3 | 0xe3000000;
  uVar3 = _param(4);
  DAT_800acaac = uVar3 | 0xe4000000;
  uVar3 = _param(5);
  DAT_800acab0 = uVar3 | 0xe5000000;
  uVar2 = SYS_OBJ_1F64();
  return uVar2;
}



undefined4 SYS_OBJ_1D84(void)

{
  ushort in_v0;
  undefined4 uVar1;
  uint uVar2;
  ushort uVar3;
  int iVar4;
  undefined4 *in_t0;
  uint in_t1;
  
  iVar4 = (int)(short)*(ushort *)((int)in_t0 + 6);
  *(ushort *)(in_t0 + 1) = in_v0;
  if (iVar4 < 0) {
    uVar3 = 0;
  }
  else {
    uVar3 = DAT_800a00ea - 1;
    if (iVar4 <= DAT_800a00ea + -1) {
      uVar1 = SYS_OBJ_1DC0(iVar4);
      return uVar1;
    }
  }
  *(ushort *)((int)in_t0 + 6) = uVar3;
  if (((*(ushort *)in_t0 & 0x3f) == 0) && ((*(ushort *)(in_t0 + 1) & 0x3f) == 0)) {
    DAT_800aca80 = 0x5ffffff;
    DAT_800aca84 = 0xe6000000;
    DAT_800aca8c = in_t1 & 0xffffff | 0x2000000;
    DAT_800aca88 = *(uint *)PTR_GPU_REG1_800a01b8 & 0x7ff | (in_t1 >> 0x1f) << 10 | 0xe1000000;
    DAT_800aca90 = *in_t0;
    DAT_800aca94 = in_t0[1];
    _cwc(&DAT_800aca80);
    return 0;
  }
  DAT_800aca80 = 0x80acaa4;
  DAT_800aca98 = in_t1 & 0xffffff | 0x60000000;
  DAT_800aca90 = 0xe6000000;
  DAT_800aca84 = 0xe3000000;
  DAT_800aca88 = 0xe4ffffff;
  DAT_800aca8c = 0xe5000000;
  DAT_800aca94 = *(uint *)PTR_GPU_REG1_800a01b8 & 0x7ff | (in_t1 >> 0x1f) << 10 | 0xe1000000;
  DAT_800aca9c = *in_t0;
  DAT_800acaa0 = in_t0[1];
  DAT_800acaa4 = 0x3ffffff;
  uVar2 = _param(3);
  DAT_800acaa8 = uVar2 | 0xe3000000;
  uVar2 = _param(4);
  DAT_800acaac = uVar2 | 0xe4000000;
  uVar2 = _param(5);
  DAT_800acab0 = uVar2 | 0xe5000000;
  uVar1 = SYS_OBJ_1F64();
  return uVar1;
}



undefined4 SYS_OBJ_1DC0(void)

{
  uint uVar1;
  undefined4 uVar2;
  ushort in_v1;
  undefined4 *in_t0;
  uint in_t1;
  
  *(ushort *)((int)in_t0 + 6) = in_v1;
  if (((*(ushort *)in_t0 & 0x3f) == 0) && ((*(ushort *)(in_t0 + 1) & 0x3f) == 0)) {
    DAT_800aca80 = 0x5ffffff;
    DAT_800aca84 = 0xe6000000;
    DAT_800aca8c = in_t1 & 0xffffff | 0x2000000;
    DAT_800aca88 = *(uint *)PTR_GPU_REG1_800a01b8 & 0x7ff | (in_t1 >> 0x1f) << 10 | 0xe1000000;
    DAT_800aca90 = *in_t0;
    DAT_800aca94 = in_t0[1];
    _cwc(&DAT_800aca80);
    return 0;
  }
  DAT_800aca80 = 0x80acaa4;
  DAT_800aca98 = in_t1 & 0xffffff | 0x60000000;
  DAT_800aca90 = 0xe6000000;
  DAT_800aca84 = 0xe3000000;
  DAT_800aca88 = 0xe4ffffff;
  DAT_800aca8c = 0xe5000000;
  DAT_800aca94 = *(uint *)PTR_GPU_REG1_800a01b8 & 0x7ff | (in_t1 >> 0x1f) << 10 | 0xe1000000;
  DAT_800aca9c = *in_t0;
  DAT_800acaa0 = in_t0[1];
  DAT_800acaa4 = 0x3ffffff;
  uVar1 = _param(3);
  DAT_800acaa8 = uVar1 | 0xe3000000;
  uVar1 = _param(4);
  DAT_800acaac = uVar1 | 0xe4000000;
  uVar1 = _param(5);
  DAT_800acab0 = uVar1 | 0xe5000000;
  uVar2 = SYS_OBJ_1F64();
  return uVar2;
}



undefined4 SYS_OBJ_1F64(void)

{
  _cwc(&DAT_800aca80);
  return 0;
}



// WARNING: Removing unreachable block (ram,0x8008bf28)

undefined4 _dws(undefined4 *param_1,undefined4 *param_2)

{
  undefined4 uVar1;
  int iVar2;
  uint uVar3;
  int iVar4;
  short sVar5;
  short sVar6;
  int iVar7;
  
  set_alarm();
  sVar5 = *(short *)(param_1 + 1);
  if (sVar5 < 0) {
    sVar5 = 0;
  }
  else if ((int)DAT_800a00e8 < (int)sVar5) {
    uVar1 = SYS_OBJ_1FF4((int)DAT_800a00e8);
    return uVar1;
  }
  sVar6 = *(short *)((int)param_1 + 6);
  iVar7 = (int)sVar6;
  *(short *)(param_1 + 1) = sVar5;
  if (iVar7 < 0) {
    sVar6 = 0;
    iVar2 = 0;
  }
  else {
    iVar2 = iVar7 << 0x10;
    if (DAT_800a00ea < iVar7) {
      uVar1 = SYS_OBJ_202C((int)DAT_800a00ea);
      return uVar1;
    }
  }
  *(short *)((int)param_1 + 6) = sVar6;
  iVar7 = (int)*(short *)(param_1 + 1) * (iVar2 >> 0x10) + 1;
  iVar2 = iVar7 - (iVar7 >> 0x1f) >> 5;
  if (0 < iVar7 / 2) {
    iVar7 = iVar7 / 2 + iVar2 * -0x10;
    uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    while( true ) {
      if ((uVar3 & 0x4000000) != 0) {
        *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000000;
        *(undefined4 *)PTR_GPU_REG0_800a01b4 = 0x1000000;
        *(undefined4 *)PTR_GPU_REG0_800a01b4 = 0xa0000000;
        *(undefined4 *)PTR_GPU_REG0_800a01b4 = *param_1;
        *(undefined4 *)PTR_GPU_REG0_800a01b4 = param_1[1];
        while (iVar7 = iVar7 + -1, iVar7 != -1) {
          uVar1 = *param_2;
          param_2 = param_2 + 1;
          *(undefined4 *)PTR_GPU_REG0_800a01b4 = uVar1;
        }
        if (iVar2 != 0) {
          *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000002;
          *(undefined4 **)PTR_DMA_GPU_MADR_800a01bc = param_2;
          *(uint *)PTR_DMA_GPU_BCR_800a01c0 = iVar2 << 0x10 | 0x10;
          *(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4 = 0x1000201;
        }
        return 0;
      }
      iVar4 = get_alarm();
      if (iVar4 != 0) break;
      uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    }
    return 0xffffffff;
  }
  uVar1 = SYS_OBJ_21A4();
  return uVar1;
}



undefined4 SYS_OBJ_1FF4(void)

{
  int iVar1;
  undefined4 uVar2;
  uint uVar3;
  int iVar4;
  undefined2 in_v1;
  short sVar5;
  int iVar6;
  undefined4 *unaff_s1;
  undefined4 *unaff_s2;
  int unaff_s5;
  
  sVar5 = *(short *)((int)unaff_s1 + 6);
  iVar6 = (int)sVar5;
  *(undefined2 *)(unaff_s1 + 1) = in_v1;
  if (iVar6 < 0) {
    sVar5 = 0;
    iVar1 = 0;
  }
  else {
    iVar1 = iVar6 << 0x10;
    if (DAT_800a00ea < iVar6) {
      uVar2 = SYS_OBJ_202C((int)DAT_800a00ea);
      return uVar2;
    }
  }
  *(short *)((int)unaff_s1 + 6) = sVar5;
  iVar6 = (int)*(short *)(unaff_s1 + 1) * (iVar1 >> 0x10) + 1;
  iVar1 = iVar6 - (iVar6 >> 0x1f) >> 5;
  if (0 < iVar6 / 2) {
    iVar6 = iVar6 / 2 + iVar1 * -0x10;
    uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    while( true ) {
      if ((uVar3 & 0x4000000) != 0) {
        uVar2 = 0xa0000000;
        *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000000;
        *(undefined4 *)PTR_GPU_REG0_800a01b4 = 0x1000000;
        if (unaff_s5 != 0) {
          uVar2 = 0xb0000000;
        }
        *(undefined4 *)PTR_GPU_REG0_800a01b4 = uVar2;
        *(undefined4 *)PTR_GPU_REG0_800a01b4 = *unaff_s1;
        *(undefined4 *)PTR_GPU_REG0_800a01b4 = unaff_s1[1];
        while (iVar6 = iVar6 + -1, iVar6 != -1) {
          uVar2 = *unaff_s2;
          unaff_s2 = unaff_s2 + 1;
          *(undefined4 *)PTR_GPU_REG0_800a01b4 = uVar2;
        }
        if (iVar1 != 0) {
          *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000002;
          *(undefined4 **)PTR_DMA_GPU_MADR_800a01bc = unaff_s2;
          *(uint *)PTR_DMA_GPU_BCR_800a01c0 = iVar1 << 0x10 | 0x10;
          *(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4 = 0x1000201;
        }
        return 0;
      }
      iVar4 = get_alarm();
      if (iVar4 != 0) break;
      uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    }
    return 0xffffffff;
  }
  uVar2 = SYS_OBJ_21A4();
  return uVar2;
}



undefined4 SYS_OBJ_202C(short param_1)

{
  undefined4 uVar1;
  uint uVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  undefined4 *unaff_s1;
  undefined4 *unaff_s2;
  int unaff_s5;
  
  *(short *)((int)unaff_s1 + 6) = param_1;
  iVar4 = (int)*(short *)(unaff_s1 + 1) * (int)param_1 + 1;
  iVar5 = iVar4 - (iVar4 >> 0x1f) >> 5;
  if (iVar4 / 2 < 1) {
    uVar1 = SYS_OBJ_21A4();
    return uVar1;
  }
  iVar4 = iVar4 / 2 + iVar5 * -0x10;
  uVar2 = *(uint *)PTR_GPU_REG1_800a01b8;
  while( true ) {
    if ((uVar2 & 0x4000000) != 0) {
      uVar1 = 0xa0000000;
      *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000000;
      *(undefined4 *)PTR_GPU_REG0_800a01b4 = 0x1000000;
      if (unaff_s5 != 0) {
        uVar1 = 0xb0000000;
      }
      *(undefined4 *)PTR_GPU_REG0_800a01b4 = uVar1;
      *(undefined4 *)PTR_GPU_REG0_800a01b4 = *unaff_s1;
      *(undefined4 *)PTR_GPU_REG0_800a01b4 = unaff_s1[1];
      while (iVar4 = iVar4 + -1, iVar4 != -1) {
        uVar1 = *unaff_s2;
        unaff_s2 = unaff_s2 + 1;
        *(undefined4 *)PTR_GPU_REG0_800a01b4 = uVar1;
      }
      if (iVar5 != 0) {
        *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000002;
        *(undefined4 **)PTR_DMA_GPU_MADR_800a01bc = unaff_s2;
        *(uint *)PTR_DMA_GPU_BCR_800a01c0 = iVar5 << 0x10 | 0x10;
        *(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4 = 0x1000201;
      }
      return 0;
    }
    iVar3 = get_alarm();
    if (iVar3 != 0) break;
    uVar2 = *(uint *)PTR_GPU_REG1_800a01b8;
  }
  return 0xffffffff;
}



void SYS_OBJ_21A4(void)

{
  return;
}



undefined4 _drs(undefined4 *param_1,undefined4 *param_2)

{
  undefined4 uVar1;
  int iVar2;
  uint uVar3;
  int iVar4;
  short sVar5;
  short sVar6;
  int iVar7;
  
  set_alarm();
  sVar5 = *(short *)(param_1 + 1);
  if (sVar5 < 0) {
    sVar5 = 0;
  }
  else if ((int)DAT_800a00e8 < (int)sVar5) {
    uVar1 = SYS_OBJ_222C((int)DAT_800a00e8);
    return uVar1;
  }
  sVar6 = *(short *)((int)param_1 + 6);
  iVar7 = (int)sVar6;
  *(short *)(param_1 + 1) = sVar5;
  if (iVar7 < 0) {
    sVar6 = 0;
    iVar2 = 0;
  }
  else {
    iVar2 = iVar7 << 0x10;
    if (DAT_800a00ea < iVar7) {
      uVar1 = SYS_OBJ_2264((int)DAT_800a00ea);
      return uVar1;
    }
  }
  *(short *)((int)param_1 + 6) = sVar6;
  iVar7 = (int)*(short *)(param_1 + 1) * (iVar2 >> 0x10) + 1;
  iVar2 = iVar7 - (iVar7 >> 0x1f) >> 5;
  if (0 < iVar7 / 2) {
    iVar7 = iVar7 / 2 + iVar2 * -0x10;
    uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    while ((uVar3 & 0x4000000) == 0) {
      iVar4 = get_alarm();
      if (iVar4 != 0) {
        return 0xffffffff;
      }
      uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    }
    *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000000;
    *(undefined4 *)PTR_GPU_REG0_800a01b4 = 0x1000000;
    *(undefined4 *)PTR_GPU_REG0_800a01b4 = 0xc0000000;
    *(undefined4 *)PTR_GPU_REG0_800a01b4 = *param_1;
    *(undefined4 *)PTR_GPU_REG0_800a01b4 = param_1[1];
    uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    while( true ) {
      if ((uVar3 & 0x8000000) != 0) {
        while (iVar7 = iVar7 + -1, iVar7 != -1) {
          *param_2 = *(undefined4 *)PTR_GPU_REG0_800a01b4;
          param_2 = param_2 + 1;
        }
        if (iVar2 != 0) {
          *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000003;
          *(undefined4 **)PTR_DMA_GPU_MADR_800a01bc = param_2;
          *(uint *)PTR_DMA_GPU_BCR_800a01c0 = iVar2 << 0x10 | 0x10;
          *(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4 = 0x1000200;
        }
        return 0;
      }
      iVar4 = get_alarm();
      if (iVar4 != 0) break;
      uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    }
    return 0xffffffff;
  }
  uVar1 = SYS_OBJ_242C();
  return uVar1;
}



undefined4 SYS_OBJ_222C(void)

{
  int iVar1;
  undefined4 uVar2;
  uint uVar3;
  int iVar4;
  undefined2 in_v1;
  short sVar5;
  int iVar6;
  undefined4 *unaff_s1;
  undefined4 *unaff_s2;
  
  sVar5 = *(short *)((int)unaff_s1 + 6);
  iVar6 = (int)sVar5;
  *(undefined2 *)(unaff_s1 + 1) = in_v1;
  if (iVar6 < 0) {
    sVar5 = 0;
    iVar1 = 0;
  }
  else {
    iVar1 = iVar6 << 0x10;
    if (DAT_800a00ea < iVar6) {
      uVar2 = SYS_OBJ_2264((int)DAT_800a00ea);
      return uVar2;
    }
  }
  *(short *)((int)unaff_s1 + 6) = sVar5;
  iVar6 = (int)*(short *)(unaff_s1 + 1) * (iVar1 >> 0x10) + 1;
  iVar1 = iVar6 - (iVar6 >> 0x1f) >> 5;
  if (0 < iVar6 / 2) {
    iVar6 = iVar6 / 2 + iVar1 * -0x10;
    uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    while ((uVar3 & 0x4000000) == 0) {
      iVar4 = get_alarm();
      if (iVar4 != 0) {
        return 0xffffffff;
      }
      uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    }
    *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000000;
    *(undefined4 *)PTR_GPU_REG0_800a01b4 = 0x1000000;
    *(undefined4 *)PTR_GPU_REG0_800a01b4 = 0xc0000000;
    *(undefined4 *)PTR_GPU_REG0_800a01b4 = *unaff_s1;
    *(undefined4 *)PTR_GPU_REG0_800a01b4 = unaff_s1[1];
    uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    while( true ) {
      if ((uVar3 & 0x8000000) != 0) {
        while (iVar6 = iVar6 + -1, iVar6 != -1) {
          *unaff_s2 = *(undefined4 *)PTR_GPU_REG0_800a01b4;
          unaff_s2 = unaff_s2 + 1;
        }
        if (iVar1 != 0) {
          *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000003;
          *(undefined4 **)PTR_DMA_GPU_MADR_800a01bc = unaff_s2;
          *(uint *)PTR_DMA_GPU_BCR_800a01c0 = iVar1 << 0x10 | 0x10;
          *(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4 = 0x1000200;
        }
        return 0;
      }
      iVar4 = get_alarm();
      if (iVar4 != 0) break;
      uVar3 = *(uint *)PTR_GPU_REG1_800a01b8;
    }
    return 0xffffffff;
  }
  uVar2 = SYS_OBJ_242C();
  return uVar2;
}



undefined4 SYS_OBJ_2264(short param_1)

{
  undefined4 uVar1;
  uint uVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  undefined4 *unaff_s1;
  undefined4 *unaff_s2;
  
  *(short *)((int)unaff_s1 + 6) = param_1;
  iVar4 = (int)*(short *)(unaff_s1 + 1) * (int)param_1 + 1;
  iVar5 = iVar4 - (iVar4 >> 0x1f) >> 5;
  if (iVar4 / 2 < 1) {
    uVar1 = SYS_OBJ_242C();
    return uVar1;
  }
  iVar4 = iVar4 / 2 + iVar5 * -0x10;
  uVar2 = *(uint *)PTR_GPU_REG1_800a01b8;
  while ((uVar2 & 0x4000000) == 0) {
    iVar3 = get_alarm();
    if (iVar3 != 0) {
      return 0xffffffff;
    }
    uVar2 = *(uint *)PTR_GPU_REG1_800a01b8;
  }
  *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000000;
  *(undefined4 *)PTR_GPU_REG0_800a01b4 = 0x1000000;
  *(undefined4 *)PTR_GPU_REG0_800a01b4 = 0xc0000000;
  *(undefined4 *)PTR_GPU_REG0_800a01b4 = *unaff_s1;
  *(undefined4 *)PTR_GPU_REG0_800a01b4 = unaff_s1[1];
  uVar2 = *(uint *)PTR_GPU_REG1_800a01b8;
  while( true ) {
    if ((uVar2 & 0x8000000) != 0) {
      while (iVar4 = iVar4 + -1, iVar4 != -1) {
        *unaff_s2 = *(undefined4 *)PTR_GPU_REG0_800a01b4;
        unaff_s2 = unaff_s2 + 1;
      }
      if (iVar5 != 0) {
        *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000003;
        *(undefined4 **)PTR_DMA_GPU_MADR_800a01bc = unaff_s2;
        *(uint *)PTR_DMA_GPU_BCR_800a01c0 = iVar5 << 0x10 | 0x10;
        *(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4 = 0x1000200;
      }
      return 0;
    }
    iVar3 = get_alarm();
    if (iVar3 != 0) break;
    uVar2 = *(uint *)PTR_GPU_REG1_800a01b8;
  }
  return 0xffffffff;
}



void SYS_OBJ_242C(void)

{
  return;
}



void _ctl(uint param_1)

{
  *(uint *)PTR_GPU_REG1_800a01b8 = param_1;
  (&DAT_800acac4)[param_1 >> 0x18] = (char)param_1;
  return;
}



undefined _getctl(int param_1)

{
  return (&DAT_800acac4)[param_1];
}



undefined4 _cwb(undefined4 *param_1,int param_2)

{
  undefined4 uVar1;
  int iVar2;
  
  iVar2 = param_2 + -1;
  *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000000;
  if (param_2 != 0) {
    do {
      uVar1 = *param_1;
      param_1 = param_1 + 1;
      iVar2 = iVar2 + -1;
      *(undefined4 *)PTR_GPU_REG0_800a01b4 = uVar1;
    } while (iVar2 != -1);
  }
  return 0;
}



void _cwc(undefined4 param_1)

{
  *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x4000002;
  *(undefined4 *)PTR_DMA_GPU_MADR_800a01bc = param_1;
  *(undefined4 *)PTR_DMA_GPU_BCR_800a01c0 = 0;
  *(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4 = 0x1000401;
  return;
}



uint _param(uint param_1)

{
  *(uint *)PTR_GPU_REG1_800a01b8 = param_1 | 0x10000000;
  return *(uint *)PTR_GPU_REG0_800a01b4 & 0xffffff;
}



void _addque(undefined4 param_1,undefined4 param_2,undefined4 param_3)

{
  _addque2(param_1,param_2,0,param_3);
  return;
}



void _addque2(void)

{
  set_alarm();
  SYS_OBJ_25C8();
  return;
}



uint SYS_OBJ_25C8(void)

{
  uint uVar1;
  int iVar2;
  undefined4 uVar3;
  undefined4 *unaff_s0;
  int unaff_s1;
  undefined4 unaff_s2;
  code *unaff_s3;
  
  while ((DAT_800a01e8 + 1 & 0x3f) == DAT_800a01ec) {
    iVar2 = get_alarm();
    if (iVar2 != 0) {
      return 0xffffffff;
    }
    _exeque();
  }
  DAT_800a01f0 = SetIntrMask(0);
  DAT_800a00ec = 1;
  if ((DAT_800a00e5 == '\0') ||
     (((DAT_800a01e8 == DAT_800a01ec && ((*(uint *)PTR_DMA_GPU_CHCR_800a01c4 & 0x1000000) == 0)) &&
      (DAT_800a00f0 == 0)))) {
    do {
    } while ((*(uint *)PTR_GPU_REG1_800a01b8 & 0x4000000) == 0);
    (*unaff_s3)();
    DAT_800a01d8 = unaff_s3;
    DAT_800a01dc = unaff_s0;
    DAT_800a01e0 = unaff_s2;
    SetIntrMask(DAT_800a01f0);
    uVar1 = SYS_OBJ_283C();
    return uVar1;
  }
  DMACallback(2,_exeque);
  if (unaff_s1 == 0) {
    *(undefined4 **)(&DAT_800acc24 + DAT_800a01e8 * 0x60) = unaff_s0;
    *(undefined4 *)(&DAT_800acc28 + DAT_800a01e8 * 0x60) = unaff_s2;
    *(code **)(&DAT_800acc20 + DAT_800a01e8 * 0x60) = unaff_s3;
    DAT_800a01e8 = DAT_800a01e8 + 1 & 0x3f;
    SetIntrMask(DAT_800a01f0);
    _exeque();
    return DAT_800a01e8 - DAT_800a01ec & 0x3f;
  }
  if (unaff_s1 < 0) {
    unaff_s1 = unaff_s1 + 3;
  }
  if (0 < unaff_s1 >> 2) {
    uVar3 = *unaff_s0;
    iVar2 = DAT_800a01e8 * 0x60;
    *(undefined4 *)(&DAT_800acc2c + iVar2) = uVar3;
    uVar1 = SYS_OBJ_26EC(&DAT_800acc2c + iVar2,uVar3,1,unaff_s0 + 1);
    return uVar1;
  }
  *(undefined **)(&DAT_800acc24 + DAT_800a01e8 * 0x60) = &DAT_800acc2c + DAT_800a01e8 * 0x60;
  uVar1 = SYS_OBJ_27A8();
  return uVar1;
}



void SYS_OBJ_26EC(undefined4 param_1,undefined4 param_2,int param_3,undefined4 *param_4)

{
  int in_v0;
  undefined4 *puVar1;
  undefined4 uVar2;
  int in_t0;
  
  if (in_v0 < 0) {
    in_v0 = in_v0 + 3;
  }
  if (param_3 < in_v0 >> 2) {
    uVar2 = *param_4;
    puVar1 = (undefined4 *)(param_3 * 4 + DAT_800a01e8 * 0x60 + in_t0);
    *puVar1 = uVar2;
    SYS_OBJ_26EC(puVar1,uVar2,param_3 + 1,param_4 + 1);
    return;
  }
  *(undefined **)(&DAT_800acc24 + DAT_800a01e8 * 0x60) = &DAT_800acc2c + DAT_800a01e8 * 0x60;
  SYS_OBJ_27A8();
  return;
}



uint SYS_OBJ_27A8(void)

{
  undefined4 unaff_s2;
  undefined4 unaff_s3;
  
  *(undefined4 *)(&DAT_800acc28 + DAT_800a01e8 * 0x60) = unaff_s2;
  *(undefined4 *)(&DAT_800acc20 + DAT_800a01e8 * 0x60) = unaff_s3;
  DAT_800a01e8 = DAT_800a01e8 + 1 & 0x3f;
  SetIntrMask(DAT_800a01f0);
  _exeque();
  return DAT_800a01e8 - DAT_800a01ec & 0x3f;
}



void SYS_OBJ_283C(void)

{
  return;
}



uint _exeque(void)

{
  uint uVar1;
  
  uVar1 = 1;
  if ((*(uint *)PTR_DMA_GPU_CHCR_800a01c4 & 0x1000000) == 0) {
    DAT_800a01f4 = SetIntrMask(0);
    if (DAT_800a01e8 != DAT_800a01ec) {
      uVar1 = *(uint *)PTR_DMA_GPU_CHCR_800a01c4;
      while ((uVar1 & 0x1000000) == 0) {
        if (((DAT_800a01ec + 1 & 0x3f) == DAT_800a01e8) && (DAT_800a00f0 == (code *)0x0)) {
          DMACallback(2,0);
        }
        uVar1 = *(uint *)PTR_GPU_REG1_800a01b8;
        while ((uVar1 & 0x4000000) == 0) {
          uVar1 = *(uint *)PTR_GPU_REG1_800a01b8;
        }
        (**(code **)(&DAT_800acc20 + DAT_800a01ec * 0x60))
                  (*(undefined4 *)(&DAT_800acc24 + DAT_800a01ec * 0x60),
                   *(undefined4 *)(&DAT_800acc28 + DAT_800a01ec * 0x60));
        DAT_800a01d8 = *(undefined4 *)(&DAT_800acc20 + DAT_800a01ec * 0x60);
        DAT_800a01dc = *(undefined4 *)(&DAT_800acc24 + DAT_800a01ec * 0x60);
        DAT_800a01e0 = *(undefined4 *)(&DAT_800acc28 + DAT_800a01ec * 0x60);
        DAT_800a01ec = DAT_800a01ec + 1 & 0x3f;
        if (DAT_800a01e8 == DAT_800a01ec) break;
        uVar1 = *(uint *)PTR_DMA_GPU_CHCR_800a01c4;
      }
    }
    SetIntrMask(DAT_800a01f4);
    if ((((DAT_800a01e8 == DAT_800a01ec) && ((*(uint *)PTR_DMA_GPU_CHCR_800a01c4 & 0x1000000) == 0))
        && (DAT_800a00ec != 0)) && (DAT_800a00f0 != (code *)0x0)) {
      DAT_800a00ec = 0;
      (*DAT_800a00f0)();
    }
    uVar1 = DAT_800a01e8 - DAT_800a01ec & 0x3f;
  }
  return uVar1;
}



undefined4 _reset(uint param_1)

{
  undefined4 uVar1;
  uint uVar2;
  
  DAT_800a01f8 = SetIntrMask(0);
  DAT_800a01ec = 0;
  DAT_800a01e8 = 0;
  uVar2 = param_1 & 7;
  if (uVar2 != 1) {
    if (uVar2 < 2) {
      if (uVar2 != 0) {
        uVar1 = SYS_OBJ_2C6C();
        return uVar1;
      }
SYS_OBJ_2BBC:
      *(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4 = 0x401;
      *(uint *)PTR_DMA_DPCR_800a01d4 = *(uint *)PTR_DMA_DPCR_800a01d4 | 0x800;
      *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0;
      memset(&DAT_800acac4,'\0',0x100);
      memset(&DAT_800acc20,'\0',0x1800);
      uVar1 = SYS_OBJ_2C6C();
      return uVar1;
    }
    if (uVar2 != 3) {
      if (uVar2 == 5) goto SYS_OBJ_2BBC;
      goto code_r0x8008caa0;
    }
  }
  *(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4 = 0x401;
  *(uint *)PTR_DMA_DPCR_800a01d4 = *(uint *)PTR_DMA_DPCR_800a01d4 | 0x800;
  *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x2000000;
  *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x1000000;
code_r0x8008caa0:
  SetIntrMask(DAT_800a01f8);
  uVar1 = 0;
  if ((param_1 & 7) == 0) {
    uVar1 = _version(param_1);
  }
  return uVar1;
}



undefined4 SYS_OBJ_2C6C(void)

{
  undefined4 uVar1;
  uint unaff_s0;
  
  SetIntrMask(DAT_800a01f8);
  uVar1 = 0;
  if ((unaff_s0 & 7) == 0) {
    uVar1 = _version();
  }
  return uVar1;
}



uint _sync(int param_1)

{
  uint uVar1;
  
  if (param_1 == 0) {
    set_alarm();
    uVar1 = SYS_OBJ_2CDC();
    return uVar1;
  }
  uVar1 = DAT_800a01e8 - DAT_800a01ec & 0x3f;
  if (uVar1 != 0) {
    _exeque();
  }
  if ((((*(uint *)PTR_DMA_GPU_CHCR_800a01c4 & 0x1000000) != 0) ||
      ((*(uint *)PTR_GPU_REG1_800a01b8 & 0x4000000) == 0)) && (uVar1 == 0)) {
    uVar1 = SYS_OBJ_2DD8();
    return uVar1;
  }
  return uVar1;
}



undefined4 SYS_OBJ_2CC4(void)

{
  int iVar1;
  undefined4 uVar2;
  
  _exeque();
  iVar1 = get_alarm();
  if (iVar1 == 0) {
    if (DAT_800a01e8 != DAT_800a01ec) {
      uVar2 = SYS_OBJ_2CC4();
      return uVar2;
    }
    do {
      if (((*(uint *)PTR_DMA_GPU_CHCR_800a01c4 & 0x1000000) == 0) &&
         ((*(uint *)PTR_GPU_REG1_800a01b8 & 0x4000000) != 0)) {
        uVar2 = SYS_OBJ_2DD8();
        return uVar2;
      }
      iVar1 = get_alarm();
    } while (iVar1 == 0);
  }
  return 0xffffffff;
}



undefined4 SYS_OBJ_2CDC(void)

{
  undefined4 uVar1;
  int iVar2;
  
  if (DAT_800a01e8 != DAT_800a01ec) {
    uVar1 = SYS_OBJ_2CC4();
    return uVar1;
  }
  while (((*(uint *)PTR_DMA_GPU_CHCR_800a01c4 & 0x1000000) != 0 ||
         ((*(uint *)PTR_GPU_REG1_800a01b8 & 0x4000000) == 0))) {
    iVar2 = get_alarm();
    if (iVar2 != 0) {
      return 0xffffffff;
    }
  }
  uVar1 = SYS_OBJ_2DD8();
  return uVar1;
}



void SYS_OBJ_2DD8(void)

{
  return;
}



void set_alarm(void)

{
  int iVar1;
  
  iVar1 = VSync(-1);
  DAT_800a01fc = iVar1 + 0xf0;
  DAT_800a0200 = 0;
  return;
}



undefined4 get_alarm(void)

{
  int iVar1;
  int iVar2;
  undefined4 uVar3;
  
  iVar2 = VSync(-1);
  iVar1 = DAT_800a0200;
  if ((iVar2 <= DAT_800a01fc) && (DAT_800a0200 = DAT_800a0200 + 1, iVar1 < 0xf0001)) {
    return 0;
  }
  printf("GPU timeout:que=%d,stat=%08x,chcr=%08x,madr=%08x,",DAT_800a01e8 - DAT_800a01ec & 0x3f,
         *(undefined4 *)PTR_GPU_REG1_800a01b8,*(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4,
         *(undefined4 *)PTR_DMA_GPU_MADR_800a01bc);
  printf("func=(%08x)(%08x,%08x)\n",DAT_800a01d8,DAT_800a01dc,DAT_800a01e0);
  DAT_800a01f8 = SetIntrMask(0);
  DAT_800a01ec = 0;
  DAT_800a01e8 = 0;
  *(undefined4 *)PTR_DMA_GPU_CHCR_800a01c4 = 0x401;
  *(uint *)PTR_DMA_DPCR_800a01d4 = *(uint *)PTR_DMA_DPCR_800a01d4 | 0x800;
  *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x2000000;
  *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x1000000;
  SetIntrMask(DAT_800a01f8);
  uVar3 = SYS_OBJ_2F7C();
  return uVar3;
}



void SYS_OBJ_2F7C(void)

{
  return;
}



undefined4 _version(uint param_1)

{
  undefined4 uVar1;
  
  *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x10000007;
  if ((*(uint *)PTR_GPU_REG0_800a01b4 & 0xffffff) == 2) {
    if ((param_1 & 8) != 0) {
      *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x9000001;
      uVar1 = SYS_OBJ_3060();
      return uVar1;
    }
    return 3;
  }
  *(uint *)PTR_GPU_REG0_800a01b4 = *(uint *)PTR_GPU_REG1_800a01b8 & 0x3fff | 0xe1001000;
  if ((*(uint *)PTR_GPU_REG1_800a01b8 & 0x1000) == 0) {
    uVar1 = SYS_OBJ_3060();
    return uVar1;
  }
  if ((param_1 & 8) == 0) {
    uVar1 = SYS_OBJ_3060();
    return uVar1;
  }
  *(undefined4 *)PTR_GPU_REG1_800a01b8 = 0x20000504;
  uVar1 = SYS_OBJ_3060();
  return uVar1;
}



void SYS_OBJ_3060(void)

{
  return;
}



void * memset(uchar *param_1,uchar param_2,int param_3)

{
  void *pvVar1;
  
  pvVar1 = (void *)(param_3 + -1);
  if (param_3 != 0) {
    do {
      *param_1 = param_2;
      pvVar1 = (void *)((int)pvVar1 + -1);
      param_1 = param_1 + 1;
    } while (pvVar1 != (void *)0xffffffff);
  }
  return pvVar1;
}



void GPU_cw(void)

{
  (*(code *)&LAB_000000a0)();
  return;
}


